## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 2) import System as sys;
import System as sys
# (Line 3) import NPC.NPC as npc;
from NPC import NPC as npc
# (Line 4) import User.Info as user;
from User import Info as user
# (Line 5) import User.Inventory as inven;
from User import Inventory as inven
# (Line 7) import Screen as screen;
import Screen as screen
# (Line 9) const color = PVariable();
color = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const mousePosition = PVariable();
mousePosition = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) var text = Db("");
text = EUDCreateVariables(1)
_IGVA([text], lambda: [Db("")])
# (Line 13) function OpenConv();
# (Line 14) function CloseConv();
# (Line 16) function Guard() {
@EUDFunc
def Guard():
    # (Line 17) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 18) if(v.KeyC[cp] == 1) {
    if EUDIf()(v.KeyC[cp] == 1):
        # (Line 19) if(user.position[cp] == 1) {
        if EUDIf()(user.position[cp] == 1):
            # (Line 20) if(sys.EPDBring(v.playerLoc[cp], npc.Guard[0]) || sys.EPDBring(v.playerLoc[cp], npc.Guard[1])) {
            if EUDIf()(EUDSCOr()(sys.EPDBring(v.playerLoc[cp], npc.Guard[0]))(sys.EPDBring(v.playerLoc[cp], npc.Guard[1]))()):
                # (Line 21) if(user.conv[cp] == 0) OpenConv();
                if EUDIf()(user.conv[cp] == 0):
                    OpenConv()
                    # (Line 22) else CloseConv();
                if EUDElse()():
                    CloseConv()
                    # (Line 23) }
                EUDEndIf()
                # (Line 24) }
            EUDEndIf()
            # (Line 25) }
        EUDEndIf()
        # (Line 27) if(user.conv[cp] == 1) {
    EUDEndIf()
    if EUDIf()(user.conv[cp] == 1):
        # (Line 28) sys.Stop();
        sys.Stop()
        # (Line 29) var x = 0;
        x = EUDVariable()
        x << (0)
        # (Line 30) if(v.screenMode[cp] == 1) x = 106;
        if EUDIf()(v.screenMode[cp] == 1):
            x << (106)
            # (Line 31) if(v.textRefresh[cp] == 1) {
        EUDEndIf()
        if EUDIf()(v.textRefresh[cp] == 1):
            # (Line 32) v.textRefresh[cp] = 0;
            _ARRW(v.textRefresh, cp) << (0)
            # (Line 33) v.d.insert(0);
            v.d.insert(0)
            # (Line 34) v.d.append("\x13───────────────────────\n");
            v.d.append("\x13───────────────────────\n")
            # (Line 35) v.d.append("\x13\x1c[ 경비병 ]\n");
            v.d.append("\x13\x1c[ 경비병 ]\n")
            # (Line 36) v.d.append(ptr2s(text));
            v.d.append(ptr2s(text))
            # (Line 37) v.d.append("\x13───────────────────────\n");
            v.d.append("\x13───────────────────────\n")
            # (Line 38) v.d.append("\x13", ptr2s(color[cp]), "( C ) \x17대화 끝내기");
            v.d.append("\x13", ptr2s(color[cp]), "( C ) \x17대화 끝내기")
            # (Line 39) }
            # (Line 40) v.d.DisplayAt(0);
        EUDEndIf()
        v.d.DisplayAt(0)
        # (Line 41) if(IsUserCP()) {
        if EUDIf()(IsUserCP()):
            # (Line 42) if(v._mouseY[cp] >= 176 && v._mouseY[cp] <= 190) {
            if EUDIf()(EUDSCAnd()(v._mouseY[cp] >= 176)(v._mouseY[cp] <= 190)()):
                # (Line 43) if(v._mouseX[cp] >= 277 + x && v._mouseX[cp] <= 363 + x) {
                if EUDIf()(EUDSCAnd()(v._mouseX[cp] >= 277 + x)(v._mouseX[cp] <= 363 + x)()):
                    # (Line 44) if(mousePosition[cp] != 1) {
                    if EUDIf()(mousePosition[cp] == 1, neg=True):
                        # (Line 45) mousePosition[cp] = 1;
                        _ARRW(mousePosition, cp) << (1)
                        # (Line 46) color[cp] = Db("\x04");
                        _ARRW(color, cp) << (Db("\x04"))
                        # (Line 47) v.textRefresh[cp] = 1;
                        _ARRW(v.textRefresh, cp) << (1)
                        # (Line 48) }
                        # (Line 49) }
                    EUDEndIf()
                    # (Line 50) }
                EUDEndIf()
                # (Line 51) else if(mousePosition[cp] == 1) {
            if EUDElseIf()(mousePosition[cp] == 1):
                # (Line 52) mousePosition[cp] = 0;
                _ARRW(mousePosition, cp) << (0)
                # (Line 53) color[cp] = Db("\x05");
                _ARRW(color, cp) << (Db("\x05"))
                # (Line 54) v.textRefresh[cp] = 1;
                _ARRW(v.textRefresh, cp) << (1)
                # (Line 55) }
                # (Line 56) }
            EUDEndIf()
            # (Line 57) if(v.mouseClick[cp] == 1) {
        EUDEndIf()
        if EUDIf()(v.mouseClick[cp] == 1):
            # (Line 58) if(v.mouseY[cp] >= 176 && v.mouseY[cp] <= 190) {
            if EUDIf()(EUDSCAnd()(v.mouseY[cp] >= 176)(v.mouseY[cp] <= 190)()):
                # (Line 59) if(v.mouseX[cp] >= 277 + x && v.mouseX[cp] <= 363 + x) {
                if EUDIf()(EUDSCAnd()(v.mouseX[cp] >= 277 + x)(v.mouseX[cp] <= 363 + x)()):
                    # (Line 60) PlayWAV("staredit\\wav\\click2.ogg");
                    # (Line 61) CloseConv();
                    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                    CloseConv()
                    # (Line 62) }
                    # (Line 63) }
                EUDEndIf()
                # (Line 64) }
            EUDEndIf()
            # (Line 65) }
        EUDEndIf()
        # (Line 66) }
    EUDEndIf()
    # (Line 68) function OpenConv() {

@EUDFunc
def OpenConv():
    # (Line 69) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 70) user.conv[cp] = 1;
    _ARRW(user.conv, cp) << (1)
    # (Line 71) v.textRefresh[cp] = 1;
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 72) color[cp] = Db("\x05");
    _ARRW(color, cp) << (Db("\x05"))
    # (Line 73) mousePosition[cp] = 0;
    _ARRW(mousePosition, cp) << (0)
    # (Line 74) screen.light[cp] = 25;
    _ARRW(screen.light, cp) << (25)
    # (Line 75) if(user.openedInven[cp] == 1) inven.Close();
    if EUDIf()(user.openedInven[cp] == 1):
        inven.Close()
        # (Line 77) if(IsUserCP()) {
    EUDEndIf()
    if EUDIf()(IsUserCP()):
        # (Line 78) var ran = dwrand() % 6;
        ran = EUDVariable()
        ran << (f_dwrand() % 6)
        # (Line 79) if(ran == 0) text = Db("\x13\x04무슨 일입니까?\n");
        if EUDIf()(ran == 0):
            text << (Db("\x13\x04무슨 일입니까?\n"))
            # (Line 80) else if(ran == 1) text = Db("\x13\x04밖은 위험하니 조심하십시오\n");
        if EUDElseIf()(ran == 1):
            text << (Db("\x13\x04밖은 위험하니 조심하십시오\n"))
            # (Line 81) else if(ran == 2) text = Db("\x13\x04자신을 보호하기 위해선 좋은 장비는 필수입니다\n");
        if EUDElseIf()(ran == 2):
            text << (Db("\x13\x04자신을 보호하기 위해선 좋은 장비는 필수입니다\n"))
            # (Line 82) else if(ran == 3) text = Db("\x13\x04마을의 안전을 위하여경계를 소홀히 하지않습니다\n");
        if EUDElseIf()(ran == 3):
            text << (Db("\x13\x04마을의 안전을 위하여경계를 소홀히 하지않습니다\n"))
            # (Line 83) else if(ran == 4) text = Db("\x13\x04이 마을에 별일이 없었으면 좋겠군요\n");
        if EUDElseIf()(ran == 4):
            text << (Db("\x13\x04이 마을에 별일이 없었으면 좋겠군요\n"))
            # (Line 84) else if(ran == 5) text = Db("\x13\x04전 평화로운 이 마을이 좋습니다\n");
        if EUDElseIf()(ran == 5):
            text << (Db("\x13\x04전 평화로운 이 마을이 좋습니다\n"))
            # (Line 85) }
        EUDEndIf()
        # (Line 86) }
    EUDEndIf()
    # (Line 88) function CloseConv() {

@EUDFunc
def CloseConv():
    # (Line 89) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 90) user.conv[cp] = 0;
    _ARRW(user.conv, cp) << (0)
    # (Line 91) sys.TextClear();
    sys.TextClear()
    # (Line 92) screen.light[cp] = 31;
    _ARRW(screen.light, cp) << (31)
    # (Line 93) }
