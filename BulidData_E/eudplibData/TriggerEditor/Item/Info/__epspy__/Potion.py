## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) object Potion { var type; var index; var name; var value; var price; var explain; };
class Potion(EUDStruct):
    # (Line 2) const potionList = EUDArray(30);
    _fields_ = [
        'type',
        'index',
        'name',
        'value',
        'price',
        'explain',
    ]

potionList = _CGFW(lambda: [EUDArray(30)], 1)[0]
# (Line 4) function SetItemInfo() {
@EUDFunc
def SetItemInfo():
    # (Line 5) for(var i = 0; i < 30; i++) potionList[i] = Potion.alloc();
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 30, neg=True):
        def _t2():
            i.__iadd__(1)
        _ARRW(potionList, i) << (Potion.alloc())
        # (Line 6) const ptnHP1 = Potion.cast(potionList[0]);
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    ptnHP1 = Potion.cast(potionList[0])
    # (Line 7) ptnHP1.type = 1;
    _ATTW(ptnHP1, 'type') << (1)
    # (Line 8) ptnHP1.index = 1;
    _ATTW(ptnHP1, 'index') << (1)
    # (Line 9) ptnHP1.name = Db("\x08[HP] \x04소형 생명력 물약 D");
    _ATTW(ptnHP1, 'name') << (Db("\x08[HP] \x04소형 생명력 물약 D"))
    # (Line 10) ptnHP1.value = 100;
    _ATTW(ptnHP1, 'value') << (100)
    # (Line 11) ptnHP1.price = 50;
    _ATTW(ptnHP1, 'price') << (50)
    # (Line 12) ptnHP1.explain = Db("사용 시 체력을 100 회복합니다");
    _ATTW(ptnHP1, 'explain') << (Db("사용 시 체력을 100 회복합니다"))
    # (Line 13) const ptnHP2 = Potion.cast(potionList[1]);
    ptnHP2 = Potion.cast(potionList[1])
    # (Line 14) ptnHP2.type = 1;
    _ATTW(ptnHP2, 'type') << (1)
    # (Line 15) ptnHP2.index = 2;
    _ATTW(ptnHP2, 'index') << (2)
    # (Line 16) ptnHP2.name = Db("\x08[HP] \x04소형 생명력 물약 C");
    _ATTW(ptnHP2, 'name') << (Db("\x08[HP] \x04소형 생명력 물약 C"))
    # (Line 17) ptnHP2.value = 200;
    _ATTW(ptnHP2, 'value') << (200)
    # (Line 18) ptnHP2.price = 50;
    _ATTW(ptnHP2, 'price') << (50)
    # (Line 19) ptnHP2.explain = Db("사용 시 체력을 200 회복합니다");
    _ATTW(ptnHP2, 'explain') << (Db("사용 시 체력을 200 회복합니다"))
    # (Line 20) const ptnHP3 = Potion.cast(potionList[2]);
    ptnHP3 = Potion.cast(potionList[2])
    # (Line 21) ptnHP3.type = 1;
    _ATTW(ptnHP3, 'type') << (1)
    # (Line 22) ptnHP3.index = 3;
    _ATTW(ptnHP3, 'index') << (3)
    # (Line 23) ptnHP3.name = Db("\x08[HP] \x04소형 생명력 물약 B");
    _ATTW(ptnHP3, 'name') << (Db("\x08[HP] \x04소형 생명력 물약 B"))
    # (Line 24) ptnHP3.value = 300;
    _ATTW(ptnHP3, 'value') << (300)
    # (Line 25) ptnHP3.price = 50;
    _ATTW(ptnHP3, 'price') << (50)
    # (Line 26) ptnHP3.explain = Db("사용 시 체력을 300 회복합니다");
    _ATTW(ptnHP3, 'explain') << (Db("사용 시 체력을 300 회복합니다"))
    # (Line 27) const ptnHP4 = Potion.cast(potionList[3]);
    ptnHP4 = Potion.cast(potionList[3])
    # (Line 28) ptnHP4.type = 1;
    _ATTW(ptnHP4, 'type') << (1)
    # (Line 29) ptnHP4.index = 4;
    _ATTW(ptnHP4, 'index') << (4)
    # (Line 30) ptnHP4.name = Db("\x08[HP] \x04소형 생명력 물약 A");
    _ATTW(ptnHP4, 'name') << (Db("\x08[HP] \x04소형 생명력 물약 A"))
    # (Line 31) ptnHP4.value = 400;
    _ATTW(ptnHP4, 'value') << (400)
    # (Line 32) ptnHP4.price = 50;
    _ATTW(ptnHP4, 'price') << (50)
    # (Line 33) ptnHP4.explain = Db("사용 시 체력을 400 회복합니다");
    _ATTW(ptnHP4, 'explain') << (Db("사용 시 체력을 400 회복합니다"))
    # (Line 34) const ptnHP5 = Potion.cast(potionList[4]);
    ptnHP5 = Potion.cast(potionList[4])
    # (Line 35) ptnHP5.type = 1;
    _ATTW(ptnHP5, 'type') << (1)
    # (Line 36) ptnHP5.index = 5;
    _ATTW(ptnHP5, 'index') << (5)
    # (Line 37) ptnHP5.name = Db("\x08[HP] \x04소형 생명력 물약 S");
    _ATTW(ptnHP5, 'name') << (Db("\x08[HP] \x04소형 생명력 물약 S"))
    # (Line 38) ptnHP5.value = 500;
    _ATTW(ptnHP5, 'value') << (500)
    # (Line 39) ptnHP5.price = 50;
    _ATTW(ptnHP5, 'price') << (50)
    # (Line 40) ptnHP5.explain = Db("사용 시 체력을 500 회복합니다");
    _ATTW(ptnHP5, 'explain') << (Db("사용 시 체력을 500 회복합니다"))
    # (Line 42) const ptnMP1 = Potion.cast(potionList[15]);
    ptnMP1 = Potion.cast(potionList[15])
    # (Line 43) ptnMP1.type = 1;
    _ATTW(ptnMP1, 'type') << (1)
    # (Line 44) ptnMP1.index = 16;
    _ATTW(ptnMP1, 'index') << (16)
    # (Line 45) ptnMP1.name = Db("\x0e[MP] \x04소형 마나 물약 D");
    _ATTW(ptnMP1, 'name') << (Db("\x0e[MP] \x04소형 마나 물약 D"))
    # (Line 46) ptnMP1.value = 100;
    _ATTW(ptnMP1, 'value') << (100)
    # (Line 47) ptnMP1.price = 50;
    _ATTW(ptnMP1, 'price') << (50)
    # (Line 48) ptnMP1.explain = Db("사용 시 마나를 100 회복합니다");
    _ATTW(ptnMP1, 'explain') << (Db("사용 시 마나를 100 회복합니다"))
    # (Line 49) const ptnMP2 = Potion.cast(potionList[16]);
    ptnMP2 = Potion.cast(potionList[16])
    # (Line 50) ptnMP2.type = 1;
    _ATTW(ptnMP2, 'type') << (1)
    # (Line 51) ptnMP2.index = 17;
    _ATTW(ptnMP2, 'index') << (17)
    # (Line 52) ptnMP2.name = Db("\x0e[MP] \x04소형 마나 물약 C");
    _ATTW(ptnMP2, 'name') << (Db("\x0e[MP] \x04소형 마나 물약 C"))
    # (Line 53) ptnMP2.value = 200;
    _ATTW(ptnMP2, 'value') << (200)
    # (Line 54) ptnMP2.price = 50;
    _ATTW(ptnMP2, 'price') << (50)
    # (Line 55) ptnMP2.explain = Db("사용 시 마나를 200 회복합니다");
    _ATTW(ptnMP2, 'explain') << (Db("사용 시 마나를 200 회복합니다"))
    # (Line 56) const ptnMP3 = Potion.cast(potionList[17]);
    ptnMP3 = Potion.cast(potionList[17])
    # (Line 57) ptnMP3.type = 1;
    _ATTW(ptnMP3, 'type') << (1)
    # (Line 58) ptnMP3.index = 18;
    _ATTW(ptnMP3, 'index') << (18)
    # (Line 59) ptnMP3.name = Db("\x0e[MP] \x04소형 마나 물약 B");
    _ATTW(ptnMP3, 'name') << (Db("\x0e[MP] \x04소형 마나 물약 B"))
    # (Line 60) ptnMP3.value = 100;
    _ATTW(ptnMP3, 'value') << (100)
    # (Line 61) ptnMP3.price = 50;
    _ATTW(ptnMP3, 'price') << (50)
    # (Line 62) ptnMP3.explain = Db("사용 시 마나를 300 회복합니다");
    _ATTW(ptnMP3, 'explain') << (Db("사용 시 마나를 300 회복합니다"))
    # (Line 63) const ptnMP4 = Potion.cast(potionList[18]);
    ptnMP4 = Potion.cast(potionList[18])
    # (Line 64) ptnMP4.type = 1;
    _ATTW(ptnMP4, 'type') << (1)
    # (Line 65) ptnMP4.index = 19;
    _ATTW(ptnMP4, 'index') << (19)
    # (Line 66) ptnMP4.name = Db("\x0e[MP] \x04소형 마나 물약 A");
    _ATTW(ptnMP4, 'name') << (Db("\x0e[MP] \x04소형 마나 물약 A"))
    # (Line 67) ptnMP4.value = 100;
    _ATTW(ptnMP4, 'value') << (100)
    # (Line 68) ptnMP4.price = 50;
    _ATTW(ptnMP4, 'price') << (50)
    # (Line 69) ptnMP4.explain = Db("사용 시 마나를 400 회복합니다");
    _ATTW(ptnMP4, 'explain') << (Db("사용 시 마나를 400 회복합니다"))
    # (Line 70) const ptnMP5 = Potion.cast(potionList[19]);
    ptnMP5 = Potion.cast(potionList[19])
    # (Line 71) ptnMP5.type = 1;
    _ATTW(ptnMP5, 'type') << (1)
    # (Line 72) ptnMP5.index = 20;
    _ATTW(ptnMP5, 'index') << (20)
    # (Line 73) ptnMP5.name = Db("\x0e[MP] \x04소형 마나 물약 S");
    _ATTW(ptnMP5, 'name') << (Db("\x0e[MP] \x04소형 마나 물약 S"))
    # (Line 74) ptnMP5.value = 100;
    _ATTW(ptnMP5, 'value') << (100)
    # (Line 75) ptnMP5.price = 50;
    _ATTW(ptnMP5, 'price') << (50)
    # (Line 76) ptnMP5.explain = Db("사용 시 마나를 500 회복합니다");
    _ATTW(ptnMP5, 'explain') << (Db("사용 시 마나를 500 회복합니다"))
    # (Line 77) }
