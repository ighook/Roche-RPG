## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System as sys;
import System as sys
# (Line 2) import User.Info as user;
from User import Info as user
# (Line 3) import User.StatusBar as status;
from User import StatusBar as status
# (Line 4) import Variable as v;
import Variable as v
# (Line 5) import User.Stats as stats;
from User import Stats as stats
# (Line 6) import Item.Manager as item;
from Item import Manager as item
# (Line 9) function NewCharacter() {
@EUDFunc
def NewCharacter():
    # (Line 10) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 11) setloc("temp", 322, 280);
    f_setloc("temp", 322, 280)
    # (Line 12) bwrite(0x65FD00 + 18424 + v.playerUnit[cp], 71); // 그래픽 시민으로 변경
    f_bwrite(0x65FD00 + 18424 + v.playerUnit[cp], 71)
    # (Line 13) bwrite(0x65FD00 + 14776 + cp, 130); // 무기 NONE
    f_bwrite(0x65FD00 + 14776 + cp, 130)
    # (Line 14) if(v.singlePlay == false) CenterView("temp");
    if EUDIf()(v.singlePlay == False):
        # (Line 15) user.character[cp] = sys.SetNextUnitEPD();
        DoActions(CenterView("temp"))
    EUDEndIf()
    _ARRW(user.character, cp) << (sys.SetNextUnitEPD())
    # (Line 16) CreateUnit(1, v.playerUnit[cp], "temp", cp);
    # (Line 18) user.position[cp] = 1;
    DoActions(CreateUnit(1, v.playerUnit[cp], "temp", cp))
    _ARRW(user.position, cp) << (1)
    # (Line 19) user.alive[cp] = 1;
    _ARRW(user.alive, cp) << (1)
    # (Line 20) user.level[cp] = 1;
    _ARRW(user.level, cp) << (1)
    # (Line 27) sys.Heal();
    sys.Heal()
    # (Line 28) stats.RefreshExp();
    stats.RefreshExp()
    # (Line 29) SetMemoryXEPD(user.character[cp] + 0x08F / 4, SetTo, user.level[cp] * 16777216, 0xFF000000);
    # (Line 31) item.AddItem(10000, 2, 1, 1, false);
    DoActions(SetMemoryXEPD(user.character[cp] + 0x08F // 4, SetTo, user.level[cp] * 16777216, 0xFF000000))
    item.AddItem(10000, 2, 1, 1, False)
    # (Line 32) item.AddItem(10000, 3, 1, 1, false);
    item.AddItem(10000, 3, 1, 1, False)
    # (Line 40) }
    # (Line 42) function LoadCharacter() {

@EUDFunc
def LoadCharacter():
    # (Line 43) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 44) }
