## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System as sys;
import System as sys
# (Line 2) import Variable as v;
import Variable as v
# (Line 3) import User.Info as user;
from User import Info as user
# (Line 5) import Screen as screen;
import Screen as screen
# (Line 6) import Item.Manager as item;
from Item import Manager as item
# (Line 9) object Inven { var type; var index; var lv; var name; var amount; var explain; var value1; var value2; };
class Inven(EUDStruct):
    # (Line 11) const inven = EUDArray(24 * 8);
    _fields_ = [
        'type',
        'index',
        'lv',
        'name',
        'amount',
        'explain',
        'value1',
        'value2',
    ]

inven = _CGFW(lambda: [EUDArray(24 * 8)], 1)[0]
# (Line 12) const page = PVariable();
page = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const curPage = PVariable();
curPage = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const color = EUDArray(6);
color = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 15) const mousePosition = PVariable();
mousePosition = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const type = PVariable();
type = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const showType = PVariable();
showType = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const showIndex = PVariable();
showIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const showLevel = PVariable();
showLevel = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const showName = PVariable();
showName = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const showAmount = PVariable();
showAmount = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const showThrowAmount = PVariable();
showThrowAmount = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 24) const showValue1 = PVariable();
showValue1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const showValue2 = PVariable();
showValue2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) function Open();
# (Line 28) function Close();
# (Line 29) function Back();
# (Line 30) function PageCheck();
# (Line 31) function SelectSlot(slot);
# (Line 32) function Sort();
# (Line 33) function ChangeSelectColorMain();
# (Line 34) function ChangeSelectColorPotion();
# (Line 35) function ChangeSelectColorEquip();
# (Line 36) function ClickMinus1();
# (Line 37) function ClickMinus10();
# (Line 38) function ClickPlus1();
# (Line 39) function ClickPlus10();
# (Line 40) function RegisterPotion();
# (Line 42) function Inventory() {
@EUDFunc
def Inventory():
    # (Line 43) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 44) const t = 24 * cp;
    t = 24 * cp
    # (Line 46) if(v.KeyI[cp] == 1) {
    if EUDIf()(v.KeyI[cp] == 1):
        # (Line 47) if(user.openedInven[cp] == 0) {
        if EUDIf()(user.openedInven[cp] == 0):
            # (Line 48) if(user.conv[cp] == 0) Open();
            if EUDIf()(user.conv[cp] == 0):
                Open()
                # (Line 49) }
            EUDEndIf()
            # (Line 50) else Close();
        if EUDElse()():
            Close()
            # (Line 51) }
        EUDEndIf()
        # (Line 53) if(user.openedInven[cp] == 1) {
    EUDEndIf()
    if EUDIf()(user.openedInven[cp] == 1):
        # (Line 54) if(type[cp] == 0) {
        if EUDIf()(type[cp] == 0):
            # (Line 55) if(v.textRefresh[cp] == 1) {
            if EUDIf()(v.textRefresh[cp] == 1):
                # (Line 56) v.textRefresh[cp] = 0;
                _ARRW(v.textRefresh, cp) << (0)
                # (Line 57) const inven1 = Inven.cast(inven[t + page[cp] + 0]);
                inven1 = Inven.cast(inven[t + page[cp] + 0])
                # (Line 58) const inven2 = Inven.cast(inven[t + page[cp] + 1]);
                inven2 = Inven.cast(inven[t + page[cp] + 1])
                # (Line 59) const inven3 = Inven.cast(inven[t + page[cp] + 2]);
                inven3 = Inven.cast(inven[t + page[cp] + 2])
                # (Line 60) const inven4 = Inven.cast(inven[t + page[cp] + 3]);
                inven4 = Inven.cast(inven[t + page[cp] + 3])
                # (Line 61) const inven5 = Inven.cast(inven[t + page[cp] + 4]);
                inven5 = Inven.cast(inven[t + page[cp] + 4])
                # (Line 62) const inven6 = Inven.cast(inven[t + page[cp] + 5]);
                inven6 = Inven.cast(inven[t + page[cp] + 5])
                # (Line 64) v.d.insert(0);
                v.d.insert(0)
                # (Line 65) v.d.append("\x1c   [ 인벤토리 ]\n");
                v.d.append("\x1c   [ 인벤토리 ]\n")
                # (Line 66) v.d.append("\x1e────────────────────\n");
                v.d.append("\x1e────────────────────\n")
                # (Line 67) v.d.append("   ", ptr2s(color[0]), "\x07■ ", ptr2s(color[0]), ptr2s(inven1.name), "  \x19[", inven1.amount, " 개]\n");
                v.d.append("   ", ptr2s(color[0]), "\x07■ ", ptr2s(color[0]), ptr2s(inven1.name), "  \x19[", inven1.amount, " 개]\n")
                # (Line 68) v.d.append("   ", ptr2s(color[1]), "\x07■ ", ptr2s(color[1]), ptr2s(inven2.name), "  \x19[", inven2.amount, " 개]\n");
                v.d.append("   ", ptr2s(color[1]), "\x07■ ", ptr2s(color[1]), ptr2s(inven2.name), "  \x19[", inven2.amount, " 개]\n")
                # (Line 69) v.d.append("   ", ptr2s(color[2]), "\x07■ ", ptr2s(color[2]), ptr2s(inven3.name), "  \x19[", inven3.amount, " 개]\n");
                v.d.append("   ", ptr2s(color[2]), "\x07■ ", ptr2s(color[2]), ptr2s(inven3.name), "  \x19[", inven3.amount, " 개]\n")
                # (Line 70) v.d.append("   ", ptr2s(color[3]), "\x07■ ", ptr2s(color[3]), ptr2s(inven4.name), "  \x19[", inven4.amount, " 개]\n");
                v.d.append("   ", ptr2s(color[3]), "\x07■ ", ptr2s(color[3]), ptr2s(inven4.name), "  \x19[", inven4.amount, " 개]\n")
                # (Line 71) v.d.append("   ", ptr2s(color[4]), "\x07■ ", ptr2s(color[4]), ptr2s(inven5.name), "  \x19[", inven5.amount, " 개]\n");
                v.d.append("   ", ptr2s(color[4]), "\x07■ ", ptr2s(color[4]), ptr2s(inven5.name), "  \x19[", inven5.amount, " 개]\n")
                # (Line 72) v.d.append("   ", ptr2s(color[5]), "\x07■ ", ptr2s(color[5]), ptr2s(inven6.name), "  \x19[", inven6.amount, " 개]\n");
                v.d.append("   ", ptr2s(color[5]), "\x07■ ", ptr2s(color[5]), ptr2s(inven6.name), "  \x19[", inven6.amount, " 개]\n")
                # (Line 73) if(curPage[cp] == 1) v.d.append("   \x1f[1]  \x1e[2]  \x1e[3]  \x1e[4]  \x07[잠금]");
                if EUDIf()(curPage[cp] == 1):
                    v.d.append("   \x1f[1]  \x1e[2]  \x1e[3]  \x1e[4]  \x07[잠금]")
                    # (Line 74) else if(curPage[cp] == 2) v.d.append("   \x0e[1]  \x1f[2]  \x1e[3]  \x1e[4]  \x07[잠금]");
                if EUDElseIf()(curPage[cp] == 2):
                    v.d.append("   \x0e[1]  \x1f[2]  \x1e[3]  \x1e[4]  \x07[잠금]")
                    # (Line 75) else if(curPage[cp] == 3) v.d.append("   \x1e[1]  \x1e[2]  \x1f[3]  \x1e[4]  \x07[잠금]");
                if EUDElseIf()(curPage[cp] == 3):
                    v.d.append("   \x1e[1]  \x1e[2]  \x1f[3]  \x1e[4]  \x07[잠금]")
                    # (Line 76) else if(curPage[cp] == 4) v.d.append("   \x1e[1]  \x1e[2]  \x1e[3]  \x1f[4]  \x07[잠금]");
                if EUDElseIf()(curPage[cp] == 4):
                    v.d.append("   \x1e[1]  \x1e[2]  \x1e[3]  \x1f[4]  \x07[잠금]")
                    # (Line 77) }
                EUDEndIf()
                # (Line 78) v.d.DisplayAt(0);
            EUDEndIf()
            v.d.DisplayAt(0)
            # (Line 79) ChangeSelectColorMain();
            ChangeSelectColorMain()
            # (Line 80) if(v.mouseClick[cp] == 1) {
            if EUDIf()(v.mouseClick[cp] == 1):
                # (Line 81) if(v.mouseX[cp] < 20 || v.mouseX[cp] > 242) return;
                if EUDIf()(EUDSCOr()(v.mouseX[cp] >= 20, neg=True)(v.mouseX[cp] <= 242, neg=True)()):
                    EUDReturn()
                    # (Line 82) if(v.mouseY[cp] < 144 || v.mouseY[cp] > 236) return;
                EUDEndIf()
                if EUDIf()(EUDSCOr()(v.mouseY[cp] >= 144, neg=True)(v.mouseY[cp] <= 236, neg=True)()):
                    EUDReturn()
                    # (Line 83) for(var i = 0; i < 5; i++) {
                EUDEndIf()
                i = EUDVariable()
                i << (0)
                if EUDWhile()(i >= 5, neg=True):
                    def _t15():
                        i.__iadd__(1)
                    # (Line 84) if(sys.clickedLine(i + 2)) {
                    if EUDIf()(sys.f_clickedLine(i + 2)):
                        # (Line 85) SelectSlot(i + 1);
                        SelectSlot(i + 1)
                        # (Line 86) break;
                        EUDBreak()
                        # (Line 87) }
                        # (Line 88) }
                    EUDEndIf()
                    # (Line 89) }
                    EUDSetContinuePoint()
                    _t15()
                EUDEndWhile()
                # (Line 90) }
            EUDEndIf()
            # (Line 91) else if(type[cp] == 1) {
        if EUDElseIf()(type[cp] == 1):
            # (Line 92) if(v.textRefresh[cp] == 1) {
            if EUDIf()(v.textRefresh[cp] == 1):
                # (Line 93) v.textRefresh[cp] = 0;
                _ARRW(v.textRefresh, cp) << (0)
                # (Line 94) v.d.insert(0);
                v.d.insert(0)
                # (Line 95) v.d.append("\x1c   [ 인벤토리 ]\n");
                v.d.append("\x1c   [ 인벤토리 ]\n")
                # (Line 96) v.d.append("\x1e────────────────────\n");
                v.d.append("\x1e────────────────────\n")
                # (Line 97) v.d.append("  \x1E이름 \x04: ", ptr2s(showName[cp]), "\n");
                v.d.append("  \x1E이름 \x04: ", ptr2s(showName[cp]), "\n")
                # (Line 98) v.d.append("  \x1E보유 \x04: ", showAmount[cp], "   \x1E회복량 \x04: ", showValue1[cp],"\n");
                v.d.append("  \x1E보유 \x04: ", showAmount[cp], "   \x1E회복량 \x04: ", showValue1[cp], "\n")
                # (Line 99) v.d.append("  \x1E버릴 개수 \x04: \x04", showThrowAmount[cp], "\n");
                v.d.append("  \x1E버릴 개수 \x04: \x04", showThrowAmount[cp], "\n")
                # (Line 100) v.d.append("  \x15▼\x04-1   \x15▼\x04-10   \x15▲\x04+1   \x15▲\x04+10\n");
                v.d.append("  \x15▼\x04-1   \x15▼\x04-10   \x15▲\x04+1   \x15▲\x04+10\n")
                # (Line 101) v.d.append("  ", ptr2s(color[0]), "단축키 등록\n");
                v.d.append("  ", ptr2s(color[0]), "단축키 등록\n")
                # (Line 102) v.d.append("  ", ptr2s(color[1]), "버리기\n");
                v.d.append("  ", ptr2s(color[1]), "버리기\n")
                # (Line 103) v.d.append("  ", ptr2s(color[2]), "뒤로 가기");
                v.d.append("  ", ptr2s(color[2]), "뒤로 가기")
                # (Line 104) }
                # (Line 105) v.d.DisplayAt(0);
            EUDEndIf()
            v.d.DisplayAt(0)
            # (Line 106) ChangeSelectColorPotion();
            ChangeSelectColorPotion()
            # (Line 107) if(v.mouseClick[cp] == 1) {
            if EUDIf()(v.mouseClick[cp] == 1):
                # (Line 108) if(v.mouseY[cp] < 190 || v.mouseY[cp] > 254) return;
                if EUDIf()(EUDSCOr()(v.mouseY[cp] >= 190, neg=True)(v.mouseY[cp] <= 254, neg=True)()):
                    EUDReturn()
                    # (Line 109) if(v.mouseX[cp] < 35) return;
                EUDEndIf()
                if EUDIf()(v.mouseX[cp] >= 35, neg=True):
                    EUDReturn()
                    # (Line 110) if(sys.clickedLine(5)) {
                EUDEndIf()
                if EUDIf()(sys.f_clickedLine(5)):
                    # (Line 111) if(v.mouseX[cp] > 187) return;
                    if EUDIf()(v.mouseX[cp] <= 187, neg=True):
                        EUDReturn()
                        # (Line 112) if(v.mouseX[cp] <= 43) ClickMinus1();
                    EUDEndIf()
                    if EUDIf()(v.mouseX[cp] <= 43):
                        ClickMinus1()
                        # (Line 113) else if(v.mouseX[cp] >= 53 && v.mouseX[cp] <= 87) ClickMinus10();
                    if EUDElseIf()(EUDSCAnd()(v.mouseX[cp] >= 53)(v.mouseX[cp] <= 87)()):
                        ClickMinus10()
                        # (Line 114) else if(v.mouseX[cp] >= 96 && v.mouseX[cp] <= 123) ClickPlus1();
                    if EUDElseIf()(EUDSCAnd()(v.mouseX[cp] >= 96)(v.mouseX[cp] <= 123)()):
                        ClickPlus1()
                        # (Line 115) else if(v.mouseX[cp] >= 134 && v.mouseX[cp] <= 170) ClickPlus10();
                    if EUDElseIf()(EUDSCAnd()(v.mouseX[cp] >= 134)(v.mouseX[cp] <= 170)()):
                        ClickPlus10()
                        # (Line 116) }
                    EUDEndIf()
                    # (Line 117) else if(sys.clickedLine(6)) RegisterPotion();
                if EUDElseIf()(sys.f_clickedLine(6)):
                    RegisterPotion()
                    # (Line 118) else if(sys.clickedLine(7)) {
                if EUDElseIf()(sys.f_clickedLine(7)):
                    # (Line 119) if(v.mouseX[cp] <= 91) {
                    if EUDIf()(v.mouseX[cp] <= 91):
                        # (Line 120) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 121) if(showAmount[cp] >= showThrowAmount[cp]) {
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        if EUDIf()(showAmount[cp] >= showThrowAmount[cp]):
                            # (Line 122) item.RemoveItem(showType[cp], showIndex[cp], showThrowAmount[cp]);
                            item.RemoveItem(showType[cp], showIndex[cp], showThrowAmount[cp])
                            # (Line 123) showAmount[cp] -= showThrowAmount[cp];
                            _ARRW(showAmount, cp).__isub__(showThrowAmount[cp])
                            # (Line 124) if(showThrowAmount[cp] > showAmount[cp]) showThrowAmount[cp] = showAmount[cp];
                            if EUDIf()(showThrowAmount[cp] <= showAmount[cp], neg=True):
                                _ARRW(showThrowAmount, cp) << (showAmount[cp])
                                # (Line 125) if(showIndex[cp] <= 15 && showIndex[cp] == user.useHPPtn[cp]) user.remainHPPtn[cp] = showAmount[cp];
                            EUDEndIf()
                            if EUDIf()(EUDSCAnd()(showIndex[cp] <= 15)(showIndex[cp] == user.useHPPtn[cp])()):
                                _ARRW(user.remainHPPtn, cp) << (showAmount[cp])
                                # (Line 126) else if(showIndex[cp] == user.useMPPtn[cp]) user.remainMPPtn[cp] = showAmount[cp];
                            if EUDElseIf()(showIndex[cp] == user.useMPPtn[cp]):
                                _ARRW(user.remainMPPtn, cp) << (showAmount[cp])
                                # (Line 127) if(showAmount[cp] == 0) Back();
                            EUDEndIf()
                            if EUDIf()(showAmount[cp] == 0):
                                Back()
                                # (Line 128) v.textRefresh[cp] = 1;
                            EUDEndIf()
                            _ARRW(v.textRefresh, cp) << (1)
                            # (Line 129) }
                            # (Line 130) }
                        EUDEndIf()
                        # (Line 131) }
                    EUDEndIf()
                    # (Line 132) else if(sys.clickedLine(8)) {
                if EUDElseIf()(sys.f_clickedLine(8)):
                    # (Line 133) if(v.mouseX[cp] <= 105) {
                    if EUDIf()(v.mouseX[cp] <= 105):
                        # (Line 134) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 135) Back();
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        Back()
                        # (Line 136) }
                        # (Line 137) }
                    EUDEndIf()
                    # (Line 138) }
                EUDEndIf()
                # (Line 139) }
            EUDEndIf()
            # (Line 140) else if(type[cp] == 2 || type[cp] == 3) {
        if EUDElseIf()(EUDSCOr()(type[cp] == 2)(type[cp] == 3)()):
            # (Line 141) if(v.textRefresh[cp] == 1) {
            if EUDIf()(v.textRefresh[cp] == 1):
                # (Line 142) v.textRefresh[cp] = 0;
                _ARRW(v.textRefresh, cp) << (0)
                # (Line 143) v.d.insert(0);
                v.d.insert(0)
                # (Line 144) v.d.append("\x1c   [ 인벤토리 ]\n");
                v.d.append("\x1c   [ 인벤토리 ]\n")
                # (Line 145) v.d.append("\x1e────────────────────\n");
                v.d.append("\x1e────────────────────\n")
                # (Line 146) v.d.append("  \x1E이름 \x04: ", ptr2s(showName[cp]), "\n");
                v.d.append("  \x1E이름 \x04: ", ptr2s(showName[cp]), "\n")
                # (Line 147) v.d.append("  \x1E보유 \x04: ", showAmount[cp], "\n");
                v.d.append("  \x1E보유 \x04: ", showAmount[cp], "\n")
                # (Line 148) v.d.append("  \x1E레벨 제한 \x04: \x04", showLevel[cp], "\n");
                v.d.append("  \x1E레벨 제한 \x04: \x04", showLevel[cp], "\n")
                # (Line 149) if(showType[cp] == 2) v.d.append("  \x15공격력 \x04: ", showValue1[cp], "\n");
                if EUDIf()(showType[cp] == 2):
                    v.d.append("  \x15공격력 \x04: ", showValue1[cp], "\n")
                    # (Line 150) else if(showType[cp] == 3) v.d.append("  \x15방어력 \x04: ", showValue1[cp], "\n");
                if EUDElseIf()(showType[cp] == 3):
                    v.d.append("  \x15방어력 \x04: ", showValue1[cp], "\n")
                    # (Line 151) v.d.append("  ", ptr2s(color[0]), "장착하기\n");
                EUDEndIf()
                v.d.append("  ", ptr2s(color[0]), "장착하기\n")
                # (Line 152) v.d.append("  ", ptr2s(color[1]), "버리기\n");
                v.d.append("  ", ptr2s(color[1]), "버리기\n")
                # (Line 153) v.d.append("  ", ptr2s(color[2]), "뒤로 가기");
                v.d.append("  ", ptr2s(color[2]), "뒤로 가기")
                # (Line 154) }
                # (Line 155) v.d.DisplayAt(0);
            EUDEndIf()
            v.d.DisplayAt(0)
            # (Line 156) ChangeSelectColorEquip();
            ChangeSelectColorEquip()
            # (Line 157) if(v.mouseClick[cp] == 1) {
            if EUDIf()(v.mouseClick[cp] == 1):
                # (Line 159) if(v.mouseY[cp] < 174 || v.mouseY[cp] > 238) return;
                if EUDIf()(EUDSCOr()(v.mouseY[cp] >= 174, neg=True)(v.mouseY[cp] <= 238, neg=True)()):
                    EUDReturn()
                    # (Line 160) if(v.mouseX[cp] < 35) return;
                EUDEndIf()
                if EUDIf()(v.mouseX[cp] >= 35, neg=True):
                    EUDReturn()
                    # (Line 161) if(sys.clickedLine(5)) {
                EUDEndIf()
                if EUDIf()(sys.f_clickedLine(5)):
                    # (Line 162) if(v.mouseX[cp] <= 116) {
                    if EUDIf()(v.mouseX[cp] <= 116):
                        # (Line 163) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 166) Back();
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        Back()
                        # (Line 167) }
                        # (Line 168) }
                    EUDEndIf()
                    # (Line 169) else if(sys.clickedLine(6)) {
                if EUDElseIf()(sys.f_clickedLine(6)):
                    # (Line 170) if(v.mouseX[cp] <= 91) {
                    if EUDIf()(v.mouseX[cp] <= 91):
                        # (Line 171) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 172) item.RemoveItem(showType[cp], showIndex[cp], showThrowAmount[cp]);
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        item.RemoveItem(showType[cp], showIndex[cp], showThrowAmount[cp])
                        # (Line 173) showAmount[cp] -= 1;
                        _ARRW(showAmount, cp).__isub__(1)
                        # (Line 174) if(showAmount[cp] == 0) Back();
                        if EUDIf()(showAmount[cp] == 0):
                            Back()
                            # (Line 175) v.textRefresh[cp] = 1;
                        EUDEndIf()
                        _ARRW(v.textRefresh, cp) << (1)
                        # (Line 176) }
                        # (Line 177) }
                    EUDEndIf()
                    # (Line 178) else if(sys.clickedLine(7)) {
                if EUDElseIf()(sys.f_clickedLine(7)):
                    # (Line 179) if(v.mouseX[cp] <= 105) {
                    if EUDIf()(v.mouseX[cp] <= 105):
                        # (Line 180) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 181) Back();
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        Back()
                        # (Line 182) }
                        # (Line 183) }
                    EUDEndIf()
                    # (Line 184) }
                EUDEndIf()
                # (Line 185) }
            EUDEndIf()
            # (Line 186) }
        EUDEndIf()
        # (Line 187) }
    EUDEndIf()
    # (Line 189) function ResetInven() {

@EUDFunc
def ResetInven():
    # (Line 190) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 191) const t = cp * 24;
    t = cp * 24
    # (Line 192) for(var i = 0; i < 24; i++) {
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 24, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 193) inven[t + i] = Inven.alloc();
        _ARRW(inven, t + i) << (Inven.alloc())
        # (Line 194) const c = Inven.cast(inven[t + i]);
        c = Inven.cast(inven[t + i])
        # (Line 195) c.name = Db("\x05Empty");
        _ATTW(c, 'name') << (Db("\x05Empty"))
        # (Line 196) }
        # (Line 197) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 199) function Open() {

@EUDFunc
def Open():
    # (Line 200) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 201) if(user.conv[cp] == 1) return;
    if EUDIf()(user.conv[cp] == 1):
        EUDReturn()
        # (Line 202) sys.CloseWindow();
    EUDEndIf()
    sys.CloseWindow()
    # (Line 203) if(IsUserCP()) {
    if EUDIf()(IsUserCP()):
        # (Line 204) for(var i = 0; i < 6; i++)
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 6, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 205) color[i] = Db("\x05");
            _ARRW(color, i) << (Db("\x05"))
            # (Line 206) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 208) curPage[cp] = 1;
    EUDEndIf()
    _ARRW(curPage, cp) << (1)
    # (Line 209) PageCheck();
    PageCheck()
    # (Line 210) user.openedInven[cp] = 1;
    _ARRW(user.openedInven, cp) << (1)
    # (Line 211) screen.SetLight(25);
    screen.SetLight(25)
    # (Line 212) v.textRefresh[cp] = 1;
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 213) v.s.print("\x07[Inventory.eps] \x04Open Inventory");
    v.s.print("\x07[Inventory.eps] \x04Open Inventory")
    # (Line 214) }
    # (Line 216) function Close() {

@EUDFunc
def Close():
    # (Line 217) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 218) user.openedInven[cp] = 0;
    _ARRW(user.openedInven, cp) << (0)
    # (Line 219) type[cp] = 0;
    _ARRW(type, cp) << (0)
    # (Line 220) screen.SetLight(31);
    screen.SetLight(31)
    # (Line 221) sys.TextClear();
    sys.TextClear()
    # (Line 222) v.s.print("\x07[Inventory.eps] \x04Close Inventory");
    v.s.print("\x07[Inventory.eps] \x04Close Inventory")
    # (Line 223) }
    # (Line 225) function SelectSlot(slot) {

@EUDFunc
def SelectSlot(slot):
    # (Line 226) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 227) const t = 24 * cp;
    t = 24 * cp
    # (Line 228) const c = Inven.cast(inven[t + page[cp] + slot - 1]);
    c = Inven.cast(inven[t + page[cp] + slot - 1])
    # (Line 229) if(c.type == 0) return;
    if EUDIf()(c.type == 0):
        EUDReturn()
        # (Line 230) sys.TextClear();
    EUDEndIf()
    sys.TextClear()
    # (Line 231) if(c.type == 1) {
    if EUDIf()(c.type == 1):
        # (Line 232) showValue1[cp] = c.value1;
        _ARRW(showValue1, cp) << (c.value1)
        # (Line 233) }
        # (Line 234) else if(c.type == 2) {
    if EUDElseIf()(c.type == 2):
        # (Line 235) showLevel[cp] = c.lv;
        _ARRW(showLevel, cp) << (c.lv)
        # (Line 236) }
        # (Line 237) else if(c.type == 3) {
    if EUDElseIf()(c.type == 3):
        # (Line 238) showValue1[cp] = c.value1;
        _ARRW(showValue1, cp) << (c.value1)
        # (Line 239) showLevel[cp] = c.lv;
        _ARRW(showLevel, cp) << (c.lv)
        # (Line 240) }
        # (Line 241) showType[cp] = c.type;
    EUDEndIf()
    _ARRW(showType, cp) << (c.type)
    # (Line 242) showIndex[cp] = c.index;
    _ARRW(showIndex, cp) << (c.index)
    # (Line 243) showName[cp] = c.name;
    _ARRW(showName, cp) << (c.name)
    # (Line 244) showAmount[cp] = c.amount;
    _ARRW(showAmount, cp) << (c.amount)
    # (Line 245) showThrowAmount[cp] = 1;
    _ARRW(showThrowAmount, cp) << (1)
    # (Line 246) type[cp] = c.type;
    _ARRW(type, cp) << (c.type)
    # (Line 247) v.textRefresh[cp] = 1;
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 248) if(IsUserCP()) {
    if EUDIf()(IsUserCP()):
        # (Line 249) for(var i = 0; i < 6; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 6, neg=True):
            def _t7():
                i.__iadd__(1)
            # (Line 250) color[i] = Db("\x05");
            _ARRW(color, i) << (Db("\x05"))
            # (Line 251) }
            # (Line 252) }
            EUDSetContinuePoint()
            _t7()
        EUDEndWhile()
        # (Line 253) PlayWAV("staredit\\wav\\click2.ogg");
    EUDEndIf()
    # (Line 254) }
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    # (Line 256) function Back() {

@EUDFunc
def Back():
    # (Line 257) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 258) showType[cp] = 0;
    _ARRW(showType, cp) << (0)
    # (Line 259) showIndex[cp] = 0;
    _ARRW(showIndex, cp) << (0)
    # (Line 260) showName[cp] = 0;
    _ARRW(showName, cp) << (0)
    # (Line 261) showAmount[cp] = 0;
    _ARRW(showAmount, cp) << (0)
    # (Line 262) showThrowAmount[cp] = 0;
    _ARRW(showThrowAmount, cp) << (0)
    # (Line 263) type[cp] = 0;
    _ARRW(type, cp) << (0)
    # (Line 264) sys.TextClear();
    sys.TextClear()
    # (Line 265) v.textRefresh[cp] = 0;
    _ARRW(v.textRefresh, cp) << (0)
    # (Line 266) }
    # (Line 268) function PageCheck() {

@EUDFunc
def PageCheck():
    # (Line 269) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 270) if(curPage[cp] == 1) page[cp] = 0;
    if EUDIf()(curPage[cp] == 1):
        _ARRW(page, cp) << (0)
        # (Line 271) else if(curPage[cp] == 2) page[cp] = 6;
    if EUDElseIf()(curPage[cp] == 2):
        _ARRW(page, cp) << (6)
        # (Line 272) else if(curPage[cp] == 3) page[cp] = 12;
    if EUDElseIf()(curPage[cp] == 3):
        _ARRW(page, cp) << (12)
        # (Line 273) else if(curPage[cp] == 4) page[cp] = 18;
    if EUDElseIf()(curPage[cp] == 4):
        _ARRW(page, cp) << (18)
        # (Line 274) mousePosition[cp] = 0;
    EUDEndIf()
    _ARRW(mousePosition, cp) << (0)
    # (Line 275) v.textRefresh[cp] = 1;
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 276) }
    # (Line 278) function Sort() {

@EUDFunc
def Sort():
    # (Line 279) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 280) const t = 24 * cp;
    t = 24 * cp
    # (Line 281) for(var i = 0; i < 23; i++) {
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 23, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 282) const c1 = Inven.cast(inven[t + i]);
        c1 = Inven.cast(inven[t + i])
        # (Line 283) const c2 = Inven.cast(inven[t + i + 1]);
        c2 = Inven.cast(inven[t + i + 1])
        # (Line 284) if(c1.type == 0 && c2.type != 0) {
        if EUDIf()(EUDSCAnd()(c1.type == 0)(c2.type == 0, neg=True)()):
            # (Line 285) c1.type = c2.type;
            _ATTW(c1, 'type') << (c2.type)
            # (Line 286) c1.index = c2.index;
            _ATTW(c1, 'index') << (c2.index)
            # (Line 287) c1.name = c2.name;
            _ATTW(c1, 'name') << (c2.name)
            # (Line 288) c1.amount = c2.amount;
            _ATTW(c1, 'amount') << (c2.amount)
            # (Line 289) c1.explain = c2.explain;
            _ATTW(c1, 'explain') << (c2.explain)
            # (Line 290) c1.value1 = c2.value1;
            _ATTW(c1, 'value1') << (c2.value1)
            # (Line 291) c2.type = 0;
            _ATTW(c2, 'type') << (0)
            # (Line 292) c2.index = 0;
            _ATTW(c2, 'index') << (0)
            # (Line 293) c2.name = Db("\x05Empty");
            _ATTW(c2, 'name') << (Db("\x05Empty"))
            # (Line 294) c2.amount = 0;
            _ATTW(c2, 'amount') << (0)
            # (Line 295) c2.explain = 0;
            _ATTW(c2, 'explain') << (0)
            # (Line 296) c2.value1 = 0;
            _ATTW(c2, 'value1') << (0)
            # (Line 297) }
            # (Line 298) }
        EUDEndIf()
        # (Line 299) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 301) function ChangeSelectColorMain() {

@EUDFunc
def ChangeSelectColorMain():
    # (Line 302) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 303) if(IsUserCP()) {
    if EUDIf()(IsUserCP()):
        # (Line 304) var c = 0;
        c = EUDVariable()
        c << (0)
        # (Line 305) if(v._mouseX[cp] > 20 && v._mouseX[cp] < 242)  {
        if EUDIf()(EUDSCAnd()(v._mouseX[cp] <= 20, neg=True)(v._mouseX[cp] >= 242, neg=True)()):
            # (Line 306) c = 1;
            c << (1)
            # (Line 307) if(v._mouseY[cp] < 144 || v._mouseY[cp] > 222) {
            if EUDIf()(EUDSCOr()(v._mouseY[cp] >= 144, neg=True)(v._mouseY[cp] <= 222, neg=True)()):
                # (Line 308) mousePosition[cp] = 0;
                _ARRW(mousePosition, cp) << (0)
                # (Line 309) }
                # (Line 310) }
            EUDEndIf()
            # (Line 311) else mousePosition[cp] = 0;
        if EUDElse()():
            _ARRW(mousePosition, cp) << (0)
            # (Line 313) for(var i = 0; i < 6; i++) {
        EUDEndIf()
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 6, neg=True):
            def _t5():
                i.__iadd__(1)
            # (Line 314) if(c == 1 && v._mouseY[cp] >= 144 + 16 * i && v._mouseY[cp] <= 160 + 16 * i) {
            if EUDIf()(EUDSCAnd()(c == 1)(v._mouseY[cp] >= 144 + 16 * i)(v._mouseY[cp] <= 160 + 16 * i)()):
                # (Line 315) if(mousePosition[cp] != i + 1) {
                if EUDIf()(mousePosition[cp] == i + 1, neg=True):
                    # (Line 316) color[i] = Db("\x17");
                    _ARRW(color, i) << (Db("\x17"))
                    # (Line 317) mousePosition[cp] = i + 1;
                    _ARRW(mousePosition, cp) << (i + 1)
                    # (Line 318) v.textRefresh[cp] = 1;
                    _ARRW(v.textRefresh, cp) << (1)
                    # (Line 319) }
                    # (Line 320) }
                EUDEndIf()
                # (Line 321) else {
            if EUDElse()():
                # (Line 322) if(strcmp(color[i], Db("\x17")) == 0) {
                if EUDIf()(f_strcmp(color[i], Db("\x17")) == 0):
                    # (Line 323) color[i] = Db("\x05");
                    _ARRW(color, i) << (Db("\x05"))
                    # (Line 324) v.textRefresh[cp] = 1;
                    _ARRW(v.textRefresh, cp) << (1)
                    # (Line 325) }
                    # (Line 326) }
                EUDEndIf()
                # (Line 327) }
            EUDEndIf()
            # (Line 328) }
            EUDSetContinuePoint()
            _t5()
        EUDEndWhile()
        # (Line 329) }
    EUDEndIf()
    # (Line 331) function ChangeSelectColorPotion() {

@EUDFunc
def ChangeSelectColorPotion():
    # (Line 332) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 333) if(IsUserCP()) {
    if EUDIf()(IsUserCP()):
        # (Line 334) var c = 0;
        c = EUDVariable()
        c << (0)
        # (Line 335) if(v._mouseX[cp] > 20 && v._mouseX[cp] < 116)  {
        if EUDIf()(EUDSCAnd()(v._mouseX[cp] <= 20, neg=True)(v._mouseX[cp] >= 116, neg=True)()):
            # (Line 336) c = 1;
            c << (1)
            # (Line 337) if(v._mouseY[cp] < 208 || v._mouseY[cp] > 254) {
            if EUDIf()(EUDSCOr()(v._mouseY[cp] >= 208, neg=True)(v._mouseY[cp] <= 254, neg=True)()):
                # (Line 338) mousePosition[cp] = 0;
                _ARRW(mousePosition, cp) << (0)
                # (Line 339) }
                # (Line 340) }
            EUDEndIf()
            # (Line 341) else mousePosition[cp] = 0;
        if EUDElse()():
            _ARRW(mousePosition, cp) << (0)
            # (Line 343) for(var i = 0; i < 3; i++) {
        EUDEndIf()
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 3, neg=True):
            def _t5():
                i.__iadd__(1)
            # (Line 344) if(c == 1 && v._mouseY[cp] >= 206 + 16 * i && v._mouseY[cp] <= 222 + 16 * i) {
            if EUDIf()(EUDSCAnd()(c == 1)(v._mouseY[cp] >= 206 + 16 * i)(v._mouseY[cp] <= 222 + 16 * i)()):
                # (Line 345) if(mousePosition[cp] != i + 1) {
                if EUDIf()(mousePosition[cp] == i + 1, neg=True):
                    # (Line 346) color[i] = Db("\x17");
                    _ARRW(color, i) << (Db("\x17"))
                    # (Line 347) mousePosition[cp] = i + 1;
                    _ARRW(mousePosition, cp) << (i + 1)
                    # (Line 348) v.textRefresh[cp] = 1;
                    _ARRW(v.textRefresh, cp) << (1)
                    # (Line 349) }
                    # (Line 350) }
                EUDEndIf()
                # (Line 351) else if(strcmp(color[i], Db("\x17")) == 0) {
            if EUDElseIf()(f_strcmp(color[i], Db("\x17")) == 0):
                # (Line 352) color[i] = Db("\x05");
                _ARRW(color, i) << (Db("\x05"))
                # (Line 353) v.textRefresh[cp] = 1;
                _ARRW(v.textRefresh, cp) << (1)
                # (Line 354) }
                # (Line 355) }
            EUDEndIf()
            # (Line 356) }
            EUDSetContinuePoint()
            _t5()
        EUDEndWhile()
        # (Line 357) }
    EUDEndIf()
    # (Line 359) function ChangeSelectColorEquip() {

@EUDFunc
def ChangeSelectColorEquip():
    # (Line 360) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 361) if(IsUserCP()) {
    if EUDIf()(IsUserCP()):
        # (Line 362) var c = 0;
        c = EUDVariable()
        c << (0)
        # (Line 363) if(v._mouseX[cp] > 20 && v._mouseX[cp] < 104)  {
        if EUDIf()(EUDSCAnd()(v._mouseX[cp] <= 20, neg=True)(v._mouseX[cp] >= 104, neg=True)()):
            # (Line 364) c = 1;
            c << (1)
            # (Line 365) if(v._mouseY[cp] < 192 || v._mouseY[cp] > 222) {
            if EUDIf()(EUDSCOr()(v._mouseY[cp] >= 192, neg=True)(v._mouseY[cp] <= 222, neg=True)()):
                # (Line 366) mousePosition[cp] = 0;
                _ARRW(mousePosition, cp) << (0)
                # (Line 367) v.textRefresh[cp] = 1;
                _ARRW(v.textRefresh, cp) << (1)
                # (Line 368) }
                # (Line 369) }
            EUDEndIf()
            # (Line 370) else {
        if EUDElse()():
            # (Line 371) mousePosition[cp] = 0;
            _ARRW(mousePosition, cp) << (0)
            # (Line 372) v.textRefresh[cp] = 1;
            _ARRW(v.textRefresh, cp) << (1)
            # (Line 373) }
            # (Line 375) for(var i = 0; i < 3; i++) {
        EUDEndIf()
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 3, neg=True):
            def _t5():
                i.__iadd__(1)
            # (Line 376) if(c == 1 && v._mouseY[cp] >= 208 + 16 * i && v._mouseY[cp] <= 222 + 16 * i) {
            if EUDIf()(EUDSCAnd()(c == 1)(v._mouseY[cp] >= 208 + 16 * i)(v._mouseY[cp] <= 222 + 16 * i)()):
                # (Line 377) if(mousePosition[cp] != i + 1) {
                if EUDIf()(mousePosition[cp] == i + 1, neg=True):
                    # (Line 378) color[i] = Db("\x17");
                    _ARRW(color, i) << (Db("\x17"))
                    # (Line 379) mousePosition[cp] = i + 1;
                    _ARRW(mousePosition, cp) << (i + 1)
                    # (Line 380) v.textRefresh[cp] = 1;
                    _ARRW(v.textRefresh, cp) << (1)
                    # (Line 381) }
                    # (Line 382) }
                EUDEndIf()
                # (Line 383) else if(strcmp(color[i], Db("\x17")) == 0) {
            if EUDElseIf()(f_strcmp(color[i], Db("\x17")) == 0):
                # (Line 384) color[i] = Db("\x05");
                _ARRW(color, i) << (Db("\x05"))
                # (Line 385) v.textRefresh[cp] = 1;
                _ARRW(v.textRefresh, cp) << (1)
                # (Line 386) }
                # (Line 387) }
            EUDEndIf()
            # (Line 388) }
            EUDSetContinuePoint()
            _t5()
        EUDEndWhile()
        # (Line 389) }
    EUDEndIf()
    # (Line 391) function ClickMinus1() {

@EUDFunc
def ClickMinus1():
    # (Line 392) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 393) PlayWAV("staredit\\wav\\click2.ogg");
    # (Line 394) if(showThrowAmount[cp] > 1) {
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    if EUDIf()(showThrowAmount[cp] <= 1, neg=True):
        # (Line 395) showThrowAmount[cp] -= 1;
        _ARRW(showThrowAmount, cp).__isub__(1)
        # (Line 396) v.textRefresh[cp] = 1;
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 397) }
        # (Line 398) }
    EUDEndIf()
    # (Line 400) function ClickMinus10() {

@EUDFunc
def ClickMinus10():
    # (Line 401) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 402) PlayWAV("staredit\\wav\\click2.ogg");
    # (Line 403) if(showThrowAmount[cp] > 10) {
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    if EUDIf()(showThrowAmount[cp] <= 10, neg=True):
        # (Line 404) showThrowAmount[cp] -= 10;
        _ARRW(showThrowAmount, cp).__isub__(10)
        # (Line 405) v.textRefresh[cp] = 1;
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 406) }
        # (Line 407) else {
    if EUDElse()():
        # (Line 408) showThrowAmount[cp] = 1;
        _ARRW(showThrowAmount, cp) << (1)
        # (Line 409) v.textRefresh[cp] = 1;
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 410) }
        # (Line 411) }
    EUDEndIf()
    # (Line 413) function ClickPlus1() {

@EUDFunc
def ClickPlus1():
    # (Line 414) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 415) PlayWAV("staredit\\wav\\click2.ogg");
    # (Line 416) if(showThrowAmount[cp] < 99 && showThrowAmount[cp] < showAmount[cp]) {
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    if EUDIf()(EUDSCAnd()(showThrowAmount[cp] >= 99, neg=True)(showThrowAmount[cp] >= showAmount[cp], neg=True)()):
        # (Line 417) showThrowAmount[cp] += 1;
        _ARRW(showThrowAmount, cp).__iadd__(1)
        # (Line 418) v.textRefresh[cp] = 1;
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 419) }
        # (Line 420) }
    EUDEndIf()
    # (Line 422) function ClickPlus10() {

@EUDFunc
def ClickPlus10():
    # (Line 423) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 424) PlayWAV("staredit\\wav\\click2.ogg");
    # (Line 425) if(showThrowAmount[cp] < 90 && showAmount[cp] > 10 && showThrowAmount[cp] <= (showAmount[cp] - 10)) {
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    if EUDIf()(EUDSCAnd()(showThrowAmount[cp] >= 90, neg=True)(showAmount[cp] <= 10, neg=True)(showThrowAmount[cp] <= (showAmount[cp] - 10))()):
        # (Line 426) showThrowAmount[cp] += 10;
        _ARRW(showThrowAmount, cp).__iadd__(10)
        # (Line 427) v.textRefresh[cp] = 1;
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 428) }
        # (Line 429) else {
    if EUDElse()():
        # (Line 430) showThrowAmount[cp] = showAmount[cp];
        _ARRW(showThrowAmount, cp) << (showAmount[cp])
        # (Line 431) v.textRefresh[cp] = 1;
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 432) }
        # (Line 433) }
    EUDEndIf()
    # (Line 435) function RegisterPotion() {

@EUDFunc
def RegisterPotion():
    # (Line 436) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 437) if(v.mouseX[cp] <= 115) {
    if EUDIf()(v.mouseX[cp] <= 115):
        # (Line 438) PlayWAV("staredit\\wav\\click2.ogg");
        # (Line 439) if(showIndex[cp] < 15) {
        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
        if EUDIf()(showIndex[cp] >= 15, neg=True):
            # (Line 440) user.useHPPtn[cp] = showIndex[cp];
            _ARRW(user.useHPPtn, cp) << (showIndex[cp])
            # (Line 441) user.recoveryHPPtn[cp] = showValue1[cp];
            _ARRW(user.recoveryHPPtn, cp) << (showValue1[cp])
            # (Line 442) user.remainHPPtn[cp] = showAmount[cp];
            _ARRW(user.remainHPPtn, cp) << (showAmount[cp])
            # (Line 443) v.s.printAt(10, "\x17인덱스 \x04: ", showIndex[cp], "  \x17이름 \x04: ", ptr2s(showName[cp]), "  \x17회복량 \x04: ", showValue1[cp]);
            v.s.printAt(10, "\x17인덱스 \x04: ", showIndex[cp], "  \x17이름 \x04: ", ptr2s(showName[cp]), "  \x17회복량 \x04: ", showValue1[cp])
            # (Line 444) }
            # (Line 445) else {
        if EUDElse()():
            # (Line 446) user.useMPPtn[cp] = showIndex[cp];
            _ARRW(user.useMPPtn, cp) << (showIndex[cp])
            # (Line 447) user.recoveryMPPtn[cp] = showValue1[cp];
            _ARRW(user.recoveryMPPtn, cp) << (showValue1[cp])
            # (Line 448) user.remainMPPtn[cp] = showAmount[cp];
            _ARRW(user.remainMPPtn, cp) << (showAmount[cp])
            # (Line 449) v.s.printAt(10, "\x17인덱스 \x04: ", showIndex[cp], "  \x17이름 \x04: ", ptr2s(showName[cp]), "  \x17회복량 \x04: ", showValue1[cp]);
            v.s.printAt(10, "\x17인덱스 \x04: ", showIndex[cp], "  \x17이름 \x04: ", ptr2s(showName[cp]), "  \x17회복량 \x04: ", showValue1[cp])
            # (Line 450) }
            # (Line 451) }
        EUDEndIf()
        # (Line 452) }
    EUDEndIf()
