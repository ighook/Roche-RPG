## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 2) import Main as m;
import Main as m
# (Line 4) const screen = EUDArray(12);
screen = _CGFW(lambda: [EUDArray(12)], 1)[0]
# (Line 5) const lightTimer = PVariable();
lightTimer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const light = PVariable();
light = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) function ScreenInit() {
@EUDFunc
def ScreenInit():
    # (Line 9) for(var i = 0; i < 48; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 48, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 10) screen[i / 4] = dwread_epd(EPD(0x513B68+i));
        _ARRW(screen, i // 4) << (f_dwread_epd(EPD(0x513B68 + i)))
        # (Line 11) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 13) function ScrollLock() {

@EUDFunc
def ScrollLock():
    # (Line 14) if(IsUserCP()) {
    if EUDIf()(IsUserCP()):
        # (Line 15) for(var i = 0; i < 48; i+=4) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 48, neg=True):
            def _t3():
                i.__iadd__(4)
            # (Line 16) SetMemory(0x513B68 + i, SetTo, 0);
            # (Line 17) }
            DoActions(SetMemory(0x513B68 + i, SetTo, 0))
            # (Line 18) }
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        # (Line 19) }
    EUDEndIf()
    # (Line 21) function ScrollUnLock() {

@EUDFunc
def ScrollUnLock():
    # (Line 22) if(IsUserCP()) {
    if EUDIf()(IsUserCP()):
        # (Line 23) for(var i = 0; i < 48; i+=4) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 48, neg=True):
            def _t3():
                i.__iadd__(4)
            # (Line 24) SetMemory(0x513B68 + i, SetTo, screen[i / 4]);
            # (Line 25) }
            DoActions(SetMemory(0x513B68 + i, SetTo, screen[i // 4]))
            # (Line 26) }
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        # (Line 27) }
    EUDEndIf()
    # (Line 29) function SetLight(light_) {

@EUDFunc
def SetLight(light_):
    # (Line 30) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 31) if(light_ > 31 || light_ < 0) return;
    if EUDIf()(EUDSCOr()(light_ <= 31, neg=True)(light_ >= 0, neg=True)()):
        EUDReturn()
        # (Line 32) light[cp] = light_;
    EUDEndIf()
    _ARRW(light, cp) << (light_)
    # (Line 33) }
    # (Line 35) function LightCheck() {

@EUDFunc
def LightCheck():
    # (Line 36) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 37) if(IsUserCP()) {
    if EUDIf()(IsUserCP()):
        # (Line 38) var currentLight = dwread_epd(EPD(0x657A9C));
        currentLight = EUDVariable()
        currentLight << (f_dwread_epd(EPD(0x657A9C)))
        # (Line 39) if(currentLight == light[cp]) return;
        if EUDIf()(currentLight == light[cp]):
            EUDReturn()
            # (Line 40) if(currentLight > light[cp]) {
        EUDEndIf()
        if EUDIf()(currentLight <= light[cp], neg=True):
            # (Line 41) SetMemoryEPD(EPD(0x657A9C), Subtract, 1);
            # (Line 42) }
            DoActions(SetMemoryEPD(EPD(0x657A9C), Subtract, 1))
            # (Line 43) else {
        if EUDElse()():
            # (Line 44) SetMemoryEPD(EPD(0x657A9C), Add, 1);
            # (Line 45) }
            DoActions(SetMemoryEPD(EPD(0x657A9C), Add, 1))
            # (Line 46) }
        EUDEndIf()
        # (Line 47) }
    EUDEndIf()
    # (Line 49) function WideCheckStart() {

@EUDFunc
def WideCheckStart():
    # (Line 50) v.s.print("\x07[Screen.eps] \x04와이드 체크");
    v.s.print("\x07[Screen.eps] \x04와이드 체크")
    # (Line 51) var x1 = dwread_epd(EPD(0x62848C));
    x1 = EUDVariable()
    x1 << (f_dwread_epd(EPD(0x62848C)))
    # (Line 52) var y1 = dwread_epd(EPD(0x6284A8));
    y1 = EUDVariable()
    y1 << (f_dwread_epd(EPD(0x6284A8)))
    # (Line 53) CenterView("temp");
    # (Line 54) var x2 = dwread_epd(EPD(0x62848C));
    DoActions(CenterView("temp"))
    x2 = EUDVariable()
    x2 << (f_dwread_epd(EPD(0x62848C)))
    # (Line 55) var y2 = dwread_epd(EPD(0x6284A8));
    y2 = EUDVariable()
    y2 << (f_dwread_epd(EPD(0x6284A8)))
    # (Line 56) var c = dwread_epd(EPD(0x58DC4C) + $L("temp") * 5);
    c = EUDVariable()
    c << (f_dwread_epd(EPD(0x58DC4C) + GetLocationIndex("temp") * 5))
    # (Line 57) if(c - x2 <= 320) {
    if EUDIf()(c - x2 <= 320):
        # (Line 58) setloc("temp", x1 + 320, y1 + 191);
        f_setloc("temp", x1 + 320, y1 + 191)
        # (Line 59) SetMemory(0x58DA00, SetTo, 1);
        # (Line 60) }
        DoActions(SetMemory(0x58DA00, SetTo, 1))
        # (Line 61) else {
    if EUDElse()():
        # (Line 62) setloc("temp", x1 + 426, y1 + 191);
        f_setloc("temp", x1 + 426, y1 + 191)
        # (Line 63) SetMemory(0x58DA00, SetTo, 2);
        # (Line 64) }
        DoActions(SetMemory(0x58DA00, SetTo, 2))
        # (Line 65) CenterView("temp");
    EUDEndIf()
    # (Line 66) }
    DoActions(CenterView("temp"))
    # (Line 68) function WideCheckExec() {

@EUDFunc
def WideCheckExec():
    # (Line 69) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 70) if(v.screen[cp] > 0) {
    if EUDIf()(v.screen[cp] <= 0, neg=True):
        # (Line 72) if(v.screen[cp] == 1) {
        if EUDIf()(v.screen[cp] == 1):
            # (Line 73) if(v.screenMode[cp] != 1) {
            if EUDIf()(v.screenMode[cp] == 1, neg=True):
                # (Line 74) v.screenMode[cp] = 1;
                _ARRW(v.screenMode, cp) << (1)
                # (Line 75) }
                # (Line 78) }
            EUDEndIf()
            # (Line 79) else if(v.screen[cp] == 2) {
        if EUDElseIf()(v.screen[cp] == 2):
            # (Line 80) if(v.screenMode[cp] != 2) {
            if EUDIf()(v.screenMode[cp] == 2, neg=True):
                # (Line 81) v.screenMode[cp] = 2;
                _ARRW(v.screenMode, cp) << (2)
                # (Line 82) }
                # (Line 84) }
            EUDEndIf()
            # (Line 85) v.screen[cp] = 0;
        EUDEndIf()
        _ARRW(v.screen, cp) << (0)
        # (Line 86) SetMemoryEPD(EPD(0x58DA00), SetTo, 0);
        # (Line 87) }
        DoActions(SetMemoryEPD(EPD(0x58DA00), SetTo, 0))
        # (Line 89) }
    EUDEndIf()
