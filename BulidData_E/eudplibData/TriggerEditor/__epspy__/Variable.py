## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 2) const d = StringBuffer(1024);
d = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 3) const textRefresh = PVariable();
textRefresh = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const singlePlay = EUDVariable();
singlePlay = _CGFW(lambda: [EUDVariable()], 1)[0]
# (Line 7) const KeyC = PVariable(); // 상호작용
KeyC = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const KeyI = PVariable(); // 인벤토리
KeyI = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const KeyD = PVariable(); // 체력 포션
KeyD = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const KeyF = PVariable(); // 마나 포션
KeyF = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const KeyU = PVariable(); // 장비
KeyU = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const KeyALT = PVariable(); // 와이드 체크
KeyALT = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const playerUnit = [0, 1, 16, 20, 99, 100];
playerUnit = _CGFW(lambda: [_ARR(FlattenList([0, 1, 16, 20, 99, 100]))], 1)[0]
# (Line 15) const playerLoc = [9, 10, 11, 12, 13, 14];
playerLoc = _CGFW(lambda: [_ARR(FlattenList([9, 10, 11, 12, 13, 14]))], 1)[0]
# (Line 17) const mouseClick = PVariable();
mouseClick = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const mouseX = PVariable();
mouseX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const mouseY = PVariable();
mouseY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const _mouseX = PVariable();
_mouseX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const _mouseY = PVariable();
_mouseY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const screen = PVariable();
screen = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 24) const screenMode = PVariable();
screenMode = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const cheat = PVariable();
cheat = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const maxExp = [
# (Line 28) 10, 20, 30, 30, 40, 50, 60, 70, 80, 100,
# (Line 29) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 30) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 31) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 32) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 33) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 34) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 35) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 36) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 37) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 38) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100];
maxExp = _CGFW(lambda: [_ARR(FlattenList([10, 20, 30, 30, 40, 50, 60, 70, 80, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]))], 1)[0]
