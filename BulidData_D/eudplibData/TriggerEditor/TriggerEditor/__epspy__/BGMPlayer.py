## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import BGMFlexible as bgm;
import BGMFlexible as bgm
# (Line 3) function loadSound(){
@EUDTracedFunc
def f_loadSound():
    # (Line 4) bgm.loadSound();
    EUDTraceLog(4)
    bgm.f_loadSound()
    # (Line 5) }
    # (Line 8) object Player{

# (Line 9) var track;
class Player(EUDStruct):
    # (Line 10) var lasttimer;
    # (Line 12) var bgmcode;
    # (Line 13) var bgmindex;
    # (Line 20) function ResetTrack(){
    @EUDTracedMethod
    def ResetTrack(this):
        # (Line 21) this.track = 0x40404040;
        EUDTraceLog(21)
        _ATTW(this, 'track') << (0x40404040)
        # (Line 22) }
        # (Line 33) function constructor(bgmindex /*BGM*/){

    @EUDTracedMethod
    def constructor(this, bgmindex):
        # (Line 34) this.bgmindex = bgmindex;
        EUDTraceLog(34)
        _ATTW(this, 'bgmindex') << (bgmindex)
        # (Line 36) var T1 = bgmindex;
        EUDTraceLog(36)
        T1 = EUDVariable()
        T1 << (bgmindex)
        # (Line 37) DoActions(T1.SetNumberX(0, ~0xF000));
        EUDTraceLog(37)
        DoActions(T1.SetNumberX(0, ~0xF000))
        # (Line 38) var T2 = bgmindex;
        EUDTraceLog(38)
        T2 = EUDVariable()
        T2 << (bgmindex)
        # (Line 39) DoActions(T2.SetNumberX(0, ~0xF00));
        EUDTraceLog(39)
        DoActions(T2.SetNumberX(0, ~0xF00))
        # (Line 40) var T3 = bgmindex;
        EUDTraceLog(40)
        T3 = EUDVariable()
        T3 << (bgmindex)
        # (Line 41) DoActions(T3.SetNumberX(0, ~0xF0));
        EUDTraceLog(41)
        DoActions(T3.SetNumberX(0, ~0xF0))
        # (Line 42) var T4 = bgmindex;
        EUDTraceLog(42)
        T4 = EUDVariable()
        T4 << (bgmindex)
        # (Line 43) DoActions(T4.SetNumberX(0, ~0xF));
        EUDTraceLog(43)
        DoActions(T4.SetNumberX(0, ~0xF))
        # (Line 45) this.bgmcode = T4 * 0x1000000 + T3 * 0x1000 + T2 + T1 / 0x100 + 0x40404040;
        EUDTraceLog(45)
        _ATTW(this, 'bgmcode') << (T4 * 0x1000000 + T3 * 0x1000 + T2 + T1 // 0x100 + 0x40404040)
        # (Line 47) this.track = 0x40404040;
        EUDTraceLog(47)
        _ATTW(this, 'track') << (0x40404040)
        # (Line 48) this.lasttimer = dwread_epd(EPD(0x51CE8C));
        EUDTraceLog(48)
        _ATTW(this, 'lasttimer') << (f_dwread_epd(EPD(0x51CE8C)))
        # (Line 49) }
        # (Line 57) function Play(){

    @EUDTracedMethod
    def Play(this):
        # (Line 58) if(IsUserCP()){
        _t1 = EUDIf()
        EUDTraceLog(58)
        if _t1(IsUserCP()):
            # (Line 59) const CurrentTime = dwread_epd(EPD(0x51CE8C));
            EUDTraceLog(59)
            CurrentTime = f_dwread_epd(EPD(0x51CE8C))
            # (Line 60) const FrameTick = (this.lasttimer - CurrentTime);
            EUDTraceLog(60)
            FrameTick = (this.lasttimer - CurrentTime)
            # (Line 62) if (FrameTick > 2220){
            _t2 = EUDIf()
            EUDTraceLog(62)
            if _t2(FrameTick <= 2220, neg=True):
                # (Line 63) const r = bgm.PlayOGG(this.bgmindex, this.bgmcode, this.track);
                EUDTraceLog(63)
                r = bgm.PlayOGG(this.bgmindex, this.bgmcode, this.track)
                # (Line 64) this.lasttimer = dwread_epd(EPD(0x51CE8C));;
                EUDTraceLog(64)
                _ATTW(this, 'lasttimer') << (f_dwread_epd(EPD(0x51CE8C)))
                # (Line 66) this.track += 0x1000000;
                EUDTraceLog(66)
                _ATTW(this, 'track').__iadd__(0x1000000)
                # (Line 67) if(this.track.AtLeastX(1, 0x10000000)){
                _t3 = EUDIf()
                EUDTraceLog(67)
                if _t3(this.track.AtLeastX(1, 0x10000000)):
                    # (Line 68) this.track -= 0x10000000;
                    EUDTraceLog(68)
                    _ATTW(this, 'track').__isub__(0x10000000)
                    # (Line 69) this.track += 0x10000;
                    EUDTraceLog(69)
                    _ATTW(this, 'track').__iadd__(0x10000)
                    # (Line 70) if(this.track.AtLeastX(1, 0x100000)){
                    _t4 = EUDIf()
                    EUDTraceLog(70)
                    if _t4(this.track.AtLeastX(1, 0x100000)):
                        # (Line 71) this.track -= 0x100000;
                        EUDTraceLog(71)
                        _ATTW(this, 'track').__isub__(0x100000)
                        # (Line 72) this.track += 0x100;
                        EUDTraceLog(72)
                        _ATTW(this, 'track').__iadd__(0x100)
                        # (Line 73) if(this.track.AtLeastX(1, 0x1000)){
                        _t5 = EUDIf()
                        EUDTraceLog(73)
                        if _t5(this.track.AtLeastX(1, 0x1000)):
                            # (Line 74) this.track -= 0x1000;
                            EUDTraceLog(74)
                            _ATTW(this, 'track').__isub__(0x1000)
                            # (Line 75) this.track += 0x1;
                            EUDTraceLog(75)
                            _ATTW(this, 'track').__iadd__(0x1)
                            # (Line 77) }
                            # (Line 78) }
                        EUDEndIf()
                        # (Line 79) }
                    EUDEndIf()
                    # (Line 84) if (r == 0){
                EUDEndIf()
                _t6 = EUDIf()
                EUDTraceLog(84)
                if _t6(r == 0):
                    # (Line 85) this.track = 0x40404040;
                    EUDTraceLog(85)
                    _ATTW(this, 'track') << (0x40404040)
                    # (Line 86) }
                    # (Line 87) }
                EUDEndIf()
                # (Line 88) }
            EUDEndIf()
            # (Line 89) }
        EUDEndIf()
        # (Line 90) };

    # (Line 92) var track;
    _fields_ = [
        'track',
        'lasttimer',
        'bgmcode',
        'bgmindex',
    ]

track = EUDVariable()
# (Line 93) var lasttimer;
lasttimer = EUDVariable()
# (Line 95) var bgmcode;
bgmcode = EUDVariable()
# (Line 96) var bgmindex;
bgmindex = EUDVariable()
# (Line 104) function ResetTrack(){
@EUDTracedFunc
def ResetTrack():
    # (Line 105) track = 0x40404040;
    EUDTraceLog(105)
    track << (0x40404040)
    # (Line 106) }
    # (Line 118) function SetBGM(bindex /*BGM*/){

@EUDTracedFunc
def SetBGM(bindex):
    # (Line 119) if(IsUserCP()){
    _t1 = EUDIf()
    EUDTraceLog(119)
    if _t1(IsUserCP()):
        # (Line 120) bgmindex = bindex;
        EUDTraceLog(120)
        bgmindex << (bindex)
        # (Line 122) var T1 = bgmindex;
        EUDTraceLog(122)
        T1 = EUDVariable()
        T1 << (bgmindex)
        # (Line 123) DoActions(T1.SetNumberX(0, ~0xF000));
        EUDTraceLog(123)
        DoActions(T1.SetNumberX(0, ~0xF000))
        # (Line 124) var T2 = bgmindex;
        EUDTraceLog(124)
        T2 = EUDVariable()
        T2 << (bgmindex)
        # (Line 125) DoActions(T2.SetNumberX(0, ~0xF00));
        EUDTraceLog(125)
        DoActions(T2.SetNumberX(0, ~0xF00))
        # (Line 126) var T3 = bgmindex;
        EUDTraceLog(126)
        T3 = EUDVariable()
        T3 << (bgmindex)
        # (Line 127) DoActions(T3.SetNumberX(0, ~0xF0));
        EUDTraceLog(127)
        DoActions(T3.SetNumberX(0, ~0xF0))
        # (Line 128) var T4 = bgmindex;
        EUDTraceLog(128)
        T4 = EUDVariable()
        T4 << (bgmindex)
        # (Line 129) DoActions(T4.SetNumberX(0, ~0xF));
        EUDTraceLog(129)
        DoActions(T4.SetNumberX(0, ~0xF))
        # (Line 131) bgmcode = T4 * 0x1000000 + T3 * 0x1000 + T2 + T1 / 0x100 + 0x40404040;
        EUDTraceLog(131)
        bgmcode << (T4 * 0x1000000 + T3 * 0x1000 + T2 + T1 // 0x100 + 0x40404040)
        # (Line 133) track = 0x40404040;
        EUDTraceLog(133)
        track << (0x40404040)
        # (Line 134) lasttimer = dwread_epd(EPD(0x51CE8C));
        EUDTraceLog(134)
        lasttimer << (f_dwread_epd(EPD(0x51CE8C)))
        # (Line 135) }
        # (Line 136) }
    EUDEndIf()
    # (Line 144) function Play(){

@EUDTracedFunc
def Play():
    # (Line 145) if(IsUserCP()){
    _t1 = EUDIf()
    EUDTraceLog(145)
    if _t1(IsUserCP()):
        # (Line 146) const CurrentTime = dwread_epd(EPD(0x51CE8C));
        EUDTraceLog(146)
        CurrentTime = f_dwread_epd(EPD(0x51CE8C))
        # (Line 147) const FrameTick = (lasttimer - CurrentTime);
        EUDTraceLog(147)
        FrameTick = (lasttimer - CurrentTime)
        # (Line 149) if (FrameTick > 2220){
        _t2 = EUDIf()
        EUDTraceLog(149)
        if _t2(FrameTick <= 2220, neg=True):
            # (Line 150) const r = bgm.PlayOGG(bgmindex, bgmcode, track);
            EUDTraceLog(150)
            r = bgm.PlayOGG(bgmindex, bgmcode, track)
            # (Line 151) lasttimer = dwread_epd(EPD(0x51CE8C));;
            EUDTraceLog(151)
            lasttimer << (f_dwread_epd(EPD(0x51CE8C)))
            # (Line 153) track += 0x1000000;
            EUDTraceLog(153)
            track.__iadd__(0x1000000)
            # (Line 154) if(track.AtLeastX(1, 0x10000000)){
            _t3 = EUDIf()
            EUDTraceLog(154)
            if _t3(track.AtLeastX(1, 0x10000000)):
                # (Line 155) DoActions(track.SetNumberX(0, 0x10000000));
                EUDTraceLog(155)
                DoActions(track.SetNumberX(0, 0x10000000))
                # (Line 156) track += 0x10000;
                EUDTraceLog(156)
                track.__iadd__(0x10000)
                # (Line 157) if(track.AtLeastX(1, 0x100000)){
                _t4 = EUDIf()
                EUDTraceLog(157)
                if _t4(track.AtLeastX(1, 0x100000)):
                    # (Line 158) DoActions(track.SetNumberX(0, 0x100000));
                    EUDTraceLog(158)
                    DoActions(track.SetNumberX(0, 0x100000))
                    # (Line 159) track += 0x100;
                    EUDTraceLog(159)
                    track.__iadd__(0x100)
                    # (Line 160) if(track.AtLeastX(1, 0x1000)){
                    _t5 = EUDIf()
                    EUDTraceLog(160)
                    if _t5(track.AtLeastX(1, 0x1000)):
                        # (Line 161) DoActions(track.SetNumberX(0, 0x1000));
                        EUDTraceLog(161)
                        DoActions(track.SetNumberX(0, 0x1000))
                        # (Line 162) track += 0x1;
                        EUDTraceLog(162)
                        track.__iadd__(0x1)
                        # (Line 164) }
                        # (Line 165) }
                    EUDEndIf()
                    # (Line 166) }
                EUDEndIf()
                # (Line 168) if (r == 0){
            EUDEndIf()
            _t6 = EUDIf()
            EUDTraceLog(168)
            if _t6(r == 0):
                # (Line 169) track = 0x40404040;
                EUDTraceLog(169)
                track << (0x40404040)
                # (Line 170) }
                # (Line 171) }
            EUDEndIf()
            # (Line 172) }
        EUDEndIf()
        # (Line 173) }
    EUDEndIf()
