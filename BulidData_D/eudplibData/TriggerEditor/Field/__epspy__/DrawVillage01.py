## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const drawed = 0;
drawed = _CGFW(lambda: [0], 1)[0]
# (Line 3) function CreateTree(x, y);
# (Line 5) function DrawVillage() {
@EUDTracedFunc
def DrawVillage():
    # (Line 6) if(drawed == 1) return;
    _t1 = EUDIf()
    EUDTraceLog(6)
    if _t1(drawed == 1):
        EUDTraceLog(6)
        EUDReturn()
        # (Line 7) CreateTree(273, 240);
    EUDEndIf()
    EUDTraceLog(7)
    CreateTree(273, 240)
    # (Line 8) CreateTree(360, 224);
    EUDTraceLog(8)
    CreateTree(360, 224)
    # (Line 9) CreateTree(271, 496);
    EUDTraceLog(9)
    CreateTree(271, 496)
    # (Line 10) CreateTree(408, 501);
    EUDTraceLog(10)
    CreateTree(408, 501)
    # (Line 11) CreateTree(423, 329);
    EUDTraceLog(11)
    CreateTree(423, 329)
    # (Line 12) SetVariables(drawed, 1);
    EUDTraceLog(12)
    SetVariables(drawed, 1)
    # (Line 13) }
    # (Line 15) function Remove() {

@EUDTracedFunc
def Remove():
    # (Line 17) }
    # (Line 19) function CreateTree(x, y) {
    pass

@EUDTracedFunc
def CreateTree(x, y):
    # (Line 20) setloc("temp", x, y);
    EUDTraceLog(20)
    f_setloc("temp", x, y)
    # (Line 21) var ran = dwrand() % 4;
    EUDTraceLog(21)
    ran = EUDVariable()
    ran << (f_dwrand() % 4)
    # (Line 22) if(ran == 0) {
    _t1 = EUDIf()
    EUDTraceLog(22)
    if _t1(ran == 0):
        # (Line 23) wwrite(0x665AC0 + 1696 + 493 * 2, 624);
        EUDTraceLog(23)
        f_wwrite(0x665AC0 + 1696 + 493 * 2, 624)
        # (Line 24) CreateUnit(1, "Cave", "temp", P7);
        # (Line 25) }
        EUDTraceLog(24)
        DoActions(CreateUnit(1, "Cave", "temp", P7))
        # (Line 26) else if(ran == 1) {
    _t2 = EUDElseIf()
    EUDTraceLog(26)
    if _t2(ran == 1):
        # (Line 27) wwrite(0x665AC0 + 1696 + 493 * 2, 634);
        EUDTraceLog(27)
        f_wwrite(0x665AC0 + 1696 + 493 * 2, 634)
        # (Line 28) addloc("t2", -17, 0);
        EUDTraceLog(28)
        f_addloc("t2", -17, 0)
        # (Line 29) CreateUnit(1, "Cave", "temp", P7);
        # (Line 30) }
        EUDTraceLog(29)
        DoActions(CreateUnit(1, "Cave", "temp", P7))
        # (Line 31) else if(ran == 2) {
    _t3 = EUDElseIf()
    EUDTraceLog(31)
    if _t3(ran == 2):
        # (Line 32) addloc("t3", -16, 0);
        EUDTraceLog(32)
        f_addloc("t3", -16, 0)
        # (Line 33) wwrite(0x665AC0 + 1696 + 493 * 2, 638);
        EUDTraceLog(33)
        f_wwrite(0x665AC0 + 1696 + 493 * 2, 638)
        # (Line 34) CreateUnit(1, "Cave", "temp", P7);
        # (Line 35) }
        EUDTraceLog(34)
        DoActions(CreateUnit(1, "Cave", "temp", P7))
        # (Line 36) else if(ran == 3) {
    _t4 = EUDElseIf()
    EUDTraceLog(36)
    if _t4(ran == 3):
        # (Line 37) addloc("t4", -7, 9);
        EUDTraceLog(37)
        f_addloc("t4", -7, 9)
        # (Line 38) wwrite(0x665AC0 + 1696 + 493 * 2, 630);
        EUDTraceLog(38)
        f_wwrite(0x665AC0 + 1696 + 493 * 2, 630)
        # (Line 39) CreateUnit(1, "Cave", "temp", P7);
        # (Line 40) }
        EUDTraceLog(39)
        DoActions(CreateUnit(1, "Cave", "temp", P7))
        # (Line 41) }
    EUDEndIf()
