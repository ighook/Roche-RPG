## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) object Armor { var type; var index; var name; var name2; var lv; var defense; };
class Armor(EUDStruct):
    # (Line 3) const slot = 100;
    _fields_ = [
        'type',
        'index',
        'name',
        'name2',
        'lv',
        'defense',
    ]

slot = _CGFW(lambda: [100], 1)[0]
# (Line 4) const armorList = EUDArray(slot);
armorList = _CGFW(lambda: [EUDArray(slot)], 1)[0]
# (Line 6) function SetItemInfo() {
@EUDTracedFunc
def SetItemInfo():
    # (Line 7) for(var i = 0; i < slot; i++) armorList[i] = Armor.alloc();
    EUDTraceLog(7)
    i = EUDVariable()
    i << (0)
    _t1 = EUDWhile()
    EUDTraceLog(7)
    if _t1(i >= slot, neg=True):
        def _t2():
            EUDTraceLog(7)
            i.__iadd__(1)
        EUDTraceLog(7)
        _ARRW(armorList, i) << (Armor.alloc())
        # (Line 8) const armor01 = Armor.cast(armorList[0]);
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    EUDTraceLog(8)
    armor01 = Armor.cast(armorList[0])
    # (Line 9) armor01.type = 3;
    EUDTraceLog(9)
    _ATTW(armor01, 'type') << (3)
    # (Line 10) armor01.index = 1;
    EUDTraceLog(10)
    _ATTW(armor01, 'index') << (1)
    # (Line 11) armor01.name = Db("\x04[일반] 천 갑옷");
    EUDTraceLog(11)
    _ATTW(armor01, 'name') << (Db("\x04[일반] 천 갑옷"))
    # (Line 12) armor01.name2 = EPD(Db(u2b("\x04[일반] 천 갑옷")));
    EUDTraceLog(12)
    _ATTW(armor01, 'name2') << (EPD(Db(u2b("\x04[일반] 천 갑옷"))))
    # (Line 13) armor01.defense = 1;
    EUDTraceLog(13)
    _ATTW(armor01, 'defense') << (1)
    # (Line 14) armor01.lv = 1;
    EUDTraceLog(14)
    _ATTW(armor01, 'lv') << (1)
    # (Line 15) const armor02 = Armor.cast(armorList[1]);
    EUDTraceLog(15)
    armor02 = Armor.cast(armorList[1])
    # (Line 16) armor02.type = 3;
    EUDTraceLog(16)
    _ATTW(armor02, 'type') << (3)
    # (Line 17) armor02.index = 2;
    EUDTraceLog(17)
    _ATTW(armor02, 'index') << (2)
    # (Line 18) armor02.name = Db("\x04[일반] \x04보강된 단검");
    EUDTraceLog(18)
    _ATTW(armor02, 'name') << (Db("\x04[일반] \x04보강된 단검"))
    # (Line 19) armor02.name2 = EPD(Db(u2b("\x04[일반] 보강된 단검")));
    EUDTraceLog(19)
    _ATTW(armor02, 'name2') << (EPD(Db(u2b("\x04[일반] 보강된 단검"))))
    # (Line 20) armor02.lv = 1;
    EUDTraceLog(20)
    _ATTW(armor02, 'lv') << (1)
    # (Line 21) armor02.defense = 9;
    EUDTraceLog(21)
    _ATTW(armor02, 'defense') << (9)
    # (Line 22) const armor03 = Armor.cast(armorList[2]);
    EUDTraceLog(22)
    armor03 = Armor.cast(armorList[2])
    # (Line 23) armor03.type = 3;
    EUDTraceLog(23)
    _ATTW(armor03, 'type') << (3)
    # (Line 24) armor03.index = 3;
    EUDTraceLog(24)
    _ATTW(armor03, 'index') << (3)
    # (Line 25) armor03.name = Db("\x17[레어] \x04스파타");
    EUDTraceLog(25)
    _ATTW(armor03, 'name') << (Db("\x17[레어] \x04스파타"))
    # (Line 26) armor03.name2 = EPD(Db(u2b("\x04[레어] 스파타")));
    EUDTraceLog(26)
    _ATTW(armor03, 'name2') << (EPD(Db(u2b("\x04[레어] 스파타"))))
    # (Line 27) armor03.lv = 7;
    EUDTraceLog(27)
    _ATTW(armor03, 'lv') << (7)
    # (Line 28) armor03.defense = 9;
    EUDTraceLog(28)
    _ATTW(armor03, 'defense') << (9)
    # (Line 29) const armor04 = Armor.cast(armorList[3]);
    EUDTraceLog(29)
    armor04 = Armor.cast(armorList[3])
    # (Line 30) armor04.type = 3;
    EUDTraceLog(30)
    _ATTW(armor04, 'type') << (3)
    # (Line 31) armor04.index = 4;
    EUDTraceLog(31)
    _ATTW(armor04, 'index') << (4)
    # (Line 32) armor04.name = Db("\x04[일반] 스파타");
    EUDTraceLog(32)
    _ATTW(armor04, 'name') << (Db("\x04[일반] 스파타"))
    # (Line 33) armor04.name2 = EPD(Db(u2b("\x04[일반] 스파타")));
    EUDTraceLog(33)
    _ATTW(armor04, 'name2') << (EPD(Db(u2b("\x04[일반] 스파타"))))
    # (Line 34) armor04.lv = 1;
    EUDTraceLog(34)
    _ATTW(armor04, 'lv') << (1)
    # (Line 35) armor04.defense = 9;
    EUDTraceLog(35)
    _ATTW(armor04, 'defense') << (9)
    # (Line 36) const armor05 = Armor.cast(armorList[4]);
    EUDTraceLog(36)
    armor05 = Armor.cast(armorList[4])
    # (Line 37) armor05.type = 3;
    EUDTraceLog(37)
    _ATTW(armor05, 'type') << (3)
    # (Line 38) armor05.index = 5;
    EUDTraceLog(38)
    _ATTW(armor05, 'index') << (5)
    # (Line 39) armor05.name = Db("\x04[일반] 반월검");
    EUDTraceLog(39)
    _ATTW(armor05, 'name') << (Db("\x04[일반] 반월검"))
    # (Line 40) armor05.name2 = EPD(Db(u2b("\x04[일반] 반월검")));
    EUDTraceLog(40)
    _ATTW(armor05, 'name2') << (EPD(Db(u2b("\x04[일반] 반월검"))))
    # (Line 41) armor05.lv = 1;
    EUDTraceLog(41)
    _ATTW(armor05, 'lv') << (1)
    # (Line 42) armor05.defense = 9;
    EUDTraceLog(42)
    _ATTW(armor05, 'defense') << (9)
    # (Line 43) const armor06 = Armor.cast(armorList[5]);
    EUDTraceLog(43)
    armor06 = Armor.cast(armorList[5])
    # (Line 44) armor06.type = 3;
    EUDTraceLog(44)
    _ATTW(armor06, 'type') << (3)
    # (Line 45) armor06.index = 6;
    EUDTraceLog(45)
    _ATTW(armor06, 'index') << (6)
    # (Line 46) armor06.name = Db("\x04[일반] 단혼검");
    EUDTraceLog(46)
    _ATTW(armor06, 'name') << (Db("\x04[일반] 단혼검"))
    # (Line 47) armor06.lv = 1;
    EUDTraceLog(47)
    _ATTW(armor06, 'lv') << (1)
    # (Line 48) armor06.defense = 9;
    EUDTraceLog(48)
    _ATTW(armor06, 'defense') << (9)
    # (Line 49) const armor07 = Armor.cast(armorList[6]);
    EUDTraceLog(49)
    armor07 = Armor.cast(armorList[6])
    # (Line 50) armor07.type = 3;
    EUDTraceLog(50)
    _ATTW(armor07, 'type') << (3)
    # (Line 51) armor07.index = 7;
    EUDTraceLog(51)
    _ATTW(armor07, 'index') << (7)
    # (Line 52) armor07.name = Db("\x04[일반] 켈람");
    EUDTraceLog(52)
    _ATTW(armor07, 'name') << (Db("\x04[일반] 켈람"))
    # (Line 53) armor07.lv = 1;
    EUDTraceLog(53)
    _ATTW(armor07, 'lv') << (1)
    # (Line 54) armor07.defense = 9;
    EUDTraceLog(54)
    _ATTW(armor07, 'defense') << (9)
    # (Line 55) const armor08 = Armor.cast(armorList[7]);
    EUDTraceLog(55)
    armor08 = Armor.cast(armorList[7])
    # (Line 56) armor08.type = 3;
    EUDTraceLog(56)
    _ATTW(armor08, 'type') << (3)
    # (Line 57) armor08.index = 8;
    EUDTraceLog(57)
    _ATTW(armor08, 'index') << (8)
    # (Line 58) armor08.name = Db("\x04[일반] 써큘러스");
    EUDTraceLog(58)
    _ATTW(armor08, 'name') << (Db("\x04[일반] 써큘러스"))
    # (Line 59) armor08.lv = 1;
    EUDTraceLog(59)
    _ATTW(armor08, 'lv') << (1)
    # (Line 60) armor08.defense = 9;
    EUDTraceLog(60)
    _ATTW(armor08, 'defense') << (9)
    # (Line 61) const armor09 = Armor.cast(armorList[8]);
    EUDTraceLog(61)
    armor09 = Armor.cast(armorList[8])
    # (Line 62) armor09.type = 3;
    EUDTraceLog(62)
    _ATTW(armor09, 'type') << (3)
    # (Line 63) armor09.index = 9;
    EUDTraceLog(63)
    _ATTW(armor09, 'index') << (9)
    # (Line 64) armor09.name = Db("\x04[일반] 샤크람");
    EUDTraceLog(64)
    _ATTW(armor09, 'name') << (Db("\x04[일반] 샤크람"))
    # (Line 65) armor09.lv = 1;
    EUDTraceLog(65)
    _ATTW(armor09, 'lv') << (1)
    # (Line 66) armor09.defense = 9;
    EUDTraceLog(66)
    _ATTW(armor09, 'defense') << (9)
    # (Line 67) const armor10 = Armor.cast(armorList[9]);
    EUDTraceLog(67)
    armor10 = Armor.cast(armorList[9])
    # (Line 68) armor10.type = 3;
    EUDTraceLog(68)
    _ATTW(armor10, 'type') << (3)
    # (Line 69) armor10.index = 10;
    EUDTraceLog(69)
    _ATTW(armor10, 'index') << (10)
    # (Line 70) armor10.name = Db("\x04[일반] 악령검");
    EUDTraceLog(70)
    _ATTW(armor10, 'name') << (Db("\x04[일반] 악령검"))
    # (Line 71) armor10.lv = 1;
    EUDTraceLog(71)
    _ATTW(armor10, 'lv') << (1)
    # (Line 72) armor10.defense = 9;
    EUDTraceLog(72)
    _ATTW(armor10, 'defense') << (9)
    # (Line 73) }
