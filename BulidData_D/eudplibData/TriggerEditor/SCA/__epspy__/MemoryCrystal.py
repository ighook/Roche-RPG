## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import User.Info as user;
from User import Info as user
# (Line 2) import Variable as v;
import Variable as v
# (Line 3) import System as sys;
import System as sys
# (Line 4) import SCA.Save as save;
from SCA import Save as save
# (Line 5) import Screen as screen;
import Screen as screen
# (Line 6) import StatusBar as status;
import StatusBar as status
# (Line 7) import TriggerEditor.SCArchive as sca;
from TriggerEditor import SCArchive as sca
# (Line 9) const mousePosition = PVariable();
mousePosition = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const crystal = PVariable();
crystal = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const color = EUDArray(2);
color = _CGFW(lambda: [EUDArray(2)], 1)[0]
# (Line 13) function Open();
# (Line 14) function Close();
# (Line 16) function MemoryCrystal() {
@EUDTracedFunc
def MemoryCrystal():
    # (Line 17) const cp = getcurpl();
    EUDTraceLog(17)
    cp = f_getcurpl()
    # (Line 18) if(v.key[cp] == 1) {
    _t1 = EUDIf()
    EUDTraceLog(18)
    if _t1(v.key[cp] == 1):
        # (Line 19) if(Bring(P7, Exactly, 1, "Protoss Pylon", v.locNum[cp])) {
        _t2 = EUDIf()
        EUDTraceLog(19)
        if _t2(Bring(P7, Exactly, 1, "Protoss Pylon", v.locNum[cp])):
            # (Line 20) if(crystal[cp] == 0) Open();
            _t3 = EUDIf()
            EUDTraceLog(20)
            if _t3(crystal[cp] == 0):
                EUDTraceLog(20)
                Open()
                # (Line 21) else Close();
            if EUDElse()():
                EUDTraceLog(21)
                Close()
                # (Line 22) }
            EUDEndIf()
            # (Line 23) }
        EUDEndIf()
        # (Line 24) if(crystal[cp] == 1) {
    EUDEndIf()
    _t4 = EUDIf()
    EUDTraceLog(24)
    if _t4(crystal[cp] == 1):
        # (Line 25) if(v.textRefresh[cp] == 1) {
        _t5 = EUDIf()
        EUDTraceLog(25)
        if _t5(v.textRefresh[cp] == 1):
            # (Line 26) v.display.insert(0);
            EUDTraceLog(26)
            v.display.insert(0)
            # (Line 27) v.display.append("\x13\x1f= Memory Crystal =\n\n");
            EUDTraceLog(27)
            v.display.append("\x13\x1f= Memory Crystal =\n\n")
            # (Line 28) v.display.append("\x13\x1d(1)  ", ptr2s(color[0]) ,"현재의 기억을 크리스탈에 새긴다\n");
            EUDTraceLog(28)
            v.display.append("\x13\x1d(1)  ", ptr2s(color[0]), "현재의 기억을 크리스탈에 새긴다\n")
            # (Line 29) v.display.append("\x13\x1d(2)  ", ptr2s(color[1]) ,"다른 기억을 가져온다\n");
            EUDTraceLog(29)
            v.display.append("\x13\x1d(2)  ", ptr2s(color[1]), "다른 기억을 가져온다\n")
            # (Line 30) }
            # (Line 31) v.display.DisplayAt(0);
        EUDEndIf()
        EUDTraceLog(31)
        v.display.DisplayAt(0)
        # (Line 32) sys.Stop();
        EUDTraceLog(32)
        sys.Stop()
        # (Line 33) if(IsUserCP()) {
        _t6 = EUDIf()
        EUDTraceLog(33)
        if _t6(IsUserCP()):
            # (Line 34) var c = 0;
            EUDTraceLog(34)
            c = EUDVariable()
            c << (0)
            # (Line 42) if(v._mouseY[cp] < 144 || v._mouseY[cp] > 174) {
            _t7 = EUDIf()
            EUDTraceLog(42)
            if _t7(EUDSCOr()(v._mouseY[cp] >= 144, neg=True)(v._mouseY[cp] <= 174, neg=True)()):
                # (Line 43) mousePosition[cp] = 0;
                EUDTraceLog(43)
                _ARRW(mousePosition, cp) << (0)
                # (Line 44) }
                # (Line 46) if(v._mouseY[cp] <= 158 && v._mouseY[cp] >= 144) {
            EUDEndIf()
            _t8 = EUDIf()
            EUDTraceLog(46)
            if _t8(EUDSCAnd()(v._mouseY[cp] <= 158)(v._mouseY[cp] >= 144)()):
                # (Line 47) if(mousePosition[cp] != 1) {
                _t9 = EUDIf()
                EUDTraceLog(47)
                if _t9(mousePosition[cp] == 1, neg=True):
                    # (Line 48) color[0] = Db("\x04");
                    EUDTraceLog(48)
                    _ARRW(color, 0) << (Db("\x04"))
                    # (Line 49) mousePosition[cp] = 1;
                    EUDTraceLog(49)
                    _ARRW(mousePosition, cp) << (1)
                    # (Line 50) }
                    # (Line 51) }
                EUDEndIf()
                # (Line 52) else {
            if EUDElse()():
                # (Line 53) if(strcmp(color[0], Db("\x04")) == 0) {
                _t10 = EUDIf()
                EUDTraceLog(53)
                if _t10(f_strcmp(color[0], Db("\x04")) == 0):
                    # (Line 54) color[0] = Db("\x05");
                    EUDTraceLog(54)
                    _ARRW(color, 0) << (Db("\x05"))
                    # (Line 55) }
                    # (Line 56) }
                EUDEndIf()
                # (Line 57) if(v._mouseY[cp] <= 174 && v._mouseY[cp] >= 160) {
            EUDEndIf()
            _t11 = EUDIf()
            EUDTraceLog(57)
            if _t11(EUDSCAnd()(v._mouseY[cp] <= 174)(v._mouseY[cp] >= 160)()):
                # (Line 58) if(mousePosition[cp] != 2) {
                _t12 = EUDIf()
                EUDTraceLog(58)
                if _t12(mousePosition[cp] == 2, neg=True):
                    # (Line 59) color[1] = Db("\x04");
                    EUDTraceLog(59)
                    _ARRW(color, 1) << (Db("\x04"))
                    # (Line 60) mousePosition[cp] = 2;
                    EUDTraceLog(60)
                    _ARRW(mousePosition, cp) << (2)
                    # (Line 61) }
                    # (Line 62) }
                EUDEndIf()
                # (Line 63) else {
            if EUDElse()():
                # (Line 64) if(strcmp(color[1], Db("\x04")) == 0) {
                _t13 = EUDIf()
                EUDTraceLog(64)
                if _t13(f_strcmp(color[1], Db("\x04")) == 0):
                    # (Line 65) color[1] = Db("\x05");
                    EUDTraceLog(65)
                    _ARRW(color, 1) << (Db("\x05"))
                    # (Line 66) }
                    # (Line 67) }
                EUDEndIf()
                # (Line 68) }
            EUDEndIf()
            # (Line 70) if(user.deathSCV[cp] == 1 || user.deathCavein[cp] > 0) {
        EUDEndIf()
        _t14 = EUDIf()
        EUDTraceLog(70)
        if _t14(EUDSCOr()(user.deathSCV[cp] == 1)(user.deathCavein[cp] <= 0, neg=True)()):
            # (Line 72) if(sys.clickedLine(2) || user.deathCavein[cp] == 1) {
            _t15 = EUDIf()
            EUDTraceLog(72)
            if _t15(EUDSCOr()(sys.f_clickedLine(2))(user.deathCavein[cp] == 1)()):
                # (Line 73) v.s.printAt(2, "\x13\x1d(1)  \x07현재의 기억을 크리스탈에 새긴다");
                EUDTraceLog(73)
                v.s.printAt(2, "\x13\x1d(1)  \x07현재의 기억을 크리스탈에 새긴다")
                # (Line 74) if(sca.ConnectStatus() == 0) {
                _t16 = EUDIf()
                EUDTraceLog(74)
                if _t16(sca.ConnectStatus() == 0):
                    # (Line 75) PlayWAV("staredit\\wav\\Error.ogg");
                    # (Line 76) status.stats[cp] = status.SCA_ERROR;
                    EUDTraceLog(75)
                    DoActions(PlayWAV("staredit\\wav\\Error.ogg"))
                    EUDTraceLog(76)
                    _ARRW(status.stats, cp) << (status.SCA_ERROR)
                    # (Line 77) }
                    # (Line 78) else {
                if EUDElse()():
                    # (Line 79) PlayWAV("staredit\\wav\\click2.ogg");
                    # (Line 80) save.Save();
                    EUDTraceLog(79)
                    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                    EUDTraceLog(80)
                    save.Save()
                    # (Line 81) }
                    # (Line 82) }
                EUDEndIf()
                # (Line 83) else if(sys.clickedLine(3) || user.deathCavein[cp] == 2) {
            _t17 = EUDElseIf()
            EUDTraceLog(83)
            if _t17(EUDSCOr()(sys.f_clickedLine(3))(user.deathCavein[cp] == 2)()):
                # (Line 84) v.s.printAt(3, "\x13\x1d(2)  \x07다른 기억을 가져온다");
                EUDTraceLog(84)
                v.s.printAt(3, "\x13\x1d(2)  \x07다른 기억을 가져온다")
                # (Line 85) if(sca.ConnectStatus() == 0) {
                _t18 = EUDIf()
                EUDTraceLog(85)
                if _t18(sca.ConnectStatus() == 0):
                    # (Line 86) PlayWAV("staredit\\wav\\Error.ogg");
                    # (Line 87) status.stats[cp] = status.SCA_ERROR;
                    EUDTraceLog(86)
                    DoActions(PlayWAV("staredit\\wav\\Error.ogg"))
                    EUDTraceLog(87)
                    _ARRW(status.stats, cp) << (status.SCA_ERROR)
                    # (Line 88) }
                    # (Line 89) else {
                if EUDElse()():
                    # (Line 90) PlayWAV("staredit\\wav\\click2.ogg");
                    # (Line 91) }
                    EUDTraceLog(90)
                    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                    # (Line 92) }
                EUDEndIf()
                # (Line 93) }
            EUDEndIf()
            # (Line 94) }
        EUDEndIf()
        # (Line 95) }
    EUDEndIf()
    # (Line 97) function Open() {

@EUDTracedFunc
def Open():
    # (Line 98) const cp = getcurpl();
    EUDTraceLog(98)
    cp = f_getcurpl()
    # (Line 99) sys.CloseWindow();
    EUDTraceLog(99)
    sys.CloseWindow()
    # (Line 100) crystal[cp] = 1;
    EUDTraceLog(100)
    _ARRW(crystal, cp) << (1)
    # (Line 101) if(IsUserCP()) {
    _t1 = EUDIf()
    EUDTraceLog(101)
    if _t1(IsUserCP()):
        # (Line 102) color[0] = Db("\x05");
        EUDTraceLog(102)
        _ARRW(color, 0) << (Db("\x05"))
        # (Line 103) color[1] = Db("\x05");
        EUDTraceLog(103)
        _ARRW(color, 1) << (Db("\x05"))
        # (Line 104) }
        # (Line 105) mousePosition[cp] = 0;
    EUDEndIf()
    EUDTraceLog(105)
    _ARRW(mousePosition, cp) << (0)
    # (Line 106) screen.SetLight(25);
    EUDTraceLog(106)
    screen.SetLight(25)
    # (Line 107) v.textRefresh[cp] = 1;
    EUDTraceLog(107)
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 108) }
    # (Line 110) function Close() {

@EUDTracedFunc
def Close():
    # (Line 111) const cp = getcurpl();
    EUDTraceLog(111)
    cp = f_getcurpl()
    # (Line 112) sys.TextClear();
    EUDTraceLog(112)
    sys.TextClear()
    # (Line 113) screen.SetLight(31);
    EUDTraceLog(113)
    screen.SetLight(31)
    # (Line 114) crystal[cp] = 0;
    EUDTraceLog(114)
    _ARRW(crystal, cp) << (0)
    # (Line 115) }
