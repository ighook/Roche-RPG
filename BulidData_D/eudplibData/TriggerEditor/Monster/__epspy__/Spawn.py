## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System as sys;
import System as sys
# (Line 2) import Monster.Location as mobloc;
from Monster import Location as mobloc
# (Line 3) import Variable as v;
import Variable as v
# (Line 5) var timer = 0;
timer = EUDCreateVariables(1)
_IGVA([timer], lambda: [0])
# (Line 9) function Spawn() {
@EUDTracedFunc
def Spawn():
    # (Line 10) if(timer < 80) SetVariables(timer, 1, list(Add));
    _t1 = EUDIf()
    EUDTraceLog(10)
    if _t1(timer >= 80, neg=True):
        EUDTraceLog(10)
        SetVariables(timer, 1, FlattenList([Add]))
        # (Line 11) else if(timer == 80) {
    _t2 = EUDElseIf()
    EUDTraceLog(11)
    if _t2(timer == 80):
        # (Line 12) var ran = dwrand() % mobloc.spawnLocGoblin;
        EUDTraceLog(12)
        ran = EUDVariable()
        ran << (f_dwrand() % mobloc.spawnLocGoblin)
        # (Line 13) setloc("temp", mobloc.locGoblinX[ran], mobloc.locGoblinY[ran]);
        EUDTraceLog(13)
        f_setloc("temp", mobloc.locGoblinX[ran], mobloc.locGoblinY[ran])
        # (Line 14) CreateUnit(1, "Terran Dropship", "temp", P7);
        # (Line 15) if(Bring(P7, Exactly, 1, "Terran Dropship", "Field1")) {
        EUDTraceLog(14)
        DoActions(CreateUnit(1, "Terran Dropship", "temp", P7))
        _t3 = EUDIf()
        EUDTraceLog(15)
        if _t3(Bring(P7, Exactly, 1, "Terran Dropship", "Field1")):
            # (Line 16) RemoveUnitAt(1, "Terran Dropship", "Field1", P7);
            # (Line 17) if(Bring(P8, AtMost, 13, "Zerg Drone", "Field1")) {
            EUDTraceLog(16)
            DoActions(RemoveUnitAt(1, "Terran Dropship", "Field1", P7))
            _t4 = EUDIf()
            EUDTraceLog(17)
            if _t4(Bring(P8, AtMost, 13, "Zerg Drone", "Field1")):
                # (Line 18) var mob = sys.SetNextUnitEPD();
                EUDTraceLog(18)
                mob = EUDVariable()
                mob << (sys.SetNextUnitEPD())
                # (Line 19) SetMemoryXEPD(mob + 0x08F / 4, SetTo, 1 << 24, 0xFF000000); // 킬 카운트
                # (Line 20) CreateUnit(1, 41, "temp", P8);
                EUDTraceLog(19)
                DoActions(SetMemoryXEPD(mob + 0x08F // 4, SetTo, _LSH(1,24), 0xFF000000))
                # (Line 21) }
                EUDTraceLog(20)
                DoActions(CreateUnit(1, 41, "temp", P8))
                # (Line 22) }
            EUDEndIf()
            # (Line 23) else if(Bring(P8, Exactly, 1, "Terran Dropship", "Field2")) {
        _t5 = EUDElseIf()
        EUDTraceLog(23)
        if _t5(Bring(P8, Exactly, 1, "Terran Dropship", "Field2")):
            # (Line 24) RemoveUnitAt(1, "Terran Dropship", "Field1", P7);
            # (Line 25) if(Bring(P7, AtMost, 10, "Zerg Drone", "Field2")) {
            EUDTraceLog(24)
            DoActions(RemoveUnitAt(1, "Terran Dropship", "Field1", P7))
            _t6 = EUDIf()
            EUDTraceLog(25)
            if _t6(Bring(P7, AtMost, 10, "Zerg Drone", "Field2")):
                # (Line 26) var mob = sys.SetNextUnitEPD();
                EUDTraceLog(26)
                mob = EUDVariable()
                mob << (sys.SetNextUnitEPD())
                # (Line 27) SetMemoryXEPD(mob + 0x08F / 4, SetTo, 1 << 24, 0xFF000000); // 킬 카운트
                # (Line 28) CreateUnit(1, 41, "temp", P8);
                EUDTraceLog(27)
                DoActions(SetMemoryXEPD(mob + 0x08F // 4, SetTo, _LSH(1,24), 0xFF000000))
                # (Line 29) }
                EUDTraceLog(28)
                DoActions(CreateUnit(1, 41, "temp", P8))
                # (Line 30) }
            EUDEndIf()
            # (Line 31) setcurpl(7);
        EUDEndIf()
        EUDTraceLog(31)
        f_setcurpl(7)
        # (Line 32) RunAIScriptAt("Set Unit Order To: Junk Yard Dog", "Anywhere");
        # (Line 33) SetVariables(timer, 0);
        EUDTraceLog(32)
        DoActions(RunAIScriptAt("Set Unit Order To: Junk Yard Dog", "Anywhere"))
        EUDTraceLog(33)
        SetVariables(timer, 0)
        # (Line 34) }
        # (Line 35) }
    EUDEndIf()
