## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 3) var spawnLocGoblin 		= 0;
spawnLocGoblin = EUDCreateVariables(1)
_IGVA([spawnLocGoblin], lambda: [0])
# (Line 4) var spawnLocBiter 		= 0;
spawnLocBiter = EUDCreateVariables(1)
_IGVA([spawnLocBiter], lambda: [0])
# (Line 5) var spawnLocOrc 		= 0;
spawnLocOrc = EUDCreateVariables(1)
_IGVA([spawnLocOrc], lambda: [0])
# (Line 6) var spawnLocLamia 		= 0;
spawnLocLamia = EUDCreateVariables(1)
_IGVA([spawnLocLamia], lambda: [0])
# (Line 7) var spawnLocFang 		= 0;
spawnLocFang = EUDCreateVariables(1)
_IGVA([spawnLocFang], lambda: [0])
# (Line 8) var spawnLocOger 		= 0;
spawnLocOger = EUDCreateVariables(1)
_IGVA([spawnLocOger], lambda: [0])
# (Line 9) var spawnLocSkeleton 	= 0;
spawnLocSkeleton = EUDCreateVariables(1)
_IGVA([spawnLocSkeleton], lambda: [0])
# (Line 10) var spawnLocLIch 		= 0;
spawnLocLIch = EUDCreateVariables(1)
_IGVA([spawnLocLIch], lambda: [0])
# (Line 12) const locGoblinX 	= EUDArray(50);
locGoblinX = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 13) const locGoblinY 	= EUDArray(50);
locGoblinY = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 14) const locBiterX 	= EUDArray(50);
locBiterX = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 15) const locBiterY 	= EUDArray(50);
locBiterY = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 16) const locLamiaX 	= EUDArray(50);
locLamiaX = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 17) const locLamiaY 	= EUDArray(50);
locLamiaY = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 18) const locOrcX 		= EUDArray(50);
locOrcX = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 19) const locOrcY 		= EUDArray(50);
locOrcY = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 20) const locFangX 		= EUDArray(50);
locFangX = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 21) const locFangY 		= EUDArray(50);
locFangY = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 22) const locOgerX 		= EUDArray(50);
locOgerX = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 23) const locOgerY 		= EUDArray(50);
locOgerY = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 24) const locSkeletonX 	= EUDArray(50);
locSkeletonX = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 25) const locSkeletonY 	= EUDArray(50);
locSkeletonY = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 26) const locLichX 		= EUDArray(50);
locLichX = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 27) const locLichY	 	= EUDArray(50);
locLichY = _CGFW(lambda: [EUDArray(50)], 1)[0]
# (Line 29) var temp = 0;
temp = EUDCreateVariables(1)
_IGVA([temp], lambda: [0])
# (Line 31) function MobSpawnLocationCheck() {
@EUDTracedFunc
def MobSpawnLocationCheck():
    # (Line 33) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Drone", "Anywhere")'));
    EUDTraceLog(33)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Drone", "Anywhere")')))
    # (Line 34) SetVariables(spawnLocGoblin, temp);
    EUDTraceLog(34)
    SetVariables(spawnLocGoblin, temp)
    # (Line 36) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Broodling", "Anywhere")'));
    EUDTraceLog(36)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Broodling", "Anywhere")')))
    # (Line 37) SetVariables(spawnLocBiter, temp);
    EUDTraceLog(37)
    SetVariables(spawnLocBiter, temp)
    # (Line 39) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Zergling", "Anywhere")'));
    EUDTraceLog(39)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Zergling", "Anywhere")')))
    # (Line 40) SetVariables(spawnLocOrc, temp);
    EUDTraceLog(40)
    SetVariables(spawnLocOrc, temp)
    # (Line 42) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Hydralisk", "Anywhere")'));
    EUDTraceLog(42)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Hydralisk", "Anywhere")')))
    # (Line 43) SetVariables(spawnLocLamia, temp);
    EUDTraceLog(43)
    SetVariables(spawnLocLamia, temp)
    # (Line 45) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Zerg Defiler", "Anywhere")'));
    EUDTraceLog(45)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Zerg Defiler", "Anywhere")')))
    # (Line 46) SetVariables(spawnLocFang, temp);
    EUDTraceLog(46)
    SetVariables(spawnLocFang, temp)
    # (Line 48) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Devouring One (Zergling)", "Anywhere")'));
    EUDTraceLog(48)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Devouring One (Zergling)", "Anywhere")')))
    # (Line 49) SetVariables(spawnLocOger, temp);
    EUDTraceLog(49)
    SetVariables(spawnLocOger, temp)
    # (Line 51) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Protoss Zealot", "Anywhere")'));
    EUDTraceLog(51)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Protoss Zealot", "Anywhere")')))
    # (Line 52) SetVariables(spawnLocSkeleton, temp);
    EUDTraceLog(52)
    SetVariables(spawnLocSkeleton, temp)
    # (Line 54) temp = EUDBinaryMax(py_eval('lambda x: Bring(P7, AtLeast, x, "Protoss High Templar", "Anywhere")'));
    EUDTraceLog(54)
    temp << (EUDBinaryMax(eval('lambda x: Bring(P7, AtLeast, x, "Protoss High Templar", "Anywhere")')))
    # (Line 55) SetVariables(spawnLocLIch, temp);
    EUDTraceLog(55)
    SetVariables(spawnLocLIch, temp)
    # (Line 56) setloc("temp", 0, 0);
    EUDTraceLog(56)
    f_setloc("temp", 0, 0)
    # (Line 58) for(var i = 0; i < spawnLocGoblin; i++) {
    EUDTraceLog(58)
    i = EUDVariable()
    i << (0)
    _t1 = EUDWhile()
    EUDTraceLog(58)
    if _t1(i >= spawnLocGoblin, neg=True):
        def _t2():
            EUDTraceLog(58)
            i.__iadd__(1)
        # (Line 59) if(Bring(P7, Exactly, 0, "Zerg Drone", "Anywhere")) break;
        _t3 = EUDIf()
        EUDTraceLog(59)
        if _t3(Bring(P7, Exactly, 0, "Zerg Drone", "Anywhere")):
            EUDTraceLog(59)
            EUDBreak()
            # (Line 60) MoveLocation("temp", "Zerg Drone", P7, "Anywhere");
        EUDEndIf()
        # (Line 61) RemoveUnitAt(1, "Zerg Drone", "temp", P7);
        EUDTraceLog(60)
        DoActions(MoveLocation("temp", "Zerg Drone", P7, "Anywhere"))
        # (Line 62) var loc = EPD(0x58DC4C) + $L("temp") * 5;
        EUDTraceLog(61)
        DoActions(RemoveUnitAt(1, "Zerg Drone", "temp", P7))
        EUDTraceLog(62)
        loc = EUDVariable()
        loc << (EPD(0x58DC4C) + GetLocationIndex("temp") * 5)
        # (Line 63) locGoblinX[i] = dwread_epd(loc + 0);
        EUDTraceLog(63)
        _ARRW(locGoblinX, i) << (f_dwread_epd(loc + 0))
        # (Line 64) locGoblinY[i] = dwread_epd(loc + 1);
        EUDTraceLog(64)
        _ARRW(locGoblinY, i) << (f_dwread_epd(loc + 1))
        # (Line 65) setcurpl(0);
        EUDTraceLog(65)
        f_setcurpl(0)
        # (Line 67) }
        # (Line 173) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
