## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const goblinHP = 10;
goblinHP = _CGFW(lambda: [10], 1)[0]
# (Line 2) const goblinDmg = 3;
goblinDmg = _CGFW(lambda: [3], 1)[0]
# (Line 3) const goblinAtkSpeed = 40;
goblinAtkSpeed = _CGFW(lambda: [40], 1)[0]
# (Line 4) const goblinSpeed = 650;
goblinSpeed = _CGFW(lambda: [650], 1)[0]
# (Line 5) const goblinExp = 10;
goblinExp = _CGFW(lambda: [10], 1)[0]
# (Line 6) const goblinGold = 10;
goblinGold = _CGFW(lambda: [10], 1)[0]
# (Line 8) const biterSpeed = 670;
biterSpeed = _CGFW(lambda: [670], 1)[0]
# (Line 9) const biterExp = 20;
biterExp = _CGFW(lambda: [20], 1)[0]
# (Line 10) const biterGold = 20;
biterGold = _CGFW(lambda: [20], 1)[0]
# (Line 12) function SetMaxHP(unit:TrgUnit, hp);
# (Line 14) function SetInfo() {
@EUDTracedFunc
def SetInfo():
    # (Line 16) SetMemoryEPD(EPD(0x6C9F0C), SetTo, goblinSpeed);
    # (Line 17) SetMemoryXEPD(EPD(0x6C9C82), SetTo, goblinSpeed << 16, 0xFFFF0000);
    EUDTraceLog(16)
    DoActions(SetMemoryEPD(EPD(0x6C9F0C), SetTo, goblinSpeed))
    # (Line 18) SetMaxHP("Zerg Drone", goblinHP);
    EUDTraceLog(17)
    DoActions(SetMemoryXEPD(EPD(0x6C9C82), SetTo, _LSH(goblinSpeed,16), 0xFFFF0000))
    EUDTraceLog(18)
    SetMaxHP("Zerg Drone", goblinHP)
    # (Line 19) SetMemoryXEPD(EPD(0x656F06), SetTo, goblinDmg << 16, 0xFFFF0000);
    # (Line 20) SetMemoryXEPD(EPD(0x656FE3), SetTo, goblinAtkSpeed << 24, 0xFF000000);
    EUDTraceLog(19)
    DoActions(SetMemoryXEPD(EPD(0x656F06), SetTo, _LSH(goblinDmg,16), 0xFFFF0000))
    # (Line 23) SetMaxHP("Zerg Broodling", goblinHP);
    EUDTraceLog(20)
    DoActions(SetMemoryXEPD(EPD(0x656FE3), SetTo, _LSH(goblinAtkSpeed,24), 0xFF000000))
    EUDTraceLog(23)
    SetMaxHP("Zerg Broodling", goblinHP)
    # (Line 25) }
    # (Line 27) function SetMaxHP(unit:TrgUnit, hp) {

@EUDTracedTypedFunc([TrgUnit, None])
def SetMaxHP(unit, hp):
    # (Line 28) SetMemory(0x662350 + unit * 4, SetTo, hp);
    # (Line 29) }
    EUDTraceLog(28)
    DoActions(SetMemory(0x662350 + unit * 4, SetTo, hp))
