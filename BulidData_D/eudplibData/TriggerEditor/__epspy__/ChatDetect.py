## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 2) import User.Info as user;
from User import Info as user
# (Line 4) function ChatDetect(cp) {
@EUDTracedFunc
def ChatDetect(cp):
    # (Line 5) if(v.chat[cp] == 0) return;
    _t1 = EUDIf()
    EUDTraceLog(5)
    if _t1(v.chat[cp] == 0):
        EUDTraceLog(5)
        EUDReturn()
        # (Line 6) else if(v.chat[cp] == 3) v.s.print("\x07isAlive \x04: ", user.isAlive[cp]);
    _t2 = EUDElseIf()
    EUDTraceLog(6)
    if _t2(v.chat[cp] == 3):
        EUDTraceLog(6)
        v.s.print("\x07isAlive \x04: ", user.isAlive[cp])
        # (Line 7) else if(v.chat[cp] == 4) v.s.print("\x07inConv \x04: ", user.inConv[cp]);
    _t3 = EUDElseIf()
    EUDTraceLog(7)
    if _t3(v.chat[cp] == 4):
        EUDTraceLog(7)
        v.s.print("\x07inConv \x04: ", user.inConv[cp])
        # (Line 8) else if(v.chat[cp] == 5) v.s.print("\x07started \x04: ", v.started[cp]);
    _t4 = EUDElseIf()
    EUDTraceLog(8)
    if _t4(v.chat[cp] == 5):
        EUDTraceLog(8)
        v.s.print("\x07started \x04: ", v.started[cp])
        # (Line 9) else if(v.chat[cp] == 6) user.exp[cp] += 10;
    _t5 = EUDElseIf()
    EUDTraceLog(9)
    if _t5(v.chat[cp] == 6):
        EUDTraceLog(9)
        _ARRW(user.exp, cp).__iadd__(10)
        # (Line 10) }
    EUDEndIf()
