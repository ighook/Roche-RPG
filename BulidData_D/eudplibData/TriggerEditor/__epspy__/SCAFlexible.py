## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import SCA.Data as n0;
from SCA import Data as n0
# (Line 3) const ws = Db(2528);//workspace
ws = _CGFW(lambda: [Db(2528)], 1)[0]
# (Line 4) const EntryPointLength = 8;//EntryPointLength
EntryPointLength = _CGFW(lambda: [8], 1)[0]
# (Line 5) const SpaceLength = 300;//DataBufferSize
SpaceLength = _CGFW(lambda: [300], 1)[0]
# (Line 6) const ObjectCount = 4;//ObjectCount
ObjectCount = _CGFW(lambda: [4], 1)[0]
# (Line 8) function Init(){
@EUDTracedFunc
def Init():
    # (Line 9) MPQAddFile('SCARCHIVEMAPCODE', py_open('scakeyfile', 'rb').read());
    EUDTraceLog(9)
    MPQAddFile('SCARCHIVEMAPCODE', open('scakeyfile', 'rb').read())
    # (Line 10) MPQAddFile('SCARCHIVEDATA', py_open('scadatafile', 'rb').read());
    EUDTraceLog(10)
    MPQAddFile('SCARCHIVEDATA', open('scadatafile', 'rb').read())
    # (Line 12) dwwrite_epd(EPD(ws) + 0, 1685628776);
    EUDTraceLog(12)
    f_dwwrite_epd(EPD(ws) + 0, 1685628776)
    # (Line 13) dwwrite_epd(EPD(ws) + 1, 1835243690);
    EUDTraceLog(13)
    f_dwwrite_epd(EPD(ws) + 1, 1835243690)
    # (Line 14) dwwrite_epd(EPD(ws) + 2, 3316698172);
    EUDTraceLog(14)
    f_dwwrite_epd(EPD(ws) + 2, 3316698172)
    # (Line 15) dwwrite_epd(EPD(ws) + 3, 2946104519);
    EUDTraceLog(15)
    f_dwwrite_epd(EPD(ws) + 3, 2946104519)
    # (Line 16) dwwrite_epd(EPD(ws) + 4, 3579045751);
    EUDTraceLog(16)
    f_dwwrite_epd(EPD(ws) + 4, 3579045751)
    # (Line 17) dwwrite_epd(EPD(ws) + 5, 2291179255);
    EUDTraceLog(17)
    f_dwwrite_epd(EPD(ws) + 5, 2291179255)
    # (Line 18) dwwrite_epd(EPD(ws) + 6, 2787191351);
    EUDTraceLog(18)
    f_dwwrite_epd(EPD(ws) + 6, 2787191351)
    # (Line 19) dwwrite_epd(EPD(ws) + 7, 2479588178);
    EUDTraceLog(19)
    f_dwwrite_epd(EPD(ws) + 7, 2479588178)
    # (Line 21) }
    # (Line 24) function Exec(){

@EUDTracedFunc
def Exec():
    # (Line 25) Init();
    EUDTraceLog(25)
    Init()
    # (Line 26) }
    # (Line 29) function ResetValue(tagNum, index){

@EUDTracedFunc
def ResetValue(tagNum, index):
    # (Line 30) const cp = getcurpl();
    EUDTraceLog(30)
    cp = f_getcurpl()
    # (Line 31) switch(tagNum){
    EUDTraceLog(31)
    EUDSwitch(tagNum)
    # (Line 32) case 0:
    _t1 = EUDSwitchCase()
    # (Line 33) {
    EUDTraceLog(32)
    if _t1(0):
        # (Line 34) n0.level[cp] = 0;
        EUDTraceLog(34)
        _ARRW(n0.level, cp) << (0)
        # (Line 35) break;
        EUDTraceLog(35)
        EUDBreak()
        # (Line 36) }
        # (Line 37) case 1:
    _t2 = EUDSwitchCase()
    # (Line 38) {
    EUDTraceLog(37)
    if _t2(1):
        # (Line 39) const alen = n0.userSlot.length / 8;
        EUDTraceLog(39)
        alen = n0.userSlot.length // 8
        # (Line 40) for(var i = 0 ; i < alen; i++){
        EUDTraceLog(40)
        i = EUDVariable()
        i << (0)
        _t3 = EUDWhile()
        EUDTraceLog(40)
        if _t3(i >= alen, neg=True):
            def _t4():
                EUDTraceLog(40)
                i.__iadd__(1)
            # (Line 41) n0.userSlot[alen * cp + i] = 0;
            EUDTraceLog(41)
            _ARRW(n0.userSlot, alen * cp + i) << (0)
            # (Line 42) }
            # (Line 43) break;
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        EUDTraceLog(43)
        EUDBreak()
        # (Line 44) }
        # (Line 45) case 2:
    _t5 = EUDSwitchCase()
    # (Line 46) {
    EUDTraceLog(45)
    if _t5(2):
        # (Line 47) n0.exp[cp] = 0;
        EUDTraceLog(47)
        _ARRW(n0.exp, cp) << (0)
        # (Line 48) break;
        EUDTraceLog(48)
        EUDBreak()
        # (Line 49) }
        # (Line 50) case 3:
    _t6 = EUDSwitchCase()
    # (Line 51) {
    EUDTraceLog(50)
    if _t6(3):
        # (Line 52) n0.gold[cp] = 0;
        EUDTraceLog(52)
        _ARRW(n0.gold, cp) << (0)
        # (Line 53) break;
        EUDTraceLog(53)
        EUDBreak()
        # (Line 54) }
        # (Line 55) }
    # (Line 56) }
    EUDEndSwitch()
    # (Line 59) function SaveValue(tagNum, Value, index){

@EUDTracedFunc
def SaveValue(tagNum, Value, index):
    # (Line 60) const cp = getcurpl();
    EUDTraceLog(60)
    cp = f_getcurpl()
    # (Line 61) switch(tagNum){
    EUDTraceLog(61)
    EUDSwitch(tagNum)
    # (Line 62) case 0:
    _t1 = EUDSwitchCase()
    # (Line 63) {
    EUDTraceLog(62)
    if _t1(0):
        # (Line 64) n0.level[cp] = Value;
        EUDTraceLog(64)
        _ARRW(n0.level, cp) << (Value)
        # (Line 65) break;
        EUDTraceLog(65)
        EUDBreak()
        # (Line 66) }
        # (Line 67) case 1:
    _t2 = EUDSwitchCase()
    # (Line 68) {
    EUDTraceLog(67)
    if _t2(1):
        # (Line 69) const alen = n0.userSlot.length / 8;
        EUDTraceLog(69)
        alen = n0.userSlot.length // 8
        # (Line 70) n0.userSlot[alen * cp + index] = Value;
        EUDTraceLog(70)
        _ARRW(n0.userSlot, alen * cp + index) << (Value)
        # (Line 71) break;
        EUDTraceLog(71)
        EUDBreak()
        # (Line 72) }
        # (Line 73) case 2:
    _t3 = EUDSwitchCase()
    # (Line 74) {
    EUDTraceLog(73)
    if _t3(2):
        # (Line 75) n0.exp[cp] = Value;
        EUDTraceLog(75)
        _ARRW(n0.exp, cp) << (Value)
        # (Line 76) break;
        EUDTraceLog(76)
        EUDBreak()
        # (Line 77) }
        # (Line 78) case 3:
    _t4 = EUDSwitchCase()
    # (Line 79) {
    EUDTraceLog(78)
    if _t4(3):
        # (Line 80) n0.gold[cp] = Value;
        EUDTraceLog(80)
        _ARRW(n0.gold, cp) << (Value)
        # (Line 81) break;
        EUDTraceLog(81)
        EUDBreak()
        # (Line 82) }
        # (Line 83) }
    # (Line 84) }
    EUDEndSwitch()
    # (Line 87) function SaveDataWriteValue(tagNum, BaseAddress, index){

@EUDTracedFunc
def SaveDataWriteValue(tagNum, BaseAddress, index):
    # (Line 88) const cp = getcurpl();
    EUDTraceLog(88)
    cp = f_getcurpl()
    # (Line 89) switch(tagNum){
    EUDTraceLog(89)
    EUDSwitch(tagNum)
    # (Line 90) case 0:
    _t1 = EUDSwitchCase()
    # (Line 91) {
    EUDTraceLog(90)
    if _t1(0):
        # (Line 92) const objValue = n0.level[cp];
        EUDTraceLog(92)
        objValue = n0.level[cp]
        # (Line 93) if(objValue != 0){
        _t2 = EUDIf()
        EUDTraceLog(93)
        if _t2(objValue == 0, neg=True):
            # (Line 94) if (objValue > 0xFFFF){
            _t3 = EUDIf()
            EUDTraceLog(94)
            if _t3(objValue <= 0xFFFF, neg=True):
                # (Line 95) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                EUDTraceLog(95)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 96) index++;
                EUDTraceLog(96)
                index.__iadd__(1)
                # (Line 97) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                EUDTraceLog(97)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 98) index++;
                EUDTraceLog(98)
                index.__iadd__(1)
                # (Line 99) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                EUDTraceLog(99)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 100) index++;
                EUDTraceLog(100)
                index.__iadd__(1)
                # (Line 101) }else{
            if EUDElse()():
                # (Line 102) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                EUDTraceLog(102)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 103) index++;
                EUDTraceLog(103)
                index.__iadd__(1)
                # (Line 104) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                EUDTraceLog(104)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 105) index++;
                EUDTraceLog(105)
                index.__iadd__(1)
                # (Line 106) }
                # (Line 107) }
            EUDEndIf()
            # (Line 108) }
        EUDEndIf()
        # (Line 109) break;
        EUDTraceLog(109)
        EUDBreak()
        # (Line 110) case 1:
    _t4 = EUDSwitchCase()
    # (Line 111) {
    EUDTraceLog(110)
    if _t4(1):
        # (Line 112) const alen = n0.userSlot.length / 8;
        EUDTraceLog(112)
        alen = n0.userSlot.length // 8
        # (Line 113) for(var i = 0 ; i < alen ; i ++){
        EUDTraceLog(113)
        i = EUDVariable()
        i << (0)
        _t5 = EUDWhile()
        EUDTraceLog(113)
        if _t5(i >= alen, neg=True):
            def _t6():
                EUDTraceLog(113)
                i.__iadd__(1)
            # (Line 114) const objValue = n0.userSlot[alen * cp + i];
            EUDTraceLog(114)
            objValue = n0.userSlot[alen * cp + i]
            # (Line 115) if(objValue != 0){
            _t7 = EUDIf()
            EUDTraceLog(115)
            if _t7(objValue == 0, neg=True):
                # (Line 116) if (objValue > 0xFFFF){
                _t8 = EUDIf()
                EUDTraceLog(116)
                if _t8(objValue <= 0xFFFF, neg=True):
                    # (Line 117) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    EUDTraceLog(117)
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x3000 + tagNum)
                    # (Line 118) index++;
                    EUDTraceLog(118)
                    index.__iadd__(1)
                    # (Line 119) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    EUDTraceLog(119)
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, i)
                    # (Line 120) index++;
                    EUDTraceLog(120)
                    index.__iadd__(1)
                    # (Line 121) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    EUDTraceLog(121)
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                    # (Line 122) index++;
                    EUDTraceLog(122)
                    index.__iadd__(1)
                    # (Line 123) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    EUDTraceLog(123)
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                    # (Line 124) index++;
                    EUDTraceLog(124)
                    index.__iadd__(1)
                    # (Line 125) }else{
                if EUDElse()():
                    # (Line 126) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    EUDTraceLog(126)
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x4000 + tagNum)
                    # (Line 127) index++;
                    EUDTraceLog(127)
                    index.__iadd__(1)
                    # (Line 128) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    EUDTraceLog(128)
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, i)
                    # (Line 129) index++;
                    EUDTraceLog(129)
                    index.__iadd__(1)
                    # (Line 130) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    EUDTraceLog(130)
                    f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                    # (Line 131) index++;
                    EUDTraceLog(131)
                    index.__iadd__(1)
                    # (Line 132) }
                    # (Line 133) }
                EUDEndIf()
                # (Line 134) }
            EUDEndIf()
            # (Line 135) }
            EUDSetContinuePoint()
            _t6()
        EUDEndWhile()
        # (Line 136) break;
        EUDTraceLog(136)
        EUDBreak()
        # (Line 137) case 2:
    _t9 = EUDSwitchCase()
    # (Line 138) {
    EUDTraceLog(137)
    if _t9(2):
        # (Line 139) const objValue = n0.exp[cp];
        EUDTraceLog(139)
        objValue = n0.exp[cp]
        # (Line 140) if(objValue != 0){
        _t10 = EUDIf()
        EUDTraceLog(140)
        if _t10(objValue == 0, neg=True):
            # (Line 141) if (objValue > 0xFFFF){
            _t11 = EUDIf()
            EUDTraceLog(141)
            if _t11(objValue <= 0xFFFF, neg=True):
                # (Line 142) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                EUDTraceLog(142)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 143) index++;
                EUDTraceLog(143)
                index.__iadd__(1)
                # (Line 144) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                EUDTraceLog(144)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 145) index++;
                EUDTraceLog(145)
                index.__iadd__(1)
                # (Line 146) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                EUDTraceLog(146)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 147) index++;
                EUDTraceLog(147)
                index.__iadd__(1)
                # (Line 148) }else{
            if EUDElse()():
                # (Line 149) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                EUDTraceLog(149)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 150) index++;
                EUDTraceLog(150)
                index.__iadd__(1)
                # (Line 151) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                EUDTraceLog(151)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 152) index++;
                EUDTraceLog(152)
                index.__iadd__(1)
                # (Line 153) }
                # (Line 154) }
            EUDEndIf()
            # (Line 155) }
        EUDEndIf()
        # (Line 156) break;
        EUDTraceLog(156)
        EUDBreak()
        # (Line 157) case 3:
    _t12 = EUDSwitchCase()
    # (Line 158) {
    EUDTraceLog(157)
    if _t12(3):
        # (Line 159) const objValue = n0.gold[cp];
        EUDTraceLog(159)
        objValue = n0.gold[cp]
        # (Line 160) if(objValue != 0){
        _t13 = EUDIf()
        EUDTraceLog(160)
        if _t13(objValue == 0, neg=True):
            # (Line 161) if (objValue > 0xFFFF){
            _t14 = EUDIf()
            EUDTraceLog(161)
            if _t14(objValue <= 0xFFFF, neg=True):
                # (Line 162) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                EUDTraceLog(162)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x1000 + tagNum)
                # (Line 163) index++;
                EUDTraceLog(163)
                index.__iadd__(1)
                # (Line 164) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                EUDTraceLog(164)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue // 0x10000)
                # (Line 165) index++;
                EUDTraceLog(165)
                index.__iadd__(1)
                # (Line 166) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                EUDTraceLog(166)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue % 0x10000)
                # (Line 167) index++;
                EUDTraceLog(167)
                index.__iadd__(1)
                # (Line 168) }else{
            if EUDElse()():
                # (Line 169) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                EUDTraceLog(169)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, 0x2000 + tagNum)
                # (Line 170) index++;
                EUDTraceLog(170)
                index.__iadd__(1)
                # (Line 171) wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                EUDTraceLog(171)
                f_wwrite_epd(BaseAddress + index // 2, (index % 2) * 2, objValue)
                # (Line 172) index++;
                EUDTraceLog(172)
                index.__iadd__(1)
                # (Line 173) }
                # (Line 174) }
            EUDEndIf()
            # (Line 175) }
        EUDEndIf()
        # (Line 176) break;
        EUDTraceLog(176)
        EUDBreak()
        # (Line 177) }
    # (Line 179) return index;
    EUDEndSwitch()
    EUDTraceLog(179)
    EUDReturn(index)
    # (Line 180) }
    # (Line 183) function LoadDataReadValue(BaseAddress, i){

@EUDTracedFunc
def LoadDataReadValue(BaseAddress, i):
    # (Line 184) const indicator = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
    EUDTraceLog(184)
    indicator = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
    # (Line 186) if (indicator != 0){
    _t1 = EUDIf()
    EUDTraceLog(186)
    if _t1(indicator == 0, neg=True):
        # (Line 187) const spec = indicator / 0x1000;
        EUDTraceLog(187)
        spec = indicator // 0x1000
        # (Line 188) const ObjNum = indicator % 0x1000;
        EUDTraceLog(188)
        ObjNum = indicator % 0x1000
        # (Line 189) var vindex = 0;
        EUDTraceLog(189)
        vindex = EUDVariable()
        vindex << (0)
        # (Line 190) var value = 0;
        EUDTraceLog(190)
        value = EUDVariable()
        value << (0)
        # (Line 191) if (spec == 1){
        _t2 = EUDIf()
        EUDTraceLog(191)
        if _t2(spec == 1):
            # (Line 193) i++;
            EUDTraceLog(193)
            i.__iadd__(1)
            # (Line 194) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(194)
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 195) i++;
            EUDTraceLog(195)
            i.__iadd__(1)
            # (Line 196) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(196)
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 197) value = value1 * 0x10000 + value2;
            EUDTraceLog(197)
            value << (value1 * 0x10000 + value2)
            # (Line 198) }else if (spec == 2){
        _t3 = EUDElseIf()
        EUDTraceLog(198)
        if _t3(spec == 2):
            # (Line 200) i++;
            EUDTraceLog(200)
            i.__iadd__(1)
            # (Line 201) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(201)
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 202) }else if (spec == 3){
        _t4 = EUDElseIf()
        EUDTraceLog(202)
        if _t4(spec == 3):
            # (Line 204) i++;
            EUDTraceLog(204)
            i.__iadd__(1)
            # (Line 205) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(205)
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 206) i++;
            EUDTraceLog(206)
            i.__iadd__(1)
            # (Line 207) const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(207)
            value1 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 208) i++;
            EUDTraceLog(208)
            i.__iadd__(1)
            # (Line 209) const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(209)
            value2 = f_wread_epd(BaseAddress + i // 2, (i % 2) * 2)
            # (Line 210) value = value1 * 0x10000 + value2;
            EUDTraceLog(210)
            value << (value1 * 0x10000 + value2)
            # (Line 211) }else if (spec == 4){
        _t5 = EUDElseIf()
        EUDTraceLog(211)
        if _t5(spec == 4):
            # (Line 213) i++;
            EUDTraceLog(213)
            i.__iadd__(1)
            # (Line 214) vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(214)
            vindex << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 215) i++;
            EUDTraceLog(215)
            i.__iadd__(1)
            # (Line 216) value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
            EUDTraceLog(216)
            value << (f_wread_epd(BaseAddress + i // 2, (i % 2) * 2))
            # (Line 217) }
            # (Line 218) SaveValue(ObjNum, value, vindex);
        EUDEndIf()
        EUDTraceLog(218)
        SaveValue(ObjNum, value, vindex)
        # (Line 219) }
        # (Line 220) return i;
    EUDEndIf()
    EUDTraceLog(220)
    EUDReturn(i)
    # (Line 221) }
