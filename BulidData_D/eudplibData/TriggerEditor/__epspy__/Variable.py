## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) const version = 1;
version = _CGFW(lambda: [1], 1)[0]
# (Line 4) const KeyC = 1;
KeyC = _CGFW(lambda: [1], 1)[0]
# (Line 5) const KeyI = 2;
KeyI = _CGFW(lambda: [2], 1)[0]
# (Line 6) const KeySave = 64;
KeySave = _CGFW(lambda: [64], 1)[0]
# (Line 7) const KeyZ = 128;
KeyZ = _CGFW(lambda: [128], 1)[0]
# (Line 8) const KeyX = 256;
KeyX = _CGFW(lambda: [256], 1)[0]
# (Line 9) const KeyWideCheck = 512;
KeyWideCheck = _CGFW(lambda: [512], 1)[0]
# (Line 11) const defaultHP = 170;
defaultHP = _CGFW(lambda: [170], 1)[0]
# (Line 12) const defaultMP = 100;
defaultMP = _CGFW(lambda: [100], 1)[0]
# (Line 13) const defaultDmg = 5;
defaultDmg = _CGFW(lambda: [5], 1)[0]
# (Line 15) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 16) const display = StringBuffer(1000);
display = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 18) const started = PVariable();
started = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const chat = PVariable();
chat = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const unitNum = [0, 1, 16, 20, 99, 100];
unitNum = _CGFW(lambda: [_ARR(FlattenList([0, 1, 16, 20, 99, 100]))], 1)[0]
# (Line 21) const locNum = [9, 10, 11, 12, 13, 14];
locNum = _CGFW(lambda: [_ARR(FlattenList([9, 10, 11, 12, 13, 14]))], 1)[0]
# (Line 22) const textRefresh = PVariable();
textRefresh = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const isMouseMoved = PVariable();
isMouseMoved = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const _prevMouseX = PVariable();
_prevMouseX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const _prevMouseY = PVariable();
_prevMouseY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) const _mouseX = PVariable();
_mouseX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 29) const _mouseY = PVariable();
_mouseY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 30) const mouseX = PVariable();
mouseX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 31) const mouseY = PVariable();
mouseY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 33) const key = PVariable();
key = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 34) const numberKey = PVariable();
numberKey = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 35) const mouse = PVariable();
mouse = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 36) const numKey = PVariable();
numKey = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 39) const screen = PVariable();
screen = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 40) const KeyD = PVariable();
KeyD = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 41) const KeyF = PVariable();
KeyF = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 42) const KeyG = PVariable();
KeyG = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 43) const KeyH = PVariable();
KeyH = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 44) const chatAddr = PVariable();
chatAddr = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 45) const chatPattern = PVariable();
chatPattern = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 46) const chatLen = PVariable();
chatLen = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 48) const screenMode = PVariable();
screenMode = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 50) const globalData = EUDArray(20);
globalData = _CGFW(lambda: [EUDArray(20)], 1)[0]
# (Line 52) const increaseDmg = [
# (Line 53) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 54) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 55) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 56) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 57) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 58) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 59) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 60) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 61) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 62) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
increaseDmg = _CGFW(lambda: [_ARR(FlattenList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))], 1)[0]
# (Line 64) const increaseHP = [
# (Line 65) 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
# (Line 66) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 67) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 68) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 69) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 70) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 71) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 72) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 73) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
# (Line 74) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
increaseHP = _CGFW(lambda: [_ARR(FlattenList([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))], 1)[0]
# (Line 76) const maxExp = [
# (Line 77) 10, 20, 30, 30, 40, 50, 60, 70, 80, 100,
# (Line 78) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 79) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 80) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 81) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 82) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 83) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 84) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 85) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 86) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
# (Line 87) 100, 100, 100, 100, 100, 100, 100, 100, 100, 100];
maxExp = _CGFW(lambda: [_ARR(FlattenList([10, 20, 30, 30, 40, 50, 60, 70, 80, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]))], 1)[0]
