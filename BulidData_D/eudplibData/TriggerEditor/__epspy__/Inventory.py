## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System as sys;
import System as sys
# (Line 2) import Variable as v;
import Variable as v
# (Line 3) import User.Info as user;
from User import Info as user
# (Line 4) import Option as option;
import Option as option
# (Line 5) import Screen as screen;
import Screen as screen
# (Line 6) import Item.Manager as item;
from Item import Manager as item
# (Line 7) import Equip as equip;
import Equip as equip
# (Line 9) object Inven { var type; var index; var lv; var name; var amount; var explain; var value1; var value2; };
class Inven(EUDStruct):
    # (Line 11) const inven = EUDArray(24 * 8);
    _fields_ = [
        'type',
        'index',
        'lv',
        'name',
        'amount',
        'explain',
        'value1',
        'value2',
    ]

inven = _CGFW(lambda: [EUDArray(24 * 8)], 1)[0]
# (Line 12) const page = PVariable();
page = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const curPage = PVariable();
curPage = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const color = EUDArray(6);
color = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 15) const mousePosition = PVariable();
mousePosition = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const type = PVariable();
type = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 18) const showType = PVariable();
showType = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const showIndex = PVariable();
showIndex = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const showLevel = PVariable();
showLevel = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const showName = PVariable();
showName = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const showAmount = PVariable();
showAmount = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const showThrowAmount = PVariable();
showThrowAmount = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 24) const showValue1 = PVariable();
showValue1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const showValue2 = PVariable();
showValue2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) function Open();
# (Line 28) function Close();
# (Line 29) function Back();
# (Line 30) function PageCheck();
# (Line 31) function SelectSlot(slot);
# (Line 32) function Sort();
# (Line 33) function ChangeSelectColorMain();
# (Line 34) function ChangeSelectColorPotion();
# (Line 35) function ChangeSelectColorEquip();
# (Line 36) function ClickMinus1();
# (Line 37) function ClickMinus10();
# (Line 38) function ClickPlus1();
# (Line 39) function ClickPlus10();
# (Line 40) function RegisterPotion();
# (Line 42) function Inventory() {
@EUDTracedFunc
def Inventory():
    # (Line 43) const cp = getcurpl();
    EUDTraceLog(43)
    cp = f_getcurpl()
    # (Line 44) const t = 24 * cp;
    EUDTraceLog(44)
    t = 24 * cp
    # (Line 46) if(v.key[cp] == v.KeyI) {
    _t1 = EUDIf()
    EUDTraceLog(46)
    if _t1(v.key[cp] == v.KeyI):
        # (Line 47) if(user.openedInven[cp] == 0) Open();
        _t2 = EUDIf()
        EUDTraceLog(47)
        if _t2(user.openedInven[cp] == 0):
            EUDTraceLog(47)
            Open()
            # (Line 48) else Close();
        if EUDElse()():
            EUDTraceLog(48)
            Close()
            # (Line 49) }
        EUDEndIf()
        # (Line 51) if(user.openedInven[cp] == 1) {
    EUDEndIf()
    _t3 = EUDIf()
    EUDTraceLog(51)
    if _t3(user.openedInven[cp] == 1):
        # (Line 52) if(type[cp] == 0) {
        _t4 = EUDIf()
        EUDTraceLog(52)
        if _t4(type[cp] == 0):
            # (Line 53) if(v.textRefresh[cp] == 1) {
            _t5 = EUDIf()
            EUDTraceLog(53)
            if _t5(v.textRefresh[cp] == 1):
                # (Line 54) v.textRefresh[cp] = 0;
                EUDTraceLog(54)
                _ARRW(v.textRefresh, cp) << (0)
                # (Line 55) const inven1 = Inven.cast(inven[t + page[cp] + 0]);
                EUDTraceLog(55)
                inven1 = Inven.cast(inven[t + page[cp] + 0])
                # (Line 56) const inven2 = Inven.cast(inven[t + page[cp] + 1]);
                EUDTraceLog(56)
                inven2 = Inven.cast(inven[t + page[cp] + 1])
                # (Line 57) const inven3 = Inven.cast(inven[t + page[cp] + 2]);
                EUDTraceLog(57)
                inven3 = Inven.cast(inven[t + page[cp] + 2])
                # (Line 58) const inven4 = Inven.cast(inven[t + page[cp] + 3]);
                EUDTraceLog(58)
                inven4 = Inven.cast(inven[t + page[cp] + 3])
                # (Line 59) const inven5 = Inven.cast(inven[t + page[cp] + 4]);
                EUDTraceLog(59)
                inven5 = Inven.cast(inven[t + page[cp] + 4])
                # (Line 60) const inven6 = Inven.cast(inven[t + page[cp] + 5]);
                EUDTraceLog(60)
                inven6 = Inven.cast(inven[t + page[cp] + 5])
                # (Line 61) v.display.insert(0);
                EUDTraceLog(61)
                v.display.insert(0)
                # (Line 62) v.display.append("   \x07▶ \x04인벤토리\n");
                EUDTraceLog(62)
                v.display.append("   \x07▶ \x04인벤토리\n")
                # (Line 63) v.display.append("    \x19·  \x16(1)  ", ptr2s(color[0]), ptr2s(inven1.name), "  \x19[", inven1.amount, " 개]\n");
                EUDTraceLog(63)
                v.display.append("    \x19·  \x16(1)  ", ptr2s(color[0]), ptr2s(inven1.name), "  \x19[", inven1.amount, " 개]\n")
                # (Line 64) v.display.append("    \x19·  \x16(2)  ", ptr2s(color[1]), ptr2s(inven2.name), "  \x19[", inven2.amount, " 개]\n");
                EUDTraceLog(64)
                v.display.append("    \x19·  \x16(2)  ", ptr2s(color[1]), ptr2s(inven2.name), "  \x19[", inven2.amount, " 개]\n")
                # (Line 65) v.display.append("    \x19·  \x16(3)  ", ptr2s(color[2]), ptr2s(inven3.name), "  \x19[", inven3.amount, " 개]\n");
                EUDTraceLog(65)
                v.display.append("    \x19·  \x16(3)  ", ptr2s(color[2]), ptr2s(inven3.name), "  \x19[", inven3.amount, " 개]\n")
                # (Line 66) v.display.append("    \x19·  \x16(4)  ", ptr2s(color[3]), ptr2s(inven4.name), "  \x19[", inven4.amount, " 개]\n");
                EUDTraceLog(66)
                v.display.append("    \x19·  \x16(4)  ", ptr2s(color[3]), ptr2s(inven4.name), "  \x19[", inven4.amount, " 개]\n")
                # (Line 67) v.display.append("    \x19·  \x16(5)  ", ptr2s(color[4]), ptr2s(inven5.name), "  \x19[", inven5.amount, " 개]\n");
                EUDTraceLog(67)
                v.display.append("    \x19·  \x16(5)  ", ptr2s(color[4]), ptr2s(inven5.name), "  \x19[", inven5.amount, " 개]\n")
                # (Line 68) v.display.append("    \x19·  \x16(6)  ", ptr2s(color[5]), ptr2s(inven6.name), "  \x19[", inven6.amount, " 개]\n");
                EUDTraceLog(68)
                v.display.append("    \x19·  \x16(6)  ", ptr2s(color[5]), ptr2s(inven6.name), "  \x19[", inven6.amount, " 개]\n")
                # (Line 69) if(curPage[cp] == 1) v.display.append("    \x19·  \x0e[1] \x1e[2] \x1e[3] \x1e[4]    \x04", user.gold[cp], " \x17G\n");
                _t6 = EUDIf()
                EUDTraceLog(69)
                if _t6(curPage[cp] == 1):
                    EUDTraceLog(69)
                    v.display.append("    \x19·  \x0e[1] \x1e[2] \x1e[3] \x1e[4]    \x04", user.gold[cp], " \x17G\n")
                    # (Line 70) else if(curPage[cp] == 2) v.display.append("    \x19·  \x1e[1] \x0e[2] \x1e[3] \x1e[4]    \x04", user.gold[cp], " \x17G\n");
                _t7 = EUDElseIf()
                EUDTraceLog(70)
                if _t7(curPage[cp] == 2):
                    EUDTraceLog(70)
                    v.display.append("    \x19·  \x1e[1] \x0e[2] \x1e[3] \x1e[4]    \x04", user.gold[cp], " \x17G\n")
                    # (Line 71) else if(curPage[cp] == 3) v.display.append("    \x19·  \x1e[1] \x1e[2] \x0e[3] \x1e[4]    \x04", user.gold[cp], " \x17G\n");
                _t8 = EUDElseIf()
                EUDTraceLog(71)
                if _t8(curPage[cp] == 3):
                    EUDTraceLog(71)
                    v.display.append("    \x19·  \x1e[1] \x1e[2] \x0e[3] \x1e[4]    \x04", user.gold[cp], " \x17G\n")
                    # (Line 72) else if(curPage[cp] == 4) v.display.append("    \x19·  \x1e[1] \x1e[2] \x1e[3] \x0e[4]    \x04", user.gold[cp], " \x17G\n");
                _t9 = EUDElseIf()
                EUDTraceLog(72)
                if _t9(curPage[cp] == 4):
                    EUDTraceLog(72)
                    v.display.append("    \x19·  \x1e[1] \x1e[2] \x1e[3] \x0e[4]    \x04", user.gold[cp], " \x17G\n")
                    # (Line 73) }
                EUDEndIf()
                # (Line 74) v.display.DisplayAt(0);
            EUDEndIf()
            EUDTraceLog(74)
            v.display.DisplayAt(0)
            # (Line 75) ChangeSelectColorMain();
            EUDTraceLog(75)
            ChangeSelectColorMain()
            # (Line 76) if(v.key[cp] == 128 || v.key[cp] == 256) {
            _t10 = EUDIf()
            EUDTraceLog(76)
            if _t10(EUDSCOr()(v.key[cp] == 128)(v.key[cp] == 256)()):
                # (Line 77) if(v.key[cp] == 128 && curPage[cp] > 1) {
                _t11 = EUDIf()
                EUDTraceLog(77)
                if _t11(EUDSCAnd()(v.key[cp] == 128)(curPage[cp] <= 1, neg=True)()):
                    # (Line 78) curPage[cp] -= 1;
                    EUDTraceLog(78)
                    _ARRW(curPage, cp).__isub__(1)
                    # (Line 79) PageCheck();
                    EUDTraceLog(79)
                    PageCheck()
                    # (Line 80) }
                    # (Line 81) else if(v.key[cp] == 256 && curPage[cp] < 4) {
                _t12 = EUDElseIf()
                EUDTraceLog(81)
                if _t12(EUDSCAnd()(v.key[cp] == 256)(curPage[cp] >= 4, neg=True)()):
                    # (Line 82) curPage[cp] += 1;
                    EUDTraceLog(82)
                    _ARRW(curPage, cp).__iadd__(1)
                    # (Line 83) PageCheck();
                    EUDTraceLog(83)
                    PageCheck()
                    # (Line 84) }
                    # (Line 85) }
                EUDEndIf()
                # (Line 87) if(v.numberKey[cp] > 0 && v.numberKey[cp] < 7) {
            EUDEndIf()
            _t13 = EUDIf()
            EUDTraceLog(87)
            if _t13(EUDSCAnd()(v.numberKey[cp] <= 0, neg=True)(v.numberKey[cp] >= 7, neg=True)()):
                # (Line 88) SelectSlot(v.numberKey[cp]);
                EUDTraceLog(88)
                SelectSlot(v.numberKey[cp])
                # (Line 89) }
                # (Line 91) if(v.mouse[cp] == 1) {
            EUDEndIf()
            _t14 = EUDIf()
            EUDTraceLog(91)
            if _t14(v.mouse[cp] == 1):
                # (Line 92) if(v.mouseX[cp] < 20 || v.mouseX[cp] > 242) return;
                _t15 = EUDIf()
                EUDTraceLog(92)
                if _t15(EUDSCOr()(v.mouseX[cp] >= 20, neg=True)(v.mouseX[cp] <= 242, neg=True)()):
                    EUDTraceLog(92)
                    EUDReturn()
                    # (Line 93) if(v.mouseY[cp] < 128 || v.mouseY[cp] > 220) return;
                EUDEndIf()
                _t16 = EUDIf()
                EUDTraceLog(93)
                if _t16(EUDSCOr()(v.mouseY[cp] >= 128, neg=True)(v.mouseY[cp] <= 220, neg=True)()):
                    EUDTraceLog(93)
                    EUDReturn()
                    # (Line 94) for(var i = 0; i < 5; i++) {
                EUDEndIf()
                EUDTraceLog(94)
                i = EUDVariable()
                i << (0)
                _t17 = EUDWhile()
                EUDTraceLog(94)
                if _t17(i >= 5, neg=True):
                    def _t18():
                        EUDTraceLog(94)
                        i.__iadd__(1)
                    # (Line 95) if(sys.clickedLine(i + 1)) {
                    _t19 = EUDIf()
                    EUDTraceLog(95)
                    if _t19(sys.f_clickedLine(i + 1)):
                        # (Line 96) SelectSlot(i + 1);
                        EUDTraceLog(96)
                        SelectSlot(i + 1)
                        # (Line 97) break;
                        EUDTraceLog(97)
                        EUDBreak()
                        # (Line 98) }
                        # (Line 99) }
                    EUDEndIf()
                    # (Line 100) }
                    EUDSetContinuePoint()
                    _t18()
                EUDEndWhile()
                # (Line 101) }
            EUDEndIf()
            # (Line 102) else if(type[cp] == 1) {
        _t20 = EUDElseIf()
        EUDTraceLog(102)
        if _t20(type[cp] == 1):
            # (Line 103) if(v.textRefresh[cp] == 1) {
            _t21 = EUDIf()
            EUDTraceLog(103)
            if _t21(v.textRefresh[cp] == 1):
                # (Line 104) v.textRefresh[cp] = 0;
                EUDTraceLog(104)
                _ARRW(v.textRefresh, cp) << (0)
                # (Line 105) v.display.insert(0);
                EUDTraceLog(105)
                v.display.insert(0)
                # (Line 106) v.display.append("   \x07▶ \x04인벤토리\n");
                EUDTraceLog(106)
                v.display.append("   \x07▶ \x04인벤토리\n")
                # (Line 107) v.display.append("    \x19·  \x1d이름 \x04: ", ptr2s(showName[cp]), "\n");
                EUDTraceLog(107)
                v.display.append("    \x19·  \x1d이름 \x04: ", ptr2s(showName[cp]), "\n")
                # (Line 108) v.display.append("    \x19·  \x1d보유 \x04: ", showAmount[cp], "   \x1d회복량 \x04: ", showValue1[cp],"\n");
                EUDTraceLog(108)
                v.display.append("    \x19·  \x1d보유 \x04: ", showAmount[cp], "   \x1d회복량 \x04: ", showValue1[cp], "\n")
                # (Line 109) v.display.append("    \x19·  \x1d버릴 개수 \x04: \x04", showThrowAmount[cp], "\n    \x19·  \x15▼\x04-1   \x15▼\x04-10   \x15▲\x04+1   \x15▲\x04+10\n");
                EUDTraceLog(109)
                v.display.append("    \x19·  \x1d버릴 개수 \x04: \x04", showThrowAmount[cp], "\n    \x19·  \x15▼\x04-1   \x15▼\x04-10   \x15▲\x04+1   \x15▲\x04+10\n")
                # (Line 110) v.display.append("    \x19·  ", ptr2s(color[0]), "\x04(1)  ", ptr2s(color[0]), "단축키 등록\n");
                EUDTraceLog(110)
                v.display.append("    \x19·  ", ptr2s(color[0]), "\x04(1)  ", ptr2s(color[0]), "단축키 등록\n")
                # (Line 111) v.display.append("    \x19·  ", ptr2s(color[1]), "\x04(2)  ", ptr2s(color[1]), "버리기\n");
                EUDTraceLog(111)
                v.display.append("    \x19·  ", ptr2s(color[1]), "\x04(2)  ", ptr2s(color[1]), "버리기\n")
                # (Line 112) v.display.append("    \x19·  ", ptr2s(color[2]), "\x04(3)  ", ptr2s(color[2]), "뒤로 가기");
                EUDTraceLog(112)
                v.display.append("    \x19·  ", ptr2s(color[2]), "\x04(3)  ", ptr2s(color[2]), "뒤로 가기")
                # (Line 113) }
                # (Line 114) v.display.DisplayAt(0);
            EUDEndIf()
            EUDTraceLog(114)
            v.display.DisplayAt(0)
            # (Line 115) ChangeSelectColorPotion();
            EUDTraceLog(115)
            ChangeSelectColorPotion()
            # (Line 116) if(v.mouse[cp] == 1) {
            _t22 = EUDIf()
            EUDTraceLog(116)
            if _t22(v.mouse[cp] == 1):
                # (Line 117) if(v.mouseY[cp] < 174 || v.mouseY[cp] > 238) return;
                _t23 = EUDIf()
                EUDTraceLog(117)
                if _t23(EUDSCOr()(v.mouseY[cp] >= 174, neg=True)(v.mouseY[cp] <= 238, neg=True)()):
                    EUDTraceLog(117)
                    EUDReturn()
                    # (Line 118) if(v.mouseX[cp] < 35) return;
                EUDEndIf()
                _t24 = EUDIf()
                EUDTraceLog(118)
                if _t24(v.mouseX[cp] >= 35, neg=True):
                    EUDTraceLog(118)
                    EUDReturn()
                    # (Line 119) if(sys.clickedLine(4)) {
                EUDEndIf()
                _t25 = EUDIf()
                EUDTraceLog(119)
                if _t25(sys.f_clickedLine(4)):
                    # (Line 120) if(v.mouseX[cp] > 187) return;
                    _t26 = EUDIf()
                    EUDTraceLog(120)
                    if _t26(v.mouseX[cp] <= 187, neg=True):
                        EUDTraceLog(120)
                        EUDReturn()
                        # (Line 121) if(v.mouseX[cp] <= 60) ClickMinus1();
                    EUDEndIf()
                    _t27 = EUDIf()
                    EUDTraceLog(121)
                    if _t27(v.mouseX[cp] <= 60):
                        EUDTraceLog(121)
                        ClickMinus1()
                        # (Line 122) else if(v.mouseX[cp] >= 71 && v.mouseX[cp] <= 105) ClickMinus10();
                    _t28 = EUDElseIf()
                    EUDTraceLog(122)
                    if _t28(EUDSCAnd()(v.mouseX[cp] >= 71)(v.mouseX[cp] <= 105)()):
                        EUDTraceLog(122)
                        ClickMinus10()
                        # (Line 123) else if(v.mouseX[cp] >= 115 && v.mouseX[cp] <= 141) ClickPlus1();
                    _t29 = EUDElseIf()
                    EUDTraceLog(123)
                    if _t29(EUDSCAnd()(v.mouseX[cp] >= 115)(v.mouseX[cp] <= 141)()):
                        EUDTraceLog(123)
                        ClickPlus1()
                        # (Line 124) else if(v.mouseX[cp] >= 153 && v.mouseX[cp] <= 187) ClickPlus10();
                    _t30 = EUDElseIf()
                    EUDTraceLog(124)
                    if _t30(EUDSCAnd()(v.mouseX[cp] >= 153)(v.mouseX[cp] <= 187)()):
                        EUDTraceLog(124)
                        ClickPlus10()
                        # (Line 125) }
                    EUDEndIf()
                    # (Line 126) else if(sys.clickedLine(5)) RegisterPotion();
                _t31 = EUDElseIf()
                EUDTraceLog(126)
                if _t31(sys.f_clickedLine(5)):
                    EUDTraceLog(126)
                    RegisterPotion()
                    # (Line 127) else if(sys.clickedLine(6)) {
                _t32 = EUDElseIf()
                EUDTraceLog(127)
                if _t32(sys.f_clickedLine(6)):
                    # (Line 128) if(v.mouseX[cp] <= 91) {
                    _t33 = EUDIf()
                    EUDTraceLog(128)
                    if _t33(v.mouseX[cp] <= 91):
                        # (Line 129) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 130) if(showAmount[cp] >= showThrowAmount[cp]) {
                        EUDTraceLog(129)
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        _t34 = EUDIf()
                        EUDTraceLog(130)
                        if _t34(showAmount[cp] >= showThrowAmount[cp]):
                            # (Line 131) item.RemoveItem(showType[cp], showIndex[cp], showThrowAmount[cp]);
                            EUDTraceLog(131)
                            item.RemoveItem(showType[cp], showIndex[cp], showThrowAmount[cp])
                            # (Line 132) showAmount[cp] -= showThrowAmount[cp];
                            EUDTraceLog(132)
                            _ARRW(showAmount, cp).__isub__(showThrowAmount[cp])
                            # (Line 133) if(showThrowAmount[cp] > showAmount[cp]) showThrowAmount[cp] = showAmount[cp];
                            _t35 = EUDIf()
                            EUDTraceLog(133)
                            if _t35(showThrowAmount[cp] <= showAmount[cp], neg=True):
                                EUDTraceLog(133)
                                _ARRW(showThrowAmount, cp) << (showAmount[cp])
                                # (Line 134) if(showIndex[cp] <= 15 && showIndex[cp] == user.useHPPtn[cp]) user.remainHPPtn[cp] = showAmount[cp];
                            EUDEndIf()
                            _t36 = EUDIf()
                            EUDTraceLog(134)
                            if _t36(EUDSCAnd()(showIndex[cp] <= 15)(showIndex[cp] == user.useHPPtn[cp])()):
                                EUDTraceLog(134)
                                _ARRW(user.remainHPPtn, cp) << (showAmount[cp])
                                # (Line 135) else if(showIndex[cp] == user.useMPPtn[cp]) user.remainMPPtn[cp] = showAmount[cp];
                            _t37 = EUDElseIf()
                            EUDTraceLog(135)
                            if _t37(showIndex[cp] == user.useMPPtn[cp]):
                                EUDTraceLog(135)
                                _ARRW(user.remainMPPtn, cp) << (showAmount[cp])
                                # (Line 136) if(showAmount[cp] == 0) Back();
                            EUDEndIf()
                            _t38 = EUDIf()
                            EUDTraceLog(136)
                            if _t38(showAmount[cp] == 0):
                                EUDTraceLog(136)
                                Back()
                                # (Line 137) v.textRefresh[cp] = 1;
                            EUDEndIf()
                            EUDTraceLog(137)
                            _ARRW(v.textRefresh, cp) << (1)
                            # (Line 138) }
                            # (Line 139) }
                        EUDEndIf()
                        # (Line 140) }
                    EUDEndIf()
                    # (Line 141) else if(sys.clickedLine(7)) {
                _t39 = EUDElseIf()
                EUDTraceLog(141)
                if _t39(sys.f_clickedLine(7)):
                    # (Line 142) if(v.mouseX[cp] <= 105) {
                    _t40 = EUDIf()
                    EUDTraceLog(142)
                    if _t40(v.mouseX[cp] <= 105):
                        # (Line 143) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 144) Back();
                        EUDTraceLog(143)
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        EUDTraceLog(144)
                        Back()
                        # (Line 145) }
                        # (Line 146) }
                    EUDEndIf()
                    # (Line 147) }
                EUDEndIf()
                # (Line 148) }
            EUDEndIf()
            # (Line 149) else if(type[cp] == 2 || type[cp] == 3) {
        _t41 = EUDElseIf()
        EUDTraceLog(149)
        if _t41(EUDSCOr()(type[cp] == 2)(type[cp] == 3)()):
            # (Line 150) if(v.textRefresh[cp] == 1) {
            _t42 = EUDIf()
            EUDTraceLog(150)
            if _t42(v.textRefresh[cp] == 1):
                # (Line 151) v.textRefresh[cp] = 0;
                EUDTraceLog(151)
                _ARRW(v.textRefresh, cp) << (0)
                # (Line 152) v.display.insert(0);
                EUDTraceLog(152)
                v.display.insert(0)
                # (Line 153) v.display.append("   \x07▶ \x04인벤토리\n");
                EUDTraceLog(153)
                v.display.append("   \x07▶ \x04인벤토리\n")
                # (Line 154) v.display.append("    \x19·  \x1d이름 \x04: ", ptr2s(showName[cp]), "\n");
                EUDTraceLog(154)
                v.display.append("    \x19·  \x1d이름 \x04: ", ptr2s(showName[cp]), "\n")
                # (Line 155) v.display.append("    \x19·  \x1d보유 \x04: ", showAmount[cp], " 개\n");
                EUDTraceLog(155)
                v.display.append("    \x19·  \x1d보유 \x04: ", showAmount[cp], " 개\n")
                # (Line 156) v.display.append("    \x19·  \x1d레벨 제한 \x04: ", showLevel[cp], "\n");
                EUDTraceLog(156)
                v.display.append("    \x19·  \x1d레벨 제한 \x04: ", showLevel[cp], "\n")
                # (Line 157) if(showType[cp] == 2)
                _t43 = EUDIf()
                EUDTraceLog(157)
                if _t43(showType[cp] == 2):
                    # (Line 158) v.display.append("    \x19·  \x1d공격력 \x04: ", showValue1[cp], "\n");
                    EUDTraceLog(158)
                    v.display.append("    \x19·  \x1d공격력 \x04: ", showValue1[cp], "\n")
                    # (Line 159) else if(showType[cp] == 3)
                _t44 = EUDElseIf()
                EUDTraceLog(159)
                if _t44(showType[cp] == 3):
                    # (Line 160) v.display.append("    \x19·  \x1d방어력 \x04: ", showValue1[cp], "\n");
                    EUDTraceLog(160)
                    v.display.append("    \x19·  \x1d방어력 \x04: ", showValue1[cp], "\n")
                    # (Line 161) v.display.append("    \x19·  ", ptr2s(color[0]), "\x04(1)  ", ptr2s(color[0]), "장착하기\n");
                EUDEndIf()
                EUDTraceLog(161)
                v.display.append("    \x19·  ", ptr2s(color[0]), "\x04(1)  ", ptr2s(color[0]), "장착하기\n")
                # (Line 162) v.display.append("    \x19·  ", ptr2s(color[1]), "\x04(2)  ", ptr2s(color[1]), "버리기\n");
                EUDTraceLog(162)
                v.display.append("    \x19·  ", ptr2s(color[1]), "\x04(2)  ", ptr2s(color[1]), "버리기\n")
                # (Line 163) v.display.append("    \x19·  ", ptr2s(color[2]), "\x04(3)  ", ptr2s(color[2]), "뒤로 가기");
                EUDTraceLog(163)
                v.display.append("    \x19·  ", ptr2s(color[2]), "\x04(3)  ", ptr2s(color[2]), "뒤로 가기")
                # (Line 164) }
                # (Line 165) v.display.DisplayAt(0);
            EUDEndIf()
            EUDTraceLog(165)
            v.display.DisplayAt(0)
            # (Line 166) ChangeSelectColorEquip();
            EUDTraceLog(166)
            ChangeSelectColorEquip()
            # (Line 167) if(v.mouse[cp] == 1) {
            _t45 = EUDIf()
            EUDTraceLog(167)
            if _t45(v.mouse[cp] == 1):
                # (Line 168) if(v.mouseY[cp] < 174 || v.mouseY[cp] > 238) return;
                _t46 = EUDIf()
                EUDTraceLog(168)
                if _t46(EUDSCOr()(v.mouseY[cp] >= 174, neg=True)(v.mouseY[cp] <= 238, neg=True)()):
                    EUDTraceLog(168)
                    EUDReturn()
                    # (Line 169) if(v.mouseX[cp] < 35) return;
                EUDEndIf()
                _t47 = EUDIf()
                EUDTraceLog(169)
                if _t47(v.mouseX[cp] >= 35, neg=True):
                    EUDTraceLog(169)
                    EUDReturn()
                    # (Line 170) if(sys.clickedLine(5)) {
                EUDEndIf()
                _t48 = EUDIf()
                EUDTraceLog(170)
                if _t48(sys.f_clickedLine(5)):
                    # (Line 171) if(v.mouseX[cp] <= 116) {
                    _t49 = EUDIf()
                    EUDTraceLog(171)
                    if _t49(v.mouseX[cp] <= 116):
                        # (Line 172) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 173) if(showType[cp] == 2) equip.EquipWeapon(showIndex[cp]);
                        EUDTraceLog(172)
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        _t50 = EUDIf()
                        EUDTraceLog(173)
                        if _t50(showType[cp] == 2):
                            EUDTraceLog(173)
                            equip.EquipWeapon(showIndex[cp])
                            # (Line 174) else if(showType[cp] == 3) equip.EquipArmor(showIndex[cp]);
                        _t51 = EUDElseIf()
                        EUDTraceLog(174)
                        if _t51(showType[cp] == 3):
                            EUDTraceLog(174)
                            equip.EquipArmor(showIndex[cp])
                            # (Line 175) Back();
                        EUDEndIf()
                        EUDTraceLog(175)
                        Back()
                        # (Line 176) }
                        # (Line 177) }
                    EUDEndIf()
                    # (Line 178) else if(sys.clickedLine(6)) {
                _t52 = EUDElseIf()
                EUDTraceLog(178)
                if _t52(sys.f_clickedLine(6)):
                    # (Line 179) if(v.mouseX[cp] <= 91) {
                    _t53 = EUDIf()
                    EUDTraceLog(179)
                    if _t53(v.mouseX[cp] <= 91):
                        # (Line 180) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 181) item.RemoveItem(showType[cp], showIndex[cp], showThrowAmount[cp]);
                        EUDTraceLog(180)
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        EUDTraceLog(181)
                        item.RemoveItem(showType[cp], showIndex[cp], showThrowAmount[cp])
                        # (Line 182) showAmount[cp] -= 1;
                        EUDTraceLog(182)
                        _ARRW(showAmount, cp).__isub__(1)
                        # (Line 183) if(showAmount[cp] == 0) Back();
                        _t54 = EUDIf()
                        EUDTraceLog(183)
                        if _t54(showAmount[cp] == 0):
                            EUDTraceLog(183)
                            Back()
                            # (Line 184) v.textRefresh[cp] = 1;
                        EUDEndIf()
                        EUDTraceLog(184)
                        _ARRW(v.textRefresh, cp) << (1)
                        # (Line 185) }
                        # (Line 186) }
                    EUDEndIf()
                    # (Line 187) else if(sys.clickedLine(7)) {
                _t55 = EUDElseIf()
                EUDTraceLog(187)
                if _t55(sys.f_clickedLine(7)):
                    # (Line 188) if(v.mouseX[cp] <= 105) {
                    _t56 = EUDIf()
                    EUDTraceLog(188)
                    if _t56(v.mouseX[cp] <= 105):
                        # (Line 189) PlayWAV("staredit\\wav\\click2.ogg");
                        # (Line 190) Back();
                        EUDTraceLog(189)
                        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
                        EUDTraceLog(190)
                        Back()
                        # (Line 191) }
                        # (Line 192) }
                    EUDEndIf()
                    # (Line 193) }
                EUDEndIf()
                # (Line 194) }
            EUDEndIf()
            # (Line 195) }
        EUDEndIf()
        # (Line 196) }
    EUDEndIf()
    # (Line 198) function ResetInven() {

@EUDTracedFunc
def ResetInven():
    # (Line 199) const cp = getcurpl();
    EUDTraceLog(199)
    cp = f_getcurpl()
    # (Line 200) const t = cp * 24;
    EUDTraceLog(200)
    t = cp * 24
    # (Line 201) for(var i = 0; i < 24; i++) {
    EUDTraceLog(201)
    i = EUDVariable()
    i << (0)
    _t1 = EUDWhile()
    EUDTraceLog(201)
    if _t1(i >= 24, neg=True):
        def _t2():
            EUDTraceLog(201)
            i.__iadd__(1)
        # (Line 202) inven[t + i] = Inven.alloc();
        EUDTraceLog(202)
        _ARRW(inven, t + i) << (Inven.alloc())
        # (Line 203) const c = Inven.cast(inven[t + i]);
        EUDTraceLog(203)
        c = Inven.cast(inven[t + i])
        # (Line 204) c.name = Db("\x05Empty");
        EUDTraceLog(204)
        _ATTW(c, 'name') << (Db("\x05Empty"))
        # (Line 205) }
        # (Line 206) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 208) function Open() {

@EUDTracedFunc
def Open():
    # (Line 209) const cp = getcurpl();
    EUDTraceLog(209)
    cp = f_getcurpl()
    # (Line 210) if(user.inConv[cp] == 1) return;
    _t1 = EUDIf()
    EUDTraceLog(210)
    if _t1(user.inConv[cp] == 1):
        EUDTraceLog(210)
        EUDReturn()
        # (Line 211) sys.CloseWindow();
    EUDEndIf()
    EUDTraceLog(211)
    sys.CloseWindow()
    # (Line 212) if(IsUserCP()) {
    _t2 = EUDIf()
    EUDTraceLog(212)
    if _t2(IsUserCP()):
        # (Line 213) for(var i = 0; i < 6; i++)
        EUDTraceLog(213)
        i = EUDVariable()
        i << (0)
        _t3 = EUDWhile()
        EUDTraceLog(213)
        if _t3(i >= 6, neg=True):
            def _t4():
                EUDTraceLog(213)
                i.__iadd__(1)
            # (Line 214) color[i] = Db("\x05");
            EUDTraceLog(214)
            _ARRW(color, i) << (Db("\x05"))
            # (Line 215) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 216) if(option.keepPage[cp] == 0) curPage[cp] = 1;
    EUDEndIf()
    _t5 = EUDIf()
    EUDTraceLog(216)
    if _t5(option.keepPage[cp] == 0):
        EUDTraceLog(216)
        _ARRW(curPage, cp) << (1)
        # (Line 217) PageCheck();
    EUDEndIf()
    EUDTraceLog(217)
    PageCheck()
    # (Line 218) user.openedInven[cp] = 1;
    EUDTraceLog(218)
    _ARRW(user.openedInven, cp) << (1)
    # (Line 219) screen.SetLight(25);
    EUDTraceLog(219)
    screen.SetLight(25)
    # (Line 220) v.textRefresh[cp] = 1;
    EUDTraceLog(220)
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 221) }
    # (Line 223) function Close() {

@EUDTracedFunc
def Close():
    # (Line 224) const cp = getcurpl();
    EUDTraceLog(224)
    cp = f_getcurpl()
    # (Line 225) user.openedInven[cp] = 0;
    EUDTraceLog(225)
    _ARRW(user.openedInven, cp) << (0)
    # (Line 226) type[cp] = 0;
    EUDTraceLog(226)
    _ARRW(type, cp) << (0)
    # (Line 227) screen.SetLight(31);
    EUDTraceLog(227)
    screen.SetLight(31)
    # (Line 228) sys.TextClear();
    EUDTraceLog(228)
    sys.TextClear()
    # (Line 229) }
    # (Line 231) function SelectSlot(slot) {

@EUDTracedFunc
def SelectSlot(slot):
    # (Line 232) const cp = getcurpl();
    EUDTraceLog(232)
    cp = f_getcurpl()
    # (Line 233) const t = 24 * cp;
    EUDTraceLog(233)
    t = 24 * cp
    # (Line 234) const c = Inven.cast(inven[t + page[cp] + slot - 1]);
    EUDTraceLog(234)
    c = Inven.cast(inven[t + page[cp] + slot - 1])
    # (Line 235) if(c.type == 0) return;
    _t1 = EUDIf()
    EUDTraceLog(235)
    if _t1(c.type == 0):
        EUDTraceLog(235)
        EUDReturn()
        # (Line 236) sys.TextClear();
    EUDEndIf()
    EUDTraceLog(236)
    sys.TextClear()
    # (Line 237) if(c.type == 1) {
    _t2 = EUDIf()
    EUDTraceLog(237)
    if _t2(c.type == 1):
        # (Line 238) showValue1[cp] = c.value1;
        EUDTraceLog(238)
        _ARRW(showValue1, cp) << (c.value1)
        # (Line 239) }
        # (Line 240) else if(c.type == 2) {
    _t3 = EUDElseIf()
    EUDTraceLog(240)
    if _t3(c.type == 2):
        # (Line 241) showLevel[cp] = c.lv;
        EUDTraceLog(241)
        _ARRW(showLevel, cp) << (c.lv)
        # (Line 242) }
        # (Line 243) else if(c.type == 3) {
    _t4 = EUDElseIf()
    EUDTraceLog(243)
    if _t4(c.type == 3):
        # (Line 244) showValue1[cp] = c.value1;
        EUDTraceLog(244)
        _ARRW(showValue1, cp) << (c.value1)
        # (Line 245) showLevel[cp] = c.lv;
        EUDTraceLog(245)
        _ARRW(showLevel, cp) << (c.lv)
        # (Line 246) }
        # (Line 247) showType[cp] = c.type;
    EUDEndIf()
    EUDTraceLog(247)
    _ARRW(showType, cp) << (c.type)
    # (Line 248) showIndex[cp] = c.index;
    EUDTraceLog(248)
    _ARRW(showIndex, cp) << (c.index)
    # (Line 249) showName[cp] = c.name;
    EUDTraceLog(249)
    _ARRW(showName, cp) << (c.name)
    # (Line 250) showAmount[cp] = c.amount;
    EUDTraceLog(250)
    _ARRW(showAmount, cp) << (c.amount)
    # (Line 251) showThrowAmount[cp] = 1;
    EUDTraceLog(251)
    _ARRW(showThrowAmount, cp) << (1)
    # (Line 252) type[cp] = c.type;
    EUDTraceLog(252)
    _ARRW(type, cp) << (c.type)
    # (Line 253) v.textRefresh[cp] = 1;
    EUDTraceLog(253)
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 254) if(IsUserCP()) {
    _t5 = EUDIf()
    EUDTraceLog(254)
    if _t5(IsUserCP()):
        # (Line 255) for(var i = 0; i < 6; i++) {
        EUDTraceLog(255)
        i = EUDVariable()
        i << (0)
        _t6 = EUDWhile()
        EUDTraceLog(255)
        if _t6(i >= 6, neg=True):
            def _t7():
                EUDTraceLog(255)
                i.__iadd__(1)
            # (Line 256) color[i] = Db("\x05");
            EUDTraceLog(256)
            _ARRW(color, i) << (Db("\x05"))
            # (Line 257) }
            # (Line 258) }
            EUDSetContinuePoint()
            _t7()
        EUDEndWhile()
        # (Line 259) PlayWAV("staredit\\wav\\click2.ogg");
    EUDEndIf()
    # (Line 260) }
    EUDTraceLog(259)
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    # (Line 262) function Back() {

@EUDTracedFunc
def Back():
    # (Line 263) const cp = getcurpl();
    EUDTraceLog(263)
    cp = f_getcurpl()
    # (Line 264) showType[cp] = 0;
    EUDTraceLog(264)
    _ARRW(showType, cp) << (0)
    # (Line 265) showIndex[cp] = 0;
    EUDTraceLog(265)
    _ARRW(showIndex, cp) << (0)
    # (Line 266) showName[cp] = 0;
    EUDTraceLog(266)
    _ARRW(showName, cp) << (0)
    # (Line 267) showAmount[cp] = 0;
    EUDTraceLog(267)
    _ARRW(showAmount, cp) << (0)
    # (Line 268) showThrowAmount[cp] = 0;
    EUDTraceLog(268)
    _ARRW(showThrowAmount, cp) << (0)
    # (Line 269) type[cp] = 0;
    EUDTraceLog(269)
    _ARRW(type, cp) << (0)
    # (Line 270) sys.TextClear();
    EUDTraceLog(270)
    sys.TextClear()
    # (Line 271) v.textRefresh[cp] = 0;
    EUDTraceLog(271)
    _ARRW(v.textRefresh, cp) << (0)
    # (Line 272) }
    # (Line 274) function PageCheck() {

@EUDTracedFunc
def PageCheck():
    # (Line 275) const cp = getcurpl();
    EUDTraceLog(275)
    cp = f_getcurpl()
    # (Line 276) if(curPage[cp] == 1) page[cp] = 0;
    _t1 = EUDIf()
    EUDTraceLog(276)
    if _t1(curPage[cp] == 1):
        EUDTraceLog(276)
        _ARRW(page, cp) << (0)
        # (Line 277) else if(curPage[cp] == 2) page[cp] = 6;
    _t2 = EUDElseIf()
    EUDTraceLog(277)
    if _t2(curPage[cp] == 2):
        EUDTraceLog(277)
        _ARRW(page, cp) << (6)
        # (Line 278) else if(curPage[cp] == 3) page[cp] = 12;
    _t3 = EUDElseIf()
    EUDTraceLog(278)
    if _t3(curPage[cp] == 3):
        EUDTraceLog(278)
        _ARRW(page, cp) << (12)
        # (Line 279) else if(curPage[cp] == 4) page[cp] = 18;
    _t4 = EUDElseIf()
    EUDTraceLog(279)
    if _t4(curPage[cp] == 4):
        EUDTraceLog(279)
        _ARRW(page, cp) << (18)
        # (Line 280) mousePosition[cp] = 0;
    EUDEndIf()
    EUDTraceLog(280)
    _ARRW(mousePosition, cp) << (0)
    # (Line 281) v.textRefresh[cp] = 1;
    EUDTraceLog(281)
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 282) }
    # (Line 284) function Sort() {

@EUDTracedFunc
def Sort():
    # (Line 285) const cp = getcurpl();
    EUDTraceLog(285)
    cp = f_getcurpl()
    # (Line 286) const t = 24 * cp;
    EUDTraceLog(286)
    t = 24 * cp
    # (Line 287) for(var i = 0; i < 23; i++) {
    EUDTraceLog(287)
    i = EUDVariable()
    i << (0)
    _t1 = EUDWhile()
    EUDTraceLog(287)
    if _t1(i >= 23, neg=True):
        def _t2():
            EUDTraceLog(287)
            i.__iadd__(1)
        # (Line 288) const c1 = Inven.cast(inven[t + i]);
        EUDTraceLog(288)
        c1 = Inven.cast(inven[t + i])
        # (Line 289) const c2 = Inven.cast(inven[t + i + 1]);
        EUDTraceLog(289)
        c2 = Inven.cast(inven[t + i + 1])
        # (Line 290) if(c1.type == 0 && c2.type != 0) {
        _t3 = EUDIf()
        EUDTraceLog(290)
        if _t3(EUDSCAnd()(c1.type == 0)(c2.type == 0, neg=True)()):
            # (Line 291) c1.type = c2.type;
            EUDTraceLog(291)
            _ATTW(c1, 'type') << (c2.type)
            # (Line 292) c1.index = c2.index;
            EUDTraceLog(292)
            _ATTW(c1, 'index') << (c2.index)
            # (Line 293) c1.name = c2.name;
            EUDTraceLog(293)
            _ATTW(c1, 'name') << (c2.name)
            # (Line 294) c1.amount = c2.amount;
            EUDTraceLog(294)
            _ATTW(c1, 'amount') << (c2.amount)
            # (Line 295) c1.explain = c2.explain;
            EUDTraceLog(295)
            _ATTW(c1, 'explain') << (c2.explain)
            # (Line 296) c1.value1 = c2.value1;
            EUDTraceLog(296)
            _ATTW(c1, 'value1') << (c2.value1)
            # (Line 297) c2.type = 0;
            EUDTraceLog(297)
            _ATTW(c2, 'type') << (0)
            # (Line 298) c2.index = 0;
            EUDTraceLog(298)
            _ATTW(c2, 'index') << (0)
            # (Line 299) c2.name = Db("\x05Empty");
            EUDTraceLog(299)
            _ATTW(c2, 'name') << (Db("\x05Empty"))
            # (Line 300) c2.amount = 0;
            EUDTraceLog(300)
            _ATTW(c2, 'amount') << (0)
            # (Line 301) c2.explain = 0;
            EUDTraceLog(301)
            _ATTW(c2, 'explain') << (0)
            # (Line 302) c2.value1 = 0;
            EUDTraceLog(302)
            _ATTW(c2, 'value1') << (0)
            # (Line 303) }
            # (Line 304) }
        EUDEndIf()
        # (Line 305) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 307) function ChangeSelectColorMain() {

@EUDTracedFunc
def ChangeSelectColorMain():
    # (Line 308) const cp = getcurpl();
    EUDTraceLog(308)
    cp = f_getcurpl()
    # (Line 309) if(IsUserCP()) {
    _t1 = EUDIf()
    EUDTraceLog(309)
    if _t1(IsUserCP()):
        # (Line 310) if(v.isMouseMoved[cp] == 1) {
        _t2 = EUDIf()
        EUDTraceLog(310)
        if _t2(v.isMouseMoved[cp] == 1):
            # (Line 311) v.isMouseMoved[cp] = 0;
            EUDTraceLog(311)
            _ARRW(v.isMouseMoved, cp) << (0)
            # (Line 312) var c = 0;
            EUDTraceLog(312)
            c = EUDVariable()
            c << (0)
            # (Line 313) if(v._mouseX[cp] > 20 && v._mouseX[cp] < 242)  {
            _t3 = EUDIf()
            EUDTraceLog(313)
            if _t3(EUDSCAnd()(v._mouseX[cp] <= 20, neg=True)(v._mouseX[cp] >= 242, neg=True)()):
                # (Line 314) c = 1;
                EUDTraceLog(314)
                c << (1)
                # (Line 315) if(v._mouseY[cp] < 128 || v._mouseY[cp] > 222) {
                _t4 = EUDIf()
                EUDTraceLog(315)
                if _t4(EUDSCOr()(v._mouseY[cp] >= 128, neg=True)(v._mouseY[cp] <= 222, neg=True)()):
                    # (Line 316) mousePosition[cp] = 0;
                    EUDTraceLog(316)
                    _ARRW(mousePosition, cp) << (0)
                    # (Line 317) }
                    # (Line 318) }
                EUDEndIf()
                # (Line 319) else mousePosition[cp] = 0;
            if EUDElse()():
                EUDTraceLog(319)
                _ARRW(mousePosition, cp) << (0)
                # (Line 321) for(var i = 0; i < 6; i++) {
            EUDEndIf()
            EUDTraceLog(321)
            i = EUDVariable()
            i << (0)
            _t5 = EUDWhile()
            EUDTraceLog(321)
            if _t5(i >= 6, neg=True):
                def _t6():
                    EUDTraceLog(321)
                    i.__iadd__(1)
                # (Line 322) if(c == 1 && v._mouseY[cp] >= 128 + 16 * i && v._mouseY[cp] <= 142 + 16 * i) {
                _t7 = EUDIf()
                EUDTraceLog(322)
                if _t7(EUDSCAnd()(c == 1)(v._mouseY[cp] >= 128 + 16 * i)(v._mouseY[cp] <= 142 + 16 * i)()):
                    # (Line 323) if(mousePosition[cp] != i + 1) {
                    _t8 = EUDIf()
                    EUDTraceLog(323)
                    if _t8(mousePosition[cp] == i + 1, neg=True):
                        # (Line 324) color[i] = Db("\x17");
                        EUDTraceLog(324)
                        _ARRW(color, i) << (Db("\x17"))
                        # (Line 325) mousePosition[cp] = i + 1;
                        EUDTraceLog(325)
                        _ARRW(mousePosition, cp) << (i + 1)
                        # (Line 326) v.textRefresh[cp] = 1;
                        EUDTraceLog(326)
                        _ARRW(v.textRefresh, cp) << (1)
                        # (Line 327) }
                        # (Line 328) }
                    EUDEndIf()
                    # (Line 329) else {
                if EUDElse()():
                    # (Line 330) if(strcmp(color[i], Db("\x17")) == 0) {
                    _t9 = EUDIf()
                    EUDTraceLog(330)
                    if _t9(f_strcmp(color[i], Db("\x17")) == 0):
                        # (Line 331) color[i] = Db("\x05");
                        EUDTraceLog(331)
                        _ARRW(color, i) << (Db("\x05"))
                        # (Line 332) v.textRefresh[cp] = 1;
                        EUDTraceLog(332)
                        _ARRW(v.textRefresh, cp) << (1)
                        # (Line 333) }
                        # (Line 334) }
                    EUDEndIf()
                    # (Line 335) }
                EUDEndIf()
                # (Line 336) }
                EUDSetContinuePoint()
                _t6()
            EUDEndWhile()
            # (Line 337) }
        EUDEndIf()
        # (Line 338) }
    EUDEndIf()
    # (Line 340) function ChangeSelectColorPotion() {

@EUDTracedFunc
def ChangeSelectColorPotion():
    # (Line 341) const cp = getcurpl();
    EUDTraceLog(341)
    cp = f_getcurpl()
    # (Line 342) if(IsUserCP()) {
    _t1 = EUDIf()
    EUDTraceLog(342)
    if _t1(IsUserCP()):
        # (Line 343) var c = 0;
        EUDTraceLog(343)
        c = EUDVariable()
        c << (0)
        # (Line 344) if(v._mouseX[cp] > 20 && v._mouseX[cp] < 116)  {
        _t2 = EUDIf()
        EUDTraceLog(344)
        if _t2(EUDSCAnd()(v._mouseX[cp] <= 20, neg=True)(v._mouseX[cp] >= 116, neg=True)()):
            # (Line 345) c = 1;
            EUDTraceLog(345)
            c << (1)
            # (Line 346) if(v._mouseY[cp] < 192 || v._mouseY[cp] > 238) {
            _t3 = EUDIf()
            EUDTraceLog(346)
            if _t3(EUDSCOr()(v._mouseY[cp] >= 192, neg=True)(v._mouseY[cp] <= 238, neg=True)()):
                # (Line 347) mousePosition[cp] = 0;
                EUDTraceLog(347)
                _ARRW(mousePosition, cp) << (0)
                # (Line 348) }
                # (Line 349) }
            EUDEndIf()
            # (Line 350) else mousePosition[cp] = 0;
        if EUDElse()():
            EUDTraceLog(350)
            _ARRW(mousePosition, cp) << (0)
            # (Line 352) for(var i = 0; i < 3; i++) {
        EUDEndIf()
        EUDTraceLog(352)
        i = EUDVariable()
        i << (0)
        _t4 = EUDWhile()
        EUDTraceLog(352)
        if _t4(i >= 3, neg=True):
            def _t5():
                EUDTraceLog(352)
                i.__iadd__(1)
            # (Line 353) if(c == 1 && v._mouseY[cp] >= 192 + 16 * i && v._mouseY[cp] <= 206 + 16 * i) {
            _t6 = EUDIf()
            EUDTraceLog(353)
            if _t6(EUDSCAnd()(c == 1)(v._mouseY[cp] >= 192 + 16 * i)(v._mouseY[cp] <= 206 + 16 * i)()):
                # (Line 354) if(mousePosition[cp] != i + 1) {
                _t7 = EUDIf()
                EUDTraceLog(354)
                if _t7(mousePosition[cp] == i + 1, neg=True):
                    # (Line 355) color[i] = Db("\x17");
                    EUDTraceLog(355)
                    _ARRW(color, i) << (Db("\x17"))
                    # (Line 356) mousePosition[cp] = i + 1;
                    EUDTraceLog(356)
                    _ARRW(mousePosition, cp) << (i + 1)
                    # (Line 357) v.textRefresh[cp] = 1;
                    EUDTraceLog(357)
                    _ARRW(v.textRefresh, cp) << (1)
                    # (Line 358) }
                    # (Line 359) }
                EUDEndIf()
                # (Line 360) else {
            if EUDElse()():
                # (Line 361) if(strcmp(color[i], Db("\x17")) == 0) {
                _t8 = EUDIf()
                EUDTraceLog(361)
                if _t8(f_strcmp(color[i], Db("\x17")) == 0):
                    # (Line 362) color[i] = Db("\x05");
                    EUDTraceLog(362)
                    _ARRW(color, i) << (Db("\x05"))
                    # (Line 363) v.textRefresh[cp] = 1;
                    EUDTraceLog(363)
                    _ARRW(v.textRefresh, cp) << (1)
                    # (Line 364) }
                    # (Line 365) }
                EUDEndIf()
                # (Line 366) }
            EUDEndIf()
            # (Line 367) }
            EUDSetContinuePoint()
            _t5()
        EUDEndWhile()
        # (Line 368) }
    EUDEndIf()
    # (Line 370) function ChangeSelectColorEquip() {

@EUDTracedFunc
def ChangeSelectColorEquip():
    # (Line 371) const cp = getcurpl();
    EUDTraceLog(371)
    cp = f_getcurpl()
    # (Line 372) if(IsUserCP()) {
    _t1 = EUDIf()
    EUDTraceLog(372)
    if _t1(IsUserCP()):
        # (Line 373) if(v.isMouseMoved[cp] == 1) {
        _t2 = EUDIf()
        EUDTraceLog(373)
        if _t2(v.isMouseMoved[cp] == 1):
            # (Line 374) v.isMouseMoved[cp] = 0;
            EUDTraceLog(374)
            _ARRW(v.isMouseMoved, cp) << (0)
            # (Line 375) var c = 0;
            EUDTraceLog(375)
            c = EUDVariable()
            c << (0)
            # (Line 376) if(v._mouseX[cp] > 20 && v._mouseX[cp] < 104)  {
            _t3 = EUDIf()
            EUDTraceLog(376)
            if _t3(EUDSCAnd()(v._mouseX[cp] <= 20, neg=True)(v._mouseX[cp] >= 104, neg=True)()):
                # (Line 377) c = 1;
                EUDTraceLog(377)
                c << (1)
                # (Line 378) if(v._mouseY[cp] < 192 || v._mouseY[cp] > 222) {
                _t4 = EUDIf()
                EUDTraceLog(378)
                if _t4(EUDSCOr()(v._mouseY[cp] >= 192, neg=True)(v._mouseY[cp] <= 222, neg=True)()):
                    # (Line 379) mousePosition[cp] = 0;
                    EUDTraceLog(379)
                    _ARRW(mousePosition, cp) << (0)
                    # (Line 380) v.textRefresh[cp] = 1;
                    EUDTraceLog(380)
                    _ARRW(v.textRefresh, cp) << (1)
                    # (Line 381) }
                    # (Line 382) }
                EUDEndIf()
                # (Line 383) else {
            if EUDElse()():
                # (Line 384) mousePosition[cp] = 0;
                EUDTraceLog(384)
                _ARRW(mousePosition, cp) << (0)
                # (Line 385) v.textRefresh[cp] = 1;
                EUDTraceLog(385)
                _ARRW(v.textRefresh, cp) << (1)
                # (Line 386) }
                # (Line 388) for(var i = 0; i < 3; i++) {
            EUDEndIf()
            EUDTraceLog(388)
            i = EUDVariable()
            i << (0)
            _t5 = EUDWhile()
            EUDTraceLog(388)
            if _t5(i >= 3, neg=True):
                def _t6():
                    EUDTraceLog(388)
                    i.__iadd__(1)
                # (Line 389) if(c == 1 && v._mouseY[cp] >= 192 + 16 * i && v._mouseY[cp] <= 206 + 16 * i) {
                _t7 = EUDIf()
                EUDTraceLog(389)
                if _t7(EUDSCAnd()(c == 1)(v._mouseY[cp] >= 192 + 16 * i)(v._mouseY[cp] <= 206 + 16 * i)()):
                    # (Line 390) if(mousePosition[cp] != i + 1) {
                    _t8 = EUDIf()
                    EUDTraceLog(390)
                    if _t8(mousePosition[cp] == i + 1, neg=True):
                        # (Line 391) color[i] = Db("\x17");
                        EUDTraceLog(391)
                        _ARRW(color, i) << (Db("\x17"))
                        # (Line 392) mousePosition[cp] = i + 1;
                        EUDTraceLog(392)
                        _ARRW(mousePosition, cp) << (i + 1)
                        # (Line 393) v.textRefresh[cp] = 1;
                        EUDTraceLog(393)
                        _ARRW(v.textRefresh, cp) << (1)
                        # (Line 394) }
                        # (Line 395) }
                    EUDEndIf()
                    # (Line 396) else if(strcmp(color[i], Db("\x17")) == 0) {
                _t9 = EUDElseIf()
                EUDTraceLog(396)
                if _t9(f_strcmp(color[i], Db("\x17")) == 0):
                    # (Line 397) color[i] = Db("\x05");
                    EUDTraceLog(397)
                    _ARRW(color, i) << (Db("\x05"))
                    # (Line 398) v.textRefresh[cp] = 1;
                    EUDTraceLog(398)
                    _ARRW(v.textRefresh, cp) << (1)
                    # (Line 399) }
                    # (Line 400) }
                EUDEndIf()
                # (Line 401) }
                EUDSetContinuePoint()
                _t6()
            EUDEndWhile()
            # (Line 402) }
        EUDEndIf()
        # (Line 403) }
    EUDEndIf()
    # (Line 405) function ClickMinus1() {

@EUDTracedFunc
def ClickMinus1():
    # (Line 406) const cp = getcurpl();
    EUDTraceLog(406)
    cp = f_getcurpl()
    # (Line 407) PlayWAV("staredit\\wav\\click2.ogg");
    # (Line 408) if(showThrowAmount[cp] > 1) {
    EUDTraceLog(407)
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    _t1 = EUDIf()
    EUDTraceLog(408)
    if _t1(showThrowAmount[cp] <= 1, neg=True):
        # (Line 409) showThrowAmount[cp] -= 1;
        EUDTraceLog(409)
        _ARRW(showThrowAmount, cp).__isub__(1)
        # (Line 410) v.textRefresh[cp] = 1;
        EUDTraceLog(410)
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 411) }
        # (Line 412) }
    EUDEndIf()
    # (Line 414) function ClickMinus10() {

@EUDTracedFunc
def ClickMinus10():
    # (Line 415) const cp = getcurpl();
    EUDTraceLog(415)
    cp = f_getcurpl()
    # (Line 416) PlayWAV("staredit\\wav\\click2.ogg");
    # (Line 417) if(showThrowAmount[cp] > 10) {
    EUDTraceLog(416)
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    _t1 = EUDIf()
    EUDTraceLog(417)
    if _t1(showThrowAmount[cp] <= 10, neg=True):
        # (Line 418) showThrowAmount[cp] -= 10;
        EUDTraceLog(418)
        _ARRW(showThrowAmount, cp).__isub__(10)
        # (Line 419) v.textRefresh[cp] = 1;
        EUDTraceLog(419)
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 420) }
        # (Line 421) else {
    if EUDElse()():
        # (Line 422) showThrowAmount[cp] = 1;
        EUDTraceLog(422)
        _ARRW(showThrowAmount, cp) << (1)
        # (Line 423) v.textRefresh[cp] = 1;
        EUDTraceLog(423)
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 424) }
        # (Line 425) }
    EUDEndIf()
    # (Line 427) function ClickPlus1() {

@EUDTracedFunc
def ClickPlus1():
    # (Line 428) const cp = getcurpl();
    EUDTraceLog(428)
    cp = f_getcurpl()
    # (Line 429) PlayWAV("staredit\\wav\\click2.ogg");
    # (Line 430) if(showThrowAmount[cp] < 99 && showThrowAmount[cp] < showAmount[cp]) {
    EUDTraceLog(429)
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    _t1 = EUDIf()
    EUDTraceLog(430)
    if _t1(EUDSCAnd()(showThrowAmount[cp] >= 99, neg=True)(showThrowAmount[cp] >= showAmount[cp], neg=True)()):
        # (Line 431) showThrowAmount[cp] += 1;
        EUDTraceLog(431)
        _ARRW(showThrowAmount, cp).__iadd__(1)
        # (Line 432) v.textRefresh[cp] = 1;
        EUDTraceLog(432)
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 433) }
        # (Line 434) }
    EUDEndIf()
    # (Line 436) function ClickPlus10() {

@EUDTracedFunc
def ClickPlus10():
    # (Line 437) const cp = getcurpl();
    EUDTraceLog(437)
    cp = f_getcurpl()
    # (Line 438) PlayWAV("staredit\\wav\\click2.ogg");
    # (Line 439) if(showThrowAmount[cp] < 90 && showAmount[cp] > 10 && showThrowAmount[cp] <= (showAmount[cp] - 10)) {
    EUDTraceLog(438)
    DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
    _t1 = EUDIf()
    EUDTraceLog(439)
    if _t1(EUDSCAnd()(showThrowAmount[cp] >= 90, neg=True)(showAmount[cp] <= 10, neg=True)(showThrowAmount[cp] <= (showAmount[cp] - 10))()):
        # (Line 440) showThrowAmount[cp] += 10;
        EUDTraceLog(440)
        _ARRW(showThrowAmount, cp).__iadd__(10)
        # (Line 441) v.textRefresh[cp] = 1;
        EUDTraceLog(441)
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 442) }
        # (Line 443) else {
    if EUDElse()():
        # (Line 444) showThrowAmount[cp] = showAmount[cp];
        EUDTraceLog(444)
        _ARRW(showThrowAmount, cp) << (showAmount[cp])
        # (Line 445) v.textRefresh[cp] = 1;
        EUDTraceLog(445)
        _ARRW(v.textRefresh, cp) << (1)
        # (Line 446) }
        # (Line 447) }
    EUDEndIf()
    # (Line 449) function RegisterPotion() {

@EUDTracedFunc
def RegisterPotion():
    # (Line 450) const cp = getcurpl();
    EUDTraceLog(450)
    cp = f_getcurpl()
    # (Line 451) if(v.mouseX[cp] <= 115) {
    _t1 = EUDIf()
    EUDTraceLog(451)
    if _t1(v.mouseX[cp] <= 115):
        # (Line 452) PlayWAV("staredit\\wav\\click2.ogg");
        # (Line 453) if(showIndex[cp] < 15) {
        EUDTraceLog(452)
        DoActions(PlayWAV("staredit\\wav\\click2.ogg"))
        _t2 = EUDIf()
        EUDTraceLog(453)
        if _t2(showIndex[cp] >= 15, neg=True):
            # (Line 454) user.useHPPtn[cp] = showIndex[cp];
            EUDTraceLog(454)
            _ARRW(user.useHPPtn, cp) << (showIndex[cp])
            # (Line 455) user.recoveryHPPtn[cp] = showValue1[cp];
            EUDTraceLog(455)
            _ARRW(user.recoveryHPPtn, cp) << (showValue1[cp])
            # (Line 456) user.remainHPPtn[cp] = showAmount[cp];
            EUDTraceLog(456)
            _ARRW(user.remainHPPtn, cp) << (showAmount[cp])
            # (Line 457) v.s.printAt(10, "\x17인덱스 \x04: ", showIndex[cp], "  \x17이름 \x04: ", ptr2s(showName[cp]), "  \x17회복량 \x04: ", showValue1[cp]);
            EUDTraceLog(457)
            v.s.printAt(10, "\x17인덱스 \x04: ", showIndex[cp], "  \x17이름 \x04: ", ptr2s(showName[cp]), "  \x17회복량 \x04: ", showValue1[cp])
            # (Line 458) }
            # (Line 459) else {
        if EUDElse()():
            # (Line 460) user.useMPPtn[cp] = showIndex[cp];
            EUDTraceLog(460)
            _ARRW(user.useMPPtn, cp) << (showIndex[cp])
            # (Line 461) user.recoveryMPPtn[cp] = showValue1[cp];
            EUDTraceLog(461)
            _ARRW(user.recoveryMPPtn, cp) << (showValue1[cp])
            # (Line 462) user.remainMPPtn[cp] = showAmount[cp];
            EUDTraceLog(462)
            _ARRW(user.remainMPPtn, cp) << (showAmount[cp])
            # (Line 463) v.s.printAt(10, "\x17인덱스 \x04: ", showIndex[cp], "  \x17이름 \x04: ", ptr2s(showName[cp]), "  \x17회복량 \x04: ", showValue1[cp]);
            EUDTraceLog(463)
            v.s.printAt(10, "\x17인덱스 \x04: ", showIndex[cp], "  \x17이름 \x04: ", ptr2s(showName[cp]), "  \x17회복량 \x04: ", showValue1[cp])
            # (Line 464) }
            # (Line 465) }
        EUDEndIf()
        # (Line 466) }
    EUDEndIf()
