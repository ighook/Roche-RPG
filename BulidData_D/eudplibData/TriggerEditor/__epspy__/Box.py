## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System as sys;
import System as sys
# (Line 2) import User.Info as user;
from User import Info as user
# (Line 3) import Item.Manager as item;
from Item import Manager as item
# (Line 4) import Variable as v;
import Variable as v
# (Line 6) const s = StringBuffer(1000);
s = _CGFW(lambda: [StringBuffer(1000)], 1)[0]
# (Line 8) const openedBox1 = PVariable();
openedBox1 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const openedBox2 = PVariable();
openedBox2 = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const box = EUDArray(10);
box = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 12) function CreateBox() {
@EUDTracedFunc
def CreateBox():
    # (Line 19) }
    # (Line 21) function OpenBox() {
    pass

@EUDTracedFunc
def OpenBox():
    # (Line 22) const cp = getcurpl();
    EUDTraceLog(22)
    cp = f_getcurpl()
    # (Line 23) if(v.key[cp] == 0) return;
    _t1 = EUDIf()
    EUDTraceLog(23)
    if _t1(v.key[cp] == 0):
        EUDTraceLog(23)
        EUDReturn()
        # (Line 24) if(user.inMap[cp] == 2) {
    EUDEndIf()
    _t2 = EUDIf()
    EUDTraceLog(24)
    if _t2(user.inMap[cp] == 2):
        # (Line 25) if(sys.EPDBring(v.locNum[cp], box[0])) {
        _t3 = EUDIf()
        EUDTraceLog(25)
        if _t3(sys.EPDBring(v.locNum[cp], box[0])):
            # (Line 26) if(openedBox1[cp] == 0) {
            _t4 = EUDIf()
            EUDTraceLog(26)
            if _t4(openedBox1[cp] == 0):
                # (Line 27) openedBox1[cp] = 1;
                EUDTraceLog(27)
                _ARRW(openedBox1, cp) << (1)
                # (Line 28) item.AddItem(10000, 1, 1, 30, false);
                EUDTraceLog(28)
                item.AddItem(10000, 1, 1, 30, False)
                # (Line 29) item.AddItem(10000, 1, 16, 30, false);
                EUDTraceLog(29)
                item.AddItem(10000, 1, 16, 30, False)
                # (Line 30) v.s.printAt(10, "\x13\x05소량의 물약을 획득했다");
                EUDTraceLog(30)
                v.s.printAt(10, "\x13\x05소량의 물약을 획득했다")
                # (Line 31) }
                # (Line 32) else v.s.printAt(10, "\x13\x05비어있다");
            if EUDElse()():
                EUDTraceLog(32)
                v.s.printAt(10, "\x13\x05비어있다")
                # (Line 33) }
            EUDEndIf()
            # (Line 34) else if(sys.EPDBring(v.locNum[cp], box[1])) {
        _t5 = EUDElseIf()
        EUDTraceLog(34)
        if _t5(sys.EPDBring(v.locNum[cp], box[1])):
            # (Line 35) if(openedBox2[cp] == 0) {
            _t6 = EUDIf()
            EUDTraceLog(35)
            if _t6(openedBox2[cp] == 0):
                # (Line 36) openedBox2[cp] = 1;
                EUDTraceLog(36)
                _ARRW(openedBox2, cp) << (1)
                # (Line 37) item.AddItem(10000, 2, 1, 1, false);
                EUDTraceLog(37)
                item.AddItem(10000, 2, 1, 1, False)
                # (Line 38) v.s.printAt(10, "\x13\x05무기를 획득했다");
                EUDTraceLog(38)
                v.s.printAt(10, "\x13\x05무기를 획득했다")
                # (Line 39) }
                # (Line 40) else v.s.printAt(10, "\x13\x05비어있다");
            if EUDElse()():
                EUDTraceLog(40)
                v.s.printAt(10, "\x13\x05비어있다")
                # (Line 41) }
            EUDEndIf()
            # (Line 42) }
        EUDEndIf()
        # (Line 43) }
    EUDEndIf()
