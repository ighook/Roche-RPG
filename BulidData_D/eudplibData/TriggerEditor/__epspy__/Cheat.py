## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import MSQCVariable as mv;
import MSQCVariable as mv
# (Line 2) import Variable as v;
import Variable as v
# (Line 3) import Item.Manager as item;
from Item import Manager as item
# (Line 5) function Cheat() {
@EUDTracedFunc
def Cheat():
    # (Line 6) const cp = getcurpl();
    EUDTraceLog(6)
    cp = f_getcurpl()
    # (Line 7) if(MemoryEPD(EPD(v.chatPattern) + cp, Exactly, 1)) {
    _t1 = EUDIf()
    EUDTraceLog(7)
    if _t1(MemoryEPD(EPD(v.chatPattern) + cp, Exactly, 1)):
        # (Line 8) v.s.print("길이 : ", dwread_epd(EPD(v.chatLen) + cp));
        EUDTraceLog(8)
        v.s.print("길이 : ", f_dwread_epd(EPD(v.chatLen) + cp))
        # (Line 9) v.s.print("패턴 : ", dwread_epd(EPD(v.chatPattern) + cp));
        EUDTraceLog(9)
        v.s.print("패턴 : ", f_dwread_epd(EPD(v.chatPattern) + cp))
        # (Line 11) const itemCode = Db(5);
        EUDTraceLog(11)
        itemCode = Db(5)
        # (Line 12) memcpy(itemCode, dwread_epd(EPD(v.chatAddr) + cp) + 4, 5); // addr의 4바이트 길이만큼의 내용을 num에 복사
        EUDTraceLog(12)
        f_memcpy(itemCode, f_dwread_epd(EPD(v.chatAddr) + cp) + 4, 5)
        # (Line 13) var code, d = parse(itemCode, radix=10); // 정수와 자릿수 반환, 숫자가 아니면 0 반환
        EUDTraceLog(13)
        code, d = _MVAR([f_parse(itemCode, radix=10)])
        # (Line 14) v.s.print("\x04code : ", code);
        EUDTraceLog(14)
        v.s.print("\x04code : ", code)
        # (Line 15) var type = code / 10000;
        EUDTraceLog(15)
        type = EUDVariable()
        type << (code // 10000)
        # (Line 16) if(type > 3) return;
        _t2 = EUDIf()
        EUDTraceLog(16)
        if _t2(type <= 3, neg=True):
            EUDTraceLog(16)
            EUDReturn()
            # (Line 17) code -= type * 10000;
        EUDEndIf()
        EUDTraceLog(17)
        code.__isub__(type * 10000)
        # (Line 18) var index = code / 100;
        EUDTraceLog(18)
        index = EUDVariable()
        index << (code // 100)
        # (Line 19) code -= index * 100;
        EUDTraceLog(19)
        code.__isub__(index * 100)
        # (Line 20) var amount = code;
        EUDTraceLog(20)
        amount = EUDVariable()
        amount << (code)
        # (Line 22) v.s.print("\x17type \x04: ", type, "  \x17index \x04: ", index, "  \x17amount \x04: ", amount);
        EUDTraceLog(22)
        v.s.print("\x17type \x04: ", type, "  \x17index \x04: ", index, "  \x17amount \x04: ", amount)
        # (Line 23) item.AddItem(10000, type, index, amount, true);
        EUDTraceLog(23)
        item.AddItem(10000, type, index, amount, True)
        # (Line 24) }
        # (Line 36) }
    EUDEndIf()
