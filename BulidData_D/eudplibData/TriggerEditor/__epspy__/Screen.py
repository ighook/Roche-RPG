## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 2) import Main as m;
import Main as m
# (Line 4) const screen = EUDArray(12);
screen = _CGFW(lambda: [EUDArray(12)], 1)[0]
# (Line 5) const lightTimer = PVariable();
lightTimer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const light = PVariable();
light = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) function ScreenInit() {
@EUDTracedFunc
def ScreenInit():
    # (Line 9) for(var i = 0; i < 48; i++)
    EUDTraceLog(9)
    i = EUDVariable()
    i << (0)
    _t1 = EUDWhile()
    EUDTraceLog(9)
    if _t1(i >= 48, neg=True):
        def _t2():
            EUDTraceLog(9)
            i.__iadd__(1)
        # (Line 10) screen[i / 4] = dwread_epd(EPD(0x513B68+i));
        EUDTraceLog(10)
        _ARRW(screen, i // 4) << (f_dwread_epd(EPD(0x513B68 + i)))
        # (Line 11) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 13) function ScrollLock() {

@EUDTracedFunc
def ScrollLock():
    # (Line 14) if(IsUserCP()) {
    _t1 = EUDIf()
    EUDTraceLog(14)
    if _t1(IsUserCP()):
        # (Line 15) for(var i = 0; i < 48; i+=4) {
        EUDTraceLog(15)
        i = EUDVariable()
        i << (0)
        _t2 = EUDWhile()
        EUDTraceLog(15)
        if _t2(i >= 48, neg=True):
            def _t3():
                EUDTraceLog(15)
                i.__iadd__(4)
            # (Line 16) SetMemory(0x513B68 + i, SetTo, 0);
            # (Line 17) }
            EUDTraceLog(16)
            DoActions(SetMemory(0x513B68 + i, SetTo, 0))
            # (Line 18) }
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        # (Line 19) }
    EUDEndIf()
    # (Line 21) function ScrollUnLock() {

@EUDTracedFunc
def ScrollUnLock():
    # (Line 22) if(IsUserCP()) {
    _t1 = EUDIf()
    EUDTraceLog(22)
    if _t1(IsUserCP()):
        # (Line 23) for(var i = 0; i < 48; i+=4) {
        EUDTraceLog(23)
        i = EUDVariable()
        i << (0)
        _t2 = EUDWhile()
        EUDTraceLog(23)
        if _t2(i >= 48, neg=True):
            def _t3():
                EUDTraceLog(23)
                i.__iadd__(4)
            # (Line 24) SetMemory(0x513B68 + i, SetTo, screen[i / 4]);
            # (Line 25) }
            EUDTraceLog(24)
            DoActions(SetMemory(0x513B68 + i, SetTo, screen[i // 4]))
            # (Line 26) }
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        # (Line 27) }
    EUDEndIf()
    # (Line 29) function SetLight(light_) {

@EUDTracedFunc
def SetLight(light_):
    # (Line 30) const cp = getcurpl();
    EUDTraceLog(30)
    cp = f_getcurpl()
    # (Line 31) if(light_ > 31) return;
    _t1 = EUDIf()
    EUDTraceLog(31)
    if _t1(light_ <= 31, neg=True):
        EUDTraceLog(31)
        EUDReturn()
        # (Line 32) light[cp] = light_;
    EUDEndIf()
    EUDTraceLog(32)
    _ARRW(light, cp) << (light_)
    # (Line 33) }
    # (Line 35) function LightCheck() {

@EUDTracedFunc
def LightCheck():
    # (Line 36) const cp = getcurpl();
    EUDTraceLog(36)
    cp = f_getcurpl()
    # (Line 37) if(IsUserCP()) {
    _t1 = EUDIf()
    EUDTraceLog(37)
    if _t1(IsUserCP()):
        # (Line 38) if(MemoryEPD(EPD(0x657A9C), Exactly, light[cp])) return;
        _t2 = EUDIf()
        EUDTraceLog(38)
        if _t2(MemoryEPD(EPD(0x657A9C), Exactly, light[cp])):
            EUDTraceLog(38)
            EUDReturn()
            # (Line 39) if(MemoryEPD(EPD(0x657A9C), AtLeast, light[cp])) {
        EUDEndIf()
        _t3 = EUDIf()
        EUDTraceLog(39)
        if _t3(MemoryEPD(EPD(0x657A9C), AtLeast, light[cp])):
            # (Line 40) SetMemoryEPD(EPD(0x657A9C), Subtract, 1);
            # (Line 41) }
            EUDTraceLog(40)
            DoActions(SetMemoryEPD(EPD(0x657A9C), Subtract, 1))
            # (Line 42) else if(MemoryEPD(EPD(0x657A9C), AtMost, light[cp])) {
        _t4 = EUDElseIf()
        EUDTraceLog(42)
        if _t4(MemoryEPD(EPD(0x657A9C), AtMost, light[cp])):
            # (Line 43) SetMemoryEPD(EPD(0x657A9C), Add, 1);
            # (Line 44) }
            EUDTraceLog(43)
            DoActions(SetMemoryEPD(EPD(0x657A9C), Add, 1))
            # (Line 45) }
        EUDEndIf()
        # (Line 46) }
    EUDEndIf()
    # (Line 48) function WideCheck() {

@EUDTracedFunc
def WideCheck():
    # (Line 50) var x1 = dwread_epd(EPD(0x62848C));
    EUDTraceLog(50)
    x1 = EUDVariable()
    x1 << (f_dwread_epd(EPD(0x62848C)))
    # (Line 51) var y1 = dwread_epd(EPD(0x6284A8));
    EUDTraceLog(51)
    y1 = EUDVariable()
    y1 << (f_dwread_epd(EPD(0x6284A8)))
    # (Line 52) CenterView("temp");
    # (Line 53) var x2 = dwread_epd(EPD(0x62848C));
    EUDTraceLog(52)
    DoActions(CenterView("temp"))
    EUDTraceLog(53)
    x2 = EUDVariable()
    x2 << (f_dwread_epd(EPD(0x62848C)))
    # (Line 54) var y2 = dwread_epd(EPD(0x6284A8));
    EUDTraceLog(54)
    y2 = EUDVariable()
    y2 << (f_dwread_epd(EPD(0x6284A8)))
    # (Line 55) var c = dwread_epd(EPD(0x58DC4C) + $L("temp") * 5);
    EUDTraceLog(55)
    c = EUDVariable()
    c << (f_dwread_epd(EPD(0x58DC4C) + GetLocationIndex("temp") * 5))
    # (Line 56) if(c - x2 <= 320) {
    _t1 = EUDIf()
    EUDTraceLog(56)
    if _t1(c - x2 <= 320):
        # (Line 57) setloc("temp", x1 + 320, y1 + 191);
        EUDTraceLog(57)
        f_setloc("temp", x1 + 320, y1 + 191)
        # (Line 58) SetMemory(0x58DA00, SetTo, 1);
        # (Line 59) }
        EUDTraceLog(58)
        DoActions(SetMemory(0x58DA00, SetTo, 1))
        # (Line 60) else {
    if EUDElse()():
        # (Line 61) setloc("temp", x1 + 426, y1 + 191);
        EUDTraceLog(61)
        f_setloc("temp", x1 + 426, y1 + 191)
        # (Line 62) SetMemory(0x58DA00, SetTo, 2);
        # (Line 63) }
        EUDTraceLog(62)
        DoActions(SetMemory(0x58DA00, SetTo, 2))
        # (Line 64) CenterView("temp");
    EUDEndIf()
    # (Line 65) }
    EUDTraceLog(64)
    DoActions(CenterView("temp"))
    # (Line 67) function WideCheckExec() {

@EUDTracedFunc
def WideCheckExec():
    # (Line 68) const cp = getcurpl();
    EUDTraceLog(68)
    cp = f_getcurpl()
    # (Line 69) if(v.screen[cp] > 0) {
    _t1 = EUDIf()
    EUDTraceLog(69)
    if _t1(v.screen[cp] <= 0, neg=True):
        # (Line 70) if(v.screen[cp] == 1) {
        _t2 = EUDIf()
        EUDTraceLog(70)
        if _t2(v.screen[cp] == 1):
            # (Line 71) if(v.screenMode[cp] != 1) {
            _t3 = EUDIf()
            EUDTraceLog(71)
            if _t3(v.screenMode[cp] == 1, neg=True):
                # (Line 72) v.screenMode[cp] = 1;
                EUDTraceLog(72)
                _ARRW(v.screenMode, cp) << (1)
                # (Line 74) }
                # (Line 75) SetMemoryEPD(EPD(v.screen) + cp, SetTo, 0);
            EUDEndIf()
            # (Line 76) SetMemoryEPD(EPD(0x58DA00), SetTo, 0);
            EUDTraceLog(75)
            DoActions(SetMemoryEPD(EPD(v.screen) + cp, SetTo, 0))
            # (Line 77) }
            EUDTraceLog(76)
            DoActions(SetMemoryEPD(EPD(0x58DA00), SetTo, 0))
            # (Line 78) else if(v.screen[cp] == 2) {
        _t4 = EUDElseIf()
        EUDTraceLog(78)
        if _t4(v.screen[cp] == 2):
            # (Line 79) if(v.screenMode[cp] != 2) {
            _t5 = EUDIf()
            EUDTraceLog(79)
            if _t5(v.screenMode[cp] == 2, neg=True):
                # (Line 80) v.screenMode[cp] = 2;
                EUDTraceLog(80)
                _ARRW(v.screenMode, cp) << (2)
                # (Line 82) }
                # (Line 83) SetMemoryEPD(EPD(v.screen) + cp, SetTo, 0);
            EUDEndIf()
            # (Line 84) SetMemoryEPD(EPD(0x58DA00), SetTo, 0);
            EUDTraceLog(83)
            DoActions(SetMemoryEPD(EPD(v.screen) + cp, SetTo, 0))
            # (Line 85) }
            EUDTraceLog(84)
            DoActions(SetMemoryEPD(EPD(0x58DA00), SetTo, 0))
            # (Line 86) }
        EUDEndIf()
        # (Line 87) }
    EUDEndIf()
