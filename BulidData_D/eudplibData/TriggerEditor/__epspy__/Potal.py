## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 2) import User.Info as user;
from User import Info as user
# (Line 3) import System as sys;
import System as sys
# (Line 4) import StatusBar as status;
import StatusBar as status
# (Line 5) import Opening as opening;
import Opening as opening
# (Line 6) import Screen as screen;
import Screen as screen
# (Line 7) import Box as box;
import Box as box
# (Line 8) import TriggerEditor.SCArchive as sca;
from TriggerEditor import SCArchive as sca
# (Line 10) const printText = PVariable();
printText = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const potal = EUDArray(10);
potal = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 12) function CreatePotal();
# (Line 14) function PotalInit() {
@EUDTracedFunc
def PotalInit():
    # (Line 15) potal[0] = sys.SetNextUnitEPD();
    EUDTraceLog(15)
    _ARRW(potal, 0) << (sys.SetNextUnitEPD())
    # (Line 16) CreatePotal(919, 392);
    EUDTraceLog(16)
    CreatePotal(919, 392)
    # (Line 17) potal[1] = sys.SetNextUnitEPD();
    EUDTraceLog(17)
    _ARRW(potal, 1) << (sys.SetNextUnitEPD())
    # (Line 18) CreatePotal(1162, 393);
    EUDTraceLog(18)
    CreatePotal(1162, 393)
    # (Line 25) }
    # (Line 27) function CreatePotal(x, y) {

@EUDTracedFunc
def CreatePotal(x, y):
    # (Line 28) setloc("temp", x, y);
    EUDTraceLog(28)
    f_setloc("temp", x, y)
    # (Line 29) CreateUnit(1, "Terran Beacon", "temp", P7);
    # (Line 30) }
    EUDTraceLog(29)
    DoActions(CreateUnit(1, "Terran Beacon", "temp", P7))
    # (Line 32) function PotalCheck() {

@EUDTracedFunc
def PotalCheck():
    # (Line 33) const cp = getcurpl();
    EUDTraceLog(33)
    cp = f_getcurpl()
    # (Line 34) if(user.isAlive[cp] == 0) return;
    _t1 = EUDIf()
    EUDTraceLog(34)
    if _t1(user.isAlive[cp] == 0):
        EUDTraceLog(34)
        EUDReturn()
        # (Line 35) if(v.key[cp] == 1) {
    EUDEndIf()
    _t2 = EUDIf()
    EUDTraceLog(35)
    if _t2(v.key[cp] == 1):
        # (Line 36) if(Bring(P7, Exactly, 0, "Terran Beacon", v.locNum[cp])) return;
        _t3 = EUDIf()
        EUDTraceLog(36)
        if _t3(Bring(P7, Exactly, 0, "Terran Beacon", v.locNum[cp])):
            EUDTraceLog(36)
            EUDReturn()
            # (Line 37) if(user.inMap[cp] == 1) {
        EUDEndIf()
        _t4 = EUDIf()
        EUDTraceLog(37)
        if _t4(user.inMap[cp] == 1):
            # (Line 38) Move(potal[0], potal[1], 2);
            EUDTraceLog(38)
            Move(potal[0], potal[1], 2)
            # (Line 39) }
            # (Line 40) else if(user.inMap[cp] == 2) {
        _t5 = EUDElseIf()
        EUDTraceLog(40)
        if _t5(user.inMap[cp] == 2):
            # (Line 41) Move(potal[1], potal[0], 1);
            EUDTraceLog(41)
            Move(potal[1], potal[0], 1)
            # (Line 42) }
            # (Line 43) else if(user.inMap[cp] == 3) {
        _t6 = EUDElseIf()
        EUDTraceLog(43)
        if _t6(user.inMap[cp] == 3):
            # (Line 45) }
            # (Line 46) }
            pass
        EUDEndIf()
        # (Line 47) }
    EUDEndIf()
    # (Line 49) function Move(loc1, loc2, map) {

@EUDTracedFunc
def Move(loc1, loc2, map):
    # (Line 50) const cp = getcurpl();
    EUDTraceLog(50)
    cp = f_getcurpl()
    # (Line 51) if(sys.EPDBring(v.locNum[cp], loc1)) {
    _t1 = EUDIf()
    EUDTraceLog(51)
    if _t1(sys.EPDBring(v.locNum[cp], loc1)):
        # (Line 52) const x, y = dwbreak(dwread_epd(loc2 + 0x28 / 4))[[0,1]];
        EUDTraceLog(52)
        x, y = List2Assignable([_SRET(f_dwbreak(f_dwread_epd(loc2 + 0x28 // 4)), [0, 1])])
        # (Line 53) setloc("temp", x, y);
        EUDTraceLog(53)
        f_setloc("temp", x, y)
        # (Line 54) MoveUnit(1, v.unitNum[cp], cp, "Anywhere", "temp");
        # (Line 55) if(sys.single == false) CenterView("temp");
        EUDTraceLog(54)
        DoActions(MoveUnit(1, v.unitNum[cp], cp, "Anywhere", "temp"))
        _t2 = EUDIf()
        EUDTraceLog(55)
        if _t2(sys.single == False):
            # (Line 56) user.inMap[cp] = map;
            EUDTraceLog(55)
            DoActions(CenterView("temp"))
        EUDEndIf()
        EUDTraceLog(56)
        _ARRW(user.inMap, cp) << (map)
        # (Line 57) }
        # (Line 58) }
    EUDEndIf()
