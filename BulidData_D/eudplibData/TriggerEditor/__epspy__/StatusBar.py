## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import TriggerEditor.SCArchive as sca;
from TriggerEditor import SCArchive as sca
# (Line 2) import User.Info as user;
from User import Info as user
# (Line 3) import Variable as v;
import Variable as v
# (Line 4) import SCA.Slot as slot;
from SCA import Slot as slot
# (Line 5) import Opening as open;
import Opening as open
# (Line 6) import MSQCVariable as mv;
import MSQCVariable as mv
# (Line 8) const stats = PVariable();
stats = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const timer = PVariable();
timer = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const USER_STATUS = 1;
USER_STATUS = _CGFW(lambda: [1], 1)[0]
# (Line 12) const SCA_ERROR = 2;
SCA_ERROR = _CGFW(lambda: [2], 1)[0]
# (Line 13) const SAVE_START = 3;
SAVE_START = _CGFW(lambda: [3], 1)[0]
# (Line 14) const SAVE_END = 4;
SAVE_END = _CGFW(lambda: [4], 1)[0]
# (Line 15) const SAVE = 5;
SAVE = _CGFW(lambda: [5], 1)[0]
# (Line 16) const SAVE_DENY = 6;
SAVE_DENY = _CGFW(lambda: [6], 1)[0]
# (Line 17) const LOADING = 7;
LOADING = _CGFW(lambda: [7], 1)[0]
# (Line 18) const LOAD_END = 8;
LOAD_END = _CGFW(lambda: [8], 1)[0]
# (Line 19) const LOAD_GLOBAL = 9;
LOAD_GLOBAL = _CGFW(lambda: [9], 1)[0]
# (Line 20) const SCA_WAIT = 10;
SCA_WAIT = _CGFW(lambda: [10], 1)[0]
# (Line 22) function StatusBar() {
@EUDTracedFunc
def StatusBar():
    # (Line 23) const cp = getcurpl();
    EUDTraceLog(23)
    cp = f_getcurpl()
    # (Line 24) switch(stats[cp]) {
    EUDTraceLog(24)
    EUDSwitch(stats[cp])
    # (Line 25) case 0:
    _t1 = EUDSwitchCase()
    # (Line 26) eprintln(" ");
    EUDTraceLog(25)
    if _t1(0):
        EUDTraceLog(26)
        f_eprintln(" ")
        # (Line 27) break;
        EUDTraceLog(27)
        EUDBreak()
        # (Line 28) case USER_STATUS:
    _t2 = EUDSwitchCase()
    # (Line 29) eprintln("\x17X \x04: ", v.mouseX[cp], "  \x17Y \x04: ", v.mouseY[cp], "  ", slot.mousePosition[cp]);
    EUDTraceLog(28)
    if _t2(USER_STATUS):
        EUDTraceLog(29)
        f_eprintln("\x17X \x04: ", v.mouseX[cp], "  \x17Y \x04: ", v.mouseY[cp], "  ", slot.mousePosition[cp])
        # (Line 35) break;
        EUDTraceLog(35)
        EUDBreak()
        # (Line 36) case SCA_ERROR:
    _t3 = EUDSwitchCase()
    # (Line 37) eprintln("\x07[SCA] \x08연결이 되어있지않습니다");
    EUDTraceLog(36)
    if _t3(SCA_ERROR):
        EUDTraceLog(37)
        f_eprintln("\x07[SCA] \x08연결이 되어있지않습니다")
        # (Line 38) timer[cp] += 1;
        EUDTraceLog(38)
        _ARRW(timer, cp).__iadd__(1)
        # (Line 39) if(timer[cp] == 50) {
        _t4 = EUDIf()
        EUDTraceLog(39)
        if _t4(timer[cp] == 50):
            # (Line 40) timer[cp] = 0;
            EUDTraceLog(40)
            _ARRW(timer, cp) << (0)
            # (Line 41) stats[cp] = USER_STATUS;
            EUDTraceLog(41)
            _ARRW(stats, cp) << (USER_STATUS)
            # (Line 42) }
            # (Line 43) break;
        EUDEndIf()
        EUDTraceLog(43)
        EUDBreak()
        # (Line 44) case SAVE_START:
    _t5 = EUDSwitchCase()
    # (Line 45) eprintln("\x07[SCA] \x04저장 완료 문구가 뜰 때까지 게임을 \x08종료하지 마세요");
    EUDTraceLog(44)
    if _t5(SAVE_START):
        EUDTraceLog(45)
        f_eprintln("\x07[SCA] \x04저장 완료 문구가 뜰 때까지 게임을 \x08종료하지 마세요")
        # (Line 46) timer[cp] += 1;
        EUDTraceLog(46)
        _ARRW(timer, cp).__iadd__(1)
        # (Line 47) if(timer[cp] == 40) {
        _t6 = EUDIf()
        EUDTraceLog(47)
        if _t6(timer[cp] == 40):
            # (Line 48) timer[cp] = 0;
            EUDTraceLog(48)
            _ARRW(timer, cp) << (0)
            # (Line 49) stats[cp] = SAVE;
            EUDTraceLog(49)
            _ARRW(stats, cp) << (SAVE)
            # (Line 50) }
            # (Line 51) break;
        EUDEndIf()
        EUDTraceLog(51)
        EUDBreak()
        # (Line 52) case SAVE_END:
    _t7 = EUDSwitchCase()
    # (Line 53) eprintln("\x07[SCA] \x04저장이 완료되었습니다");
    EUDTraceLog(52)
    if _t7(SAVE_END):
        EUDTraceLog(53)
        f_eprintln("\x07[SCA] \x04저장이 완료되었습니다")
        # (Line 54) timer[cp] += 1;
        EUDTraceLog(54)
        _ARRW(timer, cp).__iadd__(1)
        # (Line 55) if(timer[cp] == 50) {
        _t8 = EUDIf()
        EUDTraceLog(55)
        if _t8(timer[cp] == 50):
            # (Line 56) timer[cp] = 0;
            EUDTraceLog(56)
            _ARRW(timer, cp) << (0)
            # (Line 57) stats[cp] = USER_STATUS;
            EUDTraceLog(57)
            _ARRW(stats, cp) << (USER_STATUS)
            # (Line 58) }
            # (Line 59) break;
        EUDEndIf()
        EUDTraceLog(59)
        EUDBreak()
        # (Line 60) case SAVE:
    _t9 = EUDSwitchCase()
    # (Line 61) eprintln("\x07[SCA] \x04저장중입니다");
    EUDTraceLog(60)
    if _t9(SAVE):
        EUDTraceLog(61)
        f_eprintln("\x07[SCA] \x04저장중입니다")
        # (Line 62) break;
        EUDTraceLog(62)
        EUDBreak()
        # (Line 63) case SAVE_DENY:
    _t10 = EUDSwitchCase()
    # (Line 64) eprintln("\x07[SCA] \x04저장할 수 없는 지역입니다");
    EUDTraceLog(63)
    if _t10(SAVE_DENY):
        EUDTraceLog(64)
        f_eprintln("\x07[SCA] \x04저장할 수 없는 지역입니다")
        # (Line 65) timer[cp] += 1;
        EUDTraceLog(65)
        _ARRW(timer, cp).__iadd__(1)
        # (Line 66) if(timer[cp] == 50) {
        _t11 = EUDIf()
        EUDTraceLog(66)
        if _t11(timer[cp] == 50):
            # (Line 67) timer[cp] = 0;
            EUDTraceLog(67)
            _ARRW(timer, cp) << (0)
            # (Line 68) stats[cp] = USER_STATUS;
            EUDTraceLog(68)
            _ARRW(stats, cp) << (USER_STATUS)
            # (Line 69) }
            # (Line 70) break;
        EUDEndIf()
        EUDTraceLog(70)
        EUDBreak()
        # (Line 71) case LOADING:
    _t12 = EUDSwitchCase()
    # (Line 72) eprintln("\x07[SCA] \x04슬롯 데이터를 불러오는 중입니다");
    EUDTraceLog(71)
    if _t12(LOADING):
        EUDTraceLog(72)
        f_eprintln("\x07[SCA] \x04슬롯 데이터를 불러오는 중입니다")
        # (Line 73) break;
        EUDTraceLog(73)
        EUDBreak()
        # (Line 74) case LOAD_END:
    _t13 = EUDSwitchCase()
    # (Line 75) eprintln("\x07[SCA] \x04슬롯 데이터를 불러오는데 성공했습니다");
    EUDTraceLog(74)
    if _t13(LOAD_END):
        EUDTraceLog(75)
        f_eprintln("\x07[SCA] \x04슬롯 데이터를 불러오는데 성공했습니다")
        # (Line 76) timer[cp] += 1;
        EUDTraceLog(76)
        _ARRW(timer, cp).__iadd__(1)
        # (Line 77) if(timer[cp] == 50) {
        _t14 = EUDIf()
        EUDTraceLog(77)
        if _t14(timer[cp] == 50):
            # (Line 78) timer[cp] = 0;
            EUDTraceLog(78)
            _ARRW(timer, cp) << (0)
            # (Line 79) stats[cp] = 0;
            EUDTraceLog(79)
            _ARRW(stats, cp) << (0)
            # (Line 80) }
            # (Line 81) break;
        EUDEndIf()
        EUDTraceLog(81)
        EUDBreak()
        # (Line 82) case LOAD_GLOBAL:
    _t15 = EUDSwitchCase()
    # (Line 83) eprintln("\x07[SCA] \x04버전 정보를 불러오는 중입니다");
    EUDTraceLog(82)
    if _t15(LOAD_GLOBAL):
        EUDTraceLog(83)
        f_eprintln("\x07[SCA] \x04버전 정보를 불러오는 중입니다")
        # (Line 84) break;
        EUDTraceLog(84)
        EUDBreak()
        # (Line 85) case SCA_WAIT:
    _t16 = EUDSwitchCase()
    # (Line 86) eprintln("\x07[SCA] \x04연결을 기다리고 있습니다");
    EUDTraceLog(85)
    if _t16(SCA_WAIT):
        EUDTraceLog(86)
        f_eprintln("\x07[SCA] \x04연결을 기다리고 있습니다")
        # (Line 87) break;
        EUDTraceLog(87)
        EUDBreak()
        # (Line 88) }
    # (Line 89) }
    EUDEndSwitch()
