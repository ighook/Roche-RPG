## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Variable as v;
import Variable as v
# (Line 6) function CreateTree() {
@EUDTracedFunc
def CreateTree():
    # (Line 33) wwrite(0x665AC0 + 1696 + 493 * 2, 624);
    EUDTraceLog(33)
    f_wwrite(0x665AC0 + 1696 + 493 * 2, 624)
    # (Line 34) CreateUnit(1, "Cave", "t", P7);
    # (Line 36) wwrite(0x665AC0 + 1696 + 493 * 2, 634);
    EUDTraceLog(34)
    DoActions(CreateUnit(1, "Cave", "t", P7))
    EUDTraceLog(36)
    f_wwrite(0x665AC0 + 1696 + 493 * 2, 634)
    # (Line 37) addloc("t2", -17, 0);
    EUDTraceLog(37)
    f_addloc("t2", -17, 0)
    # (Line 38) CreateUnit(1, "Cave", "t2", P7);
    # (Line 40) addloc("t3", -16, 0);
    EUDTraceLog(38)
    DoActions(CreateUnit(1, "Cave", "t2", P7))
    EUDTraceLog(40)
    f_addloc("t3", -16, 0)
    # (Line 41) wwrite(0x665AC0 + 1696 + 493 * 2, 638);
    EUDTraceLog(41)
    f_wwrite(0x665AC0 + 1696 + 493 * 2, 638)
    # (Line 42) CreateUnit(1, "Cave", "t3", P7);
    # (Line 44) addloc("t4", -7, 9);
    EUDTraceLog(42)
    DoActions(CreateUnit(1, "Cave", "t3", P7))
    EUDTraceLog(44)
    f_addloc("t4", -7, 9)
    # (Line 45) wwrite(0x665AC0 + 1696 + 493 * 2, 630);
    EUDTraceLog(45)
    f_wwrite(0x665AC0 + 1696 + 493 * 2, 630)
    # (Line 46) CreateUnit(1, "Cave", "t4", P7);
    # (Line 47) }
    EUDTraceLog(46)
    DoActions(CreateUnit(1, "Cave", "t4", P7))
    # (Line 49) function CreateTree01() {

@EUDTracedFunc
def CreateTree01():
    # (Line 51) }
    pass
