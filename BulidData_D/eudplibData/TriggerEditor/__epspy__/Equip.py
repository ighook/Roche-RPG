## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import User.Info as user;
from User import Info as user
# (Line 2) import User.Stats as stats;
from User import Stats as stats
# (Line 3) import Variable as v;
import Variable as v
# (Line 4) import System as sys;
import System as sys
# (Line 5) import Screen as screen;
import Screen as screen
# (Line 6) import Item.Manager as item;
from Item import Manager as item
# (Line 7) import Item.Info.Weapon as weapon;
from Item.Info import Weapon as weapon
# (Line 8) import Item.Info.Armor as armor;
from Item.Info import Armor as armor
# (Line 11) object Weapon { var type; var index; var lv; var name; var phyDmg; var magicDmg; };
class Weapon(EUDStruct):
    # (Line 12) object Helmet { var type; var index; var lv; var name; var hp; var defense; };
    _fields_ = [
        'type',
        'index',
        'lv',
        'name',
        'phyDmg',
        'magicDmg',
    ]

class Helmet(EUDStruct):
    # (Line 13) object Armor { var type; var index; var lv; var name; var hp; var defense; };
    _fields_ = [
        'type',
        'index',
        'lv',
        'name',
        'hp',
        'defense',
    ]

class Armor(EUDStruct):
    # (Line 14) object Glove { var type; var index; var lv; var name; var hp; var defense; };
    _fields_ = [
        'type',
        'index',
        'lv',
        'name',
        'hp',
        'defense',
    ]

class Glove(EUDStruct):
    # (Line 15) object Cape { var type; var index; var lv; var name; var hp; var mp; var defense; };
    _fields_ = [
        'type',
        'index',
        'lv',
        'name',
        'hp',
        'defense',
    ]

class Cape(EUDStruct):
    # (Line 16) object Ring { var type; var index; var lv; var name; var hp; var defense; };
    _fields_ = [
        'type',
        'index',
        'lv',
        'name',
        'hp',
        'mp',
        'defense',
    ]

class Ring(EUDStruct):
    # (Line 17) object Necklace { var type; var index; var lv; var name; var hp; var defense; };
    _fields_ = [
        'type',
        'index',
        'lv',
        'name',
        'hp',
        'defense',
    ]

class Necklace(EUDStruct):
    # (Line 19) const page = PVariable();
    _fields_ = [
        'type',
        'index',
        'lv',
        'name',
        'hp',
        'defense',
    ]

page = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const equip = EUDArray(7 * 8);
equip = _CGFW(lambda: [EUDArray(7 * 8)], 1)[0]
# (Line 21) const color = EUDArray(7);
color = _CGFW(lambda: [EUDArray(7)], 1)[0]
# (Line 22) const mousePosition = PVariable();
mousePosition = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 24) function ResetEquip();
# (Line 25) function EquipWeapon(index);
# (Line 26) function SelectSlot(slot);
# (Line 27) function ReleaseWeapon();
# (Line 28) function Open();
# (Line 29) function Close();
# (Line 30) function Back();
# (Line 32) function Equip() {
@EUDTracedFunc
def Equip():
    # (Line 33) const cp = getcurpl();
    EUDTraceLog(33)
    cp = f_getcurpl()
    # (Line 34) const t = cp * 7;
    EUDTraceLog(34)
    t = cp * 7
    # (Line 35) if(v.key[cp] == 16) {
    _t1 = EUDIf()
    EUDTraceLog(35)
    if _t1(v.key[cp] == 16):
        # (Line 36) if(user.openedEquip[cp] == 0) Open();
        _t2 = EUDIf()
        EUDTraceLog(36)
        if _t2(user.openedEquip[cp] == 0):
            EUDTraceLog(36)
            Open()
            # (Line 37) else Close();
        if EUDElse()():
            EUDTraceLog(37)
            Close()
            # (Line 38) }
        EUDEndIf()
        # (Line 40) if(user.openedEquip[cp] == 1) {
    EUDEndIf()
    _t3 = EUDIf()
    EUDTraceLog(40)
    if _t3(user.openedEquip[cp] == 1):
        # (Line 41) if(page[cp] == 1) {
        _t4 = EUDIf()
        EUDTraceLog(41)
        if _t4(page[cp] == 1):
            # (Line 42) if(v.textRefresh[cp] == 1) {
            _t5 = EUDIf()
            EUDTraceLog(42)
            if _t5(v.textRefresh[cp] == 1):
                # (Line 43) const equip1 = Weapon.cast(equip[t + 0]);
                EUDTraceLog(43)
                equip1 = Weapon.cast(equip[t + 0])
                # (Line 44) const equip2 = Helmet.cast(equip[t + 1]);
                EUDTraceLog(44)
                equip2 = Helmet.cast(equip[t + 1])
                # (Line 45) const equip3 = Armor.cast(equip[t + 2]);
                EUDTraceLog(45)
                equip3 = Armor.cast(equip[t + 2])
                # (Line 46) const equip4 = Glove.cast(equip[t + 3]);
                EUDTraceLog(46)
                equip4 = Glove.cast(equip[t + 3])
                # (Line 47) const equip5 = Cape.cast(equip[t + 4]);
                EUDTraceLog(47)
                equip5 = Cape.cast(equip[t + 4])
                # (Line 48) const equip6 = Ring.cast(equip[t + 5]);
                EUDTraceLog(48)
                equip6 = Ring.cast(equip[t + 5])
                # (Line 49) const equip7 = Necklace.cast(equip[t + 6]);
                EUDTraceLog(49)
                equip7 = Necklace.cast(equip[t + 6])
                # (Line 51) v.textRefresh[cp] = 0;
                EUDTraceLog(51)
                _ARRW(v.textRefresh, cp) << (0)
                # (Line 52) v.display.insert(0);
                EUDTraceLog(52)
                v.display.insert(0)
                # (Line 53) v.display.append("   \x07▶ \x04장비\n");
                EUDTraceLog(53)
                v.display.append("   \x07▶ \x04장비\n")
                # (Line 54) v.display.append("    \x19·  \x1D무기 :  ", ptr2s(color[0]), ptr2s(equip1.name), "\n");
                EUDTraceLog(54)
                v.display.append("    \x19·  \x1D무기 :  ", ptr2s(color[0]), ptr2s(equip1.name), "\n")
                # (Line 55) v.display.append("    \x19·  \x1D투구 :  ", ptr2s(color[1]), ptr2s(equip2.name), "\n");
                EUDTraceLog(55)
                v.display.append("    \x19·  \x1D투구 :  ", ptr2s(color[1]), ptr2s(equip2.name), "\n")
                # (Line 56) v.display.append("    \x19·  \x1D갑옷 :  ", ptr2s(color[2]), ptr2s(equip3.name), "\n");
                EUDTraceLog(56)
                v.display.append("    \x19·  \x1D갑옷 :  ", ptr2s(color[2]), ptr2s(equip3.name), "\n")
                # (Line 57) v.display.append("    \x19·  \x1D장갑 :  ", ptr2s(color[3]), ptr2s(equip4.name), "\n");
                EUDTraceLog(57)
                v.display.append("    \x19·  \x1D장갑 :  ", ptr2s(color[3]), ptr2s(equip4.name), "\n")
                # (Line 58) v.display.append("    \x19·  \x1D망토 :  ", ptr2s(color[4]), ptr2s(equip5.name), "\n");
                EUDTraceLog(58)
                v.display.append("    \x19·  \x1D망토 :  ", ptr2s(color[4]), ptr2s(equip5.name), "\n")
                # (Line 59) v.display.append("    \x19·  \x1D반지 :  ", ptr2s(color[5]), ptr2s(equip6.name), "\n");
                EUDTraceLog(59)
                v.display.append("    \x19·  \x1D반지 :  ", ptr2s(color[5]), ptr2s(equip6.name), "\n")
                # (Line 60) v.display.append("    \x19·  \x1D목걸 :  ", ptr2s(color[6]), ptr2s(equip7.name), "\n");
                EUDTraceLog(60)
                v.display.append("    \x19·  \x1D목걸 :  ", ptr2s(color[6]), ptr2s(equip7.name), "\n")
                # (Line 61) }
                # (Line 62) v.display.DisplayAt(0);
            EUDEndIf()
            EUDTraceLog(62)
            v.display.DisplayAt(0)
            # (Line 63) if(IsUserCP()) {
            _t6 = EUDIf()
            EUDTraceLog(63)
            if _t6(IsUserCP()):
                # (Line 64) var c = 0;
                EUDTraceLog(64)
                c = EUDVariable()
                c << (0)
                # (Line 65) if(v._mouseX[cp] > 20 && v._mouseX[cp] < 140)  {
                _t7 = EUDIf()
                EUDTraceLog(65)
                if _t7(EUDSCAnd()(v._mouseX[cp] <= 20, neg=True)(v._mouseX[cp] >= 140, neg=True)()):
                    # (Line 66) c = 1;
                    EUDTraceLog(66)
                    c << (1)
                    # (Line 67) if(v._mouseY[cp] < 128 || v._mouseY[cp] > 222) {
                    _t8 = EUDIf()
                    EUDTraceLog(67)
                    if _t8(EUDSCOr()(v._mouseY[cp] >= 128, neg=True)(v._mouseY[cp] <= 222, neg=True)()):
                        # (Line 68) mousePosition[cp] = 0;
                        EUDTraceLog(68)
                        _ARRW(mousePosition, cp) << (0)
                        # (Line 69) }
                        # (Line 70) }
                    EUDEndIf()
                    # (Line 71) else mousePosition[cp] = 0;
                if EUDElse()():
                    EUDTraceLog(71)
                    _ARRW(mousePosition, cp) << (0)
                    # (Line 73) for(var i = 0; i < 7; i++) {
                EUDEndIf()
                EUDTraceLog(73)
                i = EUDVariable()
                i << (0)
                _t9 = EUDWhile()
                EUDTraceLog(73)
                if _t9(i >= 7, neg=True):
                    def _t10():
                        EUDTraceLog(73)
                        i.__iadd__(1)
                    # (Line 74) if(c == 1 && v._mouseY[cp] >= 128 + 16 * i && v._mouseY[cp] <= 142 + 16 * i) {
                    _t11 = EUDIf()
                    EUDTraceLog(74)
                    if _t11(EUDSCAnd()(c == 1)(v._mouseY[cp] >= 128 + 16 * i)(v._mouseY[cp] <= 142 + 16 * i)()):
                        # (Line 75) if(mousePosition[cp] != i + 1) {
                        _t12 = EUDIf()
                        EUDTraceLog(75)
                        if _t12(mousePosition[cp] == i + 1, neg=True):
                            # (Line 76) color[i] = Db("\x17");
                            EUDTraceLog(76)
                            _ARRW(color, i) << (Db("\x17"))
                            # (Line 77) mousePosition[cp] = i + 1;
                            EUDTraceLog(77)
                            _ARRW(mousePosition, cp) << (i + 1)
                            # (Line 78) v.textRefresh[cp] = 1;
                            EUDTraceLog(78)
                            _ARRW(v.textRefresh, cp) << (1)
                            # (Line 79) }
                            # (Line 80) }
                        EUDEndIf()
                        # (Line 81) else if(strcmp(color[i], Db("\x17")) == 0) {
                    _t13 = EUDElseIf()
                    EUDTraceLog(81)
                    if _t13(f_strcmp(color[i], Db("\x17")) == 0):
                        # (Line 82) color[i] = Db("\x05");
                        EUDTraceLog(82)
                        _ARRW(color, i) << (Db("\x05"))
                        # (Line 83) v.textRefresh[cp] = 1;
                        EUDTraceLog(83)
                        _ARRW(v.textRefresh, cp) << (1)
                        # (Line 84) }
                        # (Line 85) }
                    EUDEndIf()
                    # (Line 86) }
                    EUDSetContinuePoint()
                    _t10()
                EUDEndWhile()
                # (Line 87) if(v.mouse[cp] == 1) {
            EUDEndIf()
            _t14 = EUDIf()
            EUDTraceLog(87)
            if _t14(v.mouse[cp] == 1):
                # (Line 88) if(v.mouseX[cp] < 22 || v.mouseX[cp] > 140) return;
                _t15 = EUDIf()
                EUDTraceLog(88)
                if _t15(EUDSCOr()(v.mouseX[cp] >= 22, neg=True)(v.mouseX[cp] <= 140, neg=True)()):
                    EUDTraceLog(88)
                    EUDReturn()
                    # (Line 89) if(sys.clickedLine(2)) SelectSlot(1);
                EUDEndIf()
                _t16 = EUDIf()
                EUDTraceLog(89)
                if _t16(sys.f_clickedLine(2)):
                    EUDTraceLog(89)
                    SelectSlot(1)
                    # (Line 90) else if(sys.clickedLine(3)) SelectSlot(2);
                _t17 = EUDElseIf()
                EUDTraceLog(90)
                if _t17(sys.f_clickedLine(3)):
                    EUDTraceLog(90)
                    SelectSlot(2)
                    # (Line 91) }
                EUDEndIf()
                # (Line 92) }
            EUDEndIf()
            # (Line 93) else if(page[cp] == 2) {
        _t18 = EUDElseIf()
        EUDTraceLog(93)
        if _t18(page[cp] == 2):
            # (Line 94) if(v.textRefresh[cp] == 1) {
            _t19 = EUDIf()
            EUDTraceLog(94)
            if _t19(v.textRefresh[cp] == 1):
                # (Line 95) v.textRefresh[cp] = 0;
                EUDTraceLog(95)
                _ARRW(v.textRefresh, cp) << (0)
                # (Line 96) const w = Weapon.cast(equip[t + 0]);
                EUDTraceLog(96)
                w = Weapon.cast(equip[t + 0])
                # (Line 97) v.display.append("   \x07▶ \x04무기\n");
                EUDTraceLog(97)
                v.display.append("   \x07▶ \x04무기\n")
                # (Line 98) v.display.append("   \x19·  \x1D이름 ", ptr2s(w.name), "\n");
                EUDTraceLog(98)
                v.display.append("   \x19·  \x1D이름 ", ptr2s(w.name), "\n")
                # (Line 99) v.display.append("   \x19·  \x1D공격력", w.phyDmg, "\n");
                EUDTraceLog(99)
                v.display.append("   \x19·  \x1D공격력", w.phyDmg, "\n")
                # (Line 100) v.display.append("   \x19·  ", color[0], "뒤로가기");
                EUDTraceLog(100)
                v.display.append("   \x19·  ", color[0], "뒤로가기")
                # (Line 101) }
                # (Line 102) v.display.DisplayAt(0);
            EUDEndIf()
            EUDTraceLog(102)
            v.display.DisplayAt(0)
            # (Line 103) if(IsUserCP()) {
            _t20 = EUDIf()
            EUDTraceLog(103)
            if _t20(IsUserCP()):
                # (Line 104) if(v.isMouseMoved[cp] == 1) {
                _t21 = EUDIf()
                EUDTraceLog(104)
                if _t21(v.isMouseMoved[cp] == 1):
                    # (Line 105) v.isMouseMoved[cp] = 0;
                    EUDTraceLog(105)
                    _ARRW(v.isMouseMoved, cp) << (0)
                    # (Line 106) var c = 0;
                    EUDTraceLog(106)
                    c = EUDVariable()
                    c << (0)
                    # (Line 107) if(v._mouseX[cp] > 20 && v._mouseX[cp] < 242)  {
                    _t22 = EUDIf()
                    EUDTraceLog(107)
                    if _t22(EUDSCAnd()(v._mouseX[cp] <= 20, neg=True)(v._mouseX[cp] >= 242, neg=True)()):
                        # (Line 108) c = 1;
                        EUDTraceLog(108)
                        c << (1)
                        # (Line 109) if(v._mouseY[cp] < 160 || v._mouseY[cp] > 174) {
                        _t23 = EUDIf()
                        EUDTraceLog(109)
                        if _t23(EUDSCOr()(v._mouseY[cp] >= 160, neg=True)(v._mouseY[cp] <= 174, neg=True)()):
                            # (Line 110) mousePosition[cp] = 0;
                            EUDTraceLog(110)
                            _ARRW(mousePosition, cp) << (0)
                            # (Line 111) }
                            # (Line 112) }
                        EUDEndIf()
                        # (Line 113) else mousePosition[cp] = 0;
                    if EUDElse()():
                        EUDTraceLog(113)
                        _ARRW(mousePosition, cp) << (0)
                        # (Line 115) if(c == 1 && v._mouseY[cp] >= 160 && v._mouseY[cp] <= 174) {
                    EUDEndIf()
                    _t24 = EUDIf()
                    EUDTraceLog(115)
                    if _t24(EUDSCAnd()(c == 1)(v._mouseY[cp] >= 160)(v._mouseY[cp] <= 174)()):
                        # (Line 116) if(mousePosition[cp] != 1) {
                        _t25 = EUDIf()
                        EUDTraceLog(116)
                        if _t25(mousePosition[cp] == 1, neg=True):
                            # (Line 117) color[0] = Db("\x17");
                            EUDTraceLog(117)
                            _ARRW(color, 0) << (Db("\x17"))
                            # (Line 118) mousePosition[cp] = 1;
                            EUDTraceLog(118)
                            _ARRW(mousePosition, cp) << (1)
                            # (Line 119) v.textRefresh[cp] = 1;
                            EUDTraceLog(119)
                            _ARRW(v.textRefresh, cp) << (1)
                            # (Line 120) }
                            # (Line 121) }
                        EUDEndIf()
                        # (Line 122) }
                    EUDEndIf()
                    # (Line 124) }
                EUDEndIf()
                # (Line 125) if(v.mouse[cp] == 1) {
            EUDEndIf()
            _t26 = EUDIf()
            EUDTraceLog(125)
            if _t26(v.mouse[cp] == 1):
                # (Line 126) if(v.mouseX[cp] < 22 || v.mouseX[cp] > 140) return;
                _t27 = EUDIf()
                EUDTraceLog(126)
                if _t27(EUDSCOr()(v.mouseX[cp] >= 22, neg=True)(v.mouseX[cp] <= 140, neg=True)()):
                    EUDTraceLog(126)
                    EUDReturn()
                    # (Line 127) if(sys.clickedLine(2)) Back();
                EUDEndIf()
                _t28 = EUDIf()
                EUDTraceLog(127)
                if _t28(sys.f_clickedLine(2)):
                    EUDTraceLog(127)
                    Back()
                    # (Line 128) }
                EUDEndIf()
                # (Line 130) }
            EUDEndIf()
            # (Line 131) }
        EUDEndIf()
        # (Line 132) }
    EUDEndIf()
    # (Line 134) function ResetEquip() {

@EUDTracedFunc
def ResetEquip():
    # (Line 135) const cp = getcurpl();
    EUDTraceLog(135)
    cp = f_getcurpl()
    # (Line 136) const t = 7 * cp;
    EUDTraceLog(136)
    t = 7 * cp
    # (Line 138) equip[t + 0] = Weapon.alloc();
    EUDTraceLog(138)
    _ARRW(equip, t + 0) << (Weapon.alloc())
    # (Line 139) const weapon = Weapon.cast(equip[t + 0]);
    EUDTraceLog(139)
    weapon_1 = Weapon.cast(equip[t + 0])
    # (Line 140) weapon.name = Db("Empty");
    EUDTraceLog(140)
    _ATTW(weapon_1, 'name') << (Db("Empty"))
    # (Line 142) equip[t + 1] = Helmet.alloc();
    EUDTraceLog(142)
    _ARRW(equip, t + 1) << (Helmet.alloc())
    # (Line 143) const helmet = Helmet.cast(equip[t + 1]);
    EUDTraceLog(143)
    helmet = Helmet.cast(equip[t + 1])
    # (Line 144) helmet.name = Db("Empty");
    EUDTraceLog(144)
    _ATTW(helmet, 'name') << (Db("Empty"))
    # (Line 146) equip[t + 2] = Armor.alloc();
    EUDTraceLog(146)
    _ARRW(equip, t + 2) << (Armor.alloc())
    # (Line 147) const armor = Armor.cast(equip[t + 2]);
    EUDTraceLog(147)
    armor_1 = Armor.cast(equip[t + 2])
    # (Line 148) armor.name = Db("Empty");
    EUDTraceLog(148)
    _ATTW(armor_1, 'name') << (Db("Empty"))
    # (Line 150) equip[t + 3] = Glove.alloc();
    EUDTraceLog(150)
    _ARRW(equip, t + 3) << (Glove.alloc())
    # (Line 151) const glove = Glove.cast(equip[t + 3]);
    EUDTraceLog(151)
    glove = Glove.cast(equip[t + 3])
    # (Line 152) glove.name = Db("Empty");
    EUDTraceLog(152)
    _ATTW(glove, 'name') << (Db("Empty"))
    # (Line 154) equip[t + 4] = Cape.alloc();
    EUDTraceLog(154)
    _ARRW(equip, t + 4) << (Cape.alloc())
    # (Line 155) const cape = Cape.cast(equip[t + 4]);
    EUDTraceLog(155)
    cape = Cape.cast(equip[t + 4])
    # (Line 156) cape.name = Db("Empty");
    EUDTraceLog(156)
    _ATTW(cape, 'name') << (Db("Empty"))
    # (Line 158) equip[t + 5] = Ring.alloc();
    EUDTraceLog(158)
    _ARRW(equip, t + 5) << (Ring.alloc())
    # (Line 159) const ring = Ring.cast(equip[t + 5]);
    EUDTraceLog(159)
    ring = Ring.cast(equip[t + 5])
    # (Line 160) ring.name = Db("Empty");
    EUDTraceLog(160)
    _ATTW(ring, 'name') << (Db("Empty"))
    # (Line 162) equip[t + 6] = Necklace.alloc();
    EUDTraceLog(162)
    _ARRW(equip, t + 6) << (Necklace.alloc())
    # (Line 163) const necklace = Necklace.cast(equip[t + 6]);
    EUDTraceLog(163)
    necklace = Necklace.cast(equip[t + 6])
    # (Line 164) necklace.name = Db("Empty");
    EUDTraceLog(164)
    _ATTW(necklace, 'name') << (Db("Empty"))
    # (Line 165) }
    # (Line 167) function Open() {

@EUDTracedFunc
def Open():
    # (Line 168) const cp = getcurpl();
    EUDTraceLog(168)
    cp = f_getcurpl()
    # (Line 169) if(user.inConv[cp] == 1) return;
    _t1 = EUDIf()
    EUDTraceLog(169)
    if _t1(user.inConv[cp] == 1):
        EUDTraceLog(169)
        EUDReturn()
        # (Line 170) sys.CloseWindow();
    EUDEndIf()
    EUDTraceLog(170)
    sys.CloseWindow()
    # (Line 171) if(IsUserCP()) {
    _t2 = EUDIf()
    EUDTraceLog(171)
    if _t2(IsUserCP()):
        # (Line 172) for(var i = 0; i < 7; i++) color[i] = Db("\x05");
        EUDTraceLog(172)
        i = EUDVariable()
        i << (0)
        _t3 = EUDWhile()
        EUDTraceLog(172)
        if _t3(i >= 7, neg=True):
            def _t4():
                EUDTraceLog(172)
                i.__iadd__(1)
            EUDTraceLog(172)
            _ARRW(color, i) << (Db("\x05"))
            # (Line 173) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 174) screen.SetLight(25);
    EUDEndIf()
    EUDTraceLog(174)
    screen.SetLight(25)
    # (Line 175) page[cp] = 1;
    EUDTraceLog(175)
    _ARRW(page, cp) << (1)
    # (Line 176) user.openedEquip[cp] = 1;
    EUDTraceLog(176)
    _ARRW(user.openedEquip, cp) << (1)
    # (Line 177) v.textRefresh[cp] = 1;
    EUDTraceLog(177)
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 178) }
    # (Line 180) function Close() {

@EUDTracedFunc
def Close():
    # (Line 181) const cp = getcurpl();
    EUDTraceLog(181)
    cp = f_getcurpl()
    # (Line 182) user.openedEquip[cp] = 0;
    EUDTraceLog(182)
    _ARRW(user.openedEquip, cp) << (0)
    # (Line 183) screen.SetLight(31);
    EUDTraceLog(183)
    screen.SetLight(31)
    # (Line 184) page[cp] = 1;
    EUDTraceLog(184)
    _ARRW(page, cp) << (1)
    # (Line 185) sys.TextClear();
    EUDTraceLog(185)
    sys.TextClear()
    # (Line 186) }
    # (Line 188) function EquipWeapon(index) {

@EUDTracedFunc
def EquipWeapon(index):
    # (Line 189) const cp = getcurpl();
    EUDTraceLog(189)
    cp = f_getcurpl()
    # (Line 190) const w1 = weapon.Weapon.cast(weapon.weaponList[index - 1]);
    EUDTraceLog(190)
    w1 = weapon.Weapon.cast(weapon.weaponList[index - 1])
    # (Line 191) if(user.level[cp] >= w1.lv) {
    _t1 = EUDIf()
    EUDTraceLog(191)
    if _t1(user.level[cp] >= w1.lv):
        # (Line 192) const w2 = Weapon.cast(equip[7 * cp + 0]);
        EUDTraceLog(192)
        w2 = Weapon.cast(equip[7 * cp + 0])
        # (Line 193) if(index == w2.index) {
        _t2 = EUDIf()
        EUDTraceLog(193)
        if _t2(index == w2.index):
            # (Line 194) v.s.print("\x05이미 장착중입니다");
            EUDTraceLog(194)
            v.s.print("\x05이미 장착중입니다")
            # (Line 195) return;
            EUDTraceLog(195)
            EUDReturn()
            # (Line 196) }
            # (Line 197) ReleaseWeapon();
        EUDEndIf()
        EUDTraceLog(197)
        ReleaseWeapon()
        # (Line 198) w2.index = w1.index;
        EUDTraceLog(198)
        _ATTW(w2, 'index') << (w1.index)
        # (Line 199) w2.phyDmg = w1.phyDmg;
        EUDTraceLog(199)
        _ATTW(w2, 'phyDmg') << (w1.phyDmg)
        # (Line 200) w2.magicDmg = w1.magicDmg;
        EUDTraceLog(200)
        _ATTW(w2, 'magicDmg') << (w1.magicDmg)
        # (Line 201) w2.name = w1.name;
        EUDTraceLog(201)
        _ATTW(w2, 'name') << (w1.name)
        # (Line 202) user.equipedWeapon[cp] = index;
        EUDTraceLog(202)
        _ARRW(user.equipedWeapon, cp) << (index)
        # (Line 204) stats.SetDamage();
        EUDTraceLog(204)
        stats.SetDamage()
        # (Line 205) settbl2(229 + cp, 0, "\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d");
        EUDTraceLog(205)
        f_settbl2(229 + cp, 0, "\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d")
        # (Line 206) settbl2(229 + cp, 0, epd2s(w1.name2));
        EUDTraceLog(206)
        f_settbl2(229 + cp, 0, epd2s(w1.name2))
        # (Line 207) v.s.printAt(10, "\x1f‡ \x04", ptr2s(w2.name), " \x05장착");
        EUDTraceLog(207)
        v.s.printAt(10, "\x1f‡ \x04", ptr2s(w2.name), " \x05장착")
        # (Line 208) item.RemoveItem(2, w1.index, 1);
        EUDTraceLog(208)
        item.RemoveItem(2, w1.index, 1)
        # (Line 211) if(index < 50) {
        _t3 = EUDIf()
        EUDTraceLog(211)
        if _t3(index >= 50, neg=True):
            # (Line 212) if(user.equipedWeaponType[cp] != 1) {
            _t4 = EUDIf()
            EUDTraceLog(212)
            if _t4(user.equipedWeaponType[cp] == 1, neg=True):
                # (Line 213) bwrite(0x65FD00 + 18424 + v.unitNum[cp], 188); // 외형 다크
                EUDTraceLog(213)
                f_bwrite(0x65FD00 + 18424 + v.unitNum[cp], 188)
                # (Line 214) bwrite(0x65FD00 + 14776 + cp, cp); // 무기
                EUDTraceLog(214)
                f_bwrite(0x65FD00 + 14776 + cp, cp)
                # (Line 215) dwwrite(0x6564E0 + 3984 + cp * 4, 32); // 무기 사거리
                EUDTraceLog(215)
                f_dwwrite(0x6564E0 + 3984 + cp * 4, 32)
                # (Line 216) bwrite(0x6564E0 + 2776 + cp, 40); // 무기 공격속도
                EUDTraceLog(216)
                f_bwrite(0x6564E0 + 2776 + cp, 40)
                # (Line 217) wwrite(0x6564E0 + 672 + cp * 2, 353); // 무기 아이콘
                EUDTraceLog(217)
                f_wwrite(0x6564E0 + 672 + cp * 2, 353)
                # (Line 218) user.equipedWeaponType[cp] = 1;
                EUDTraceLog(218)
                _ARRW(user.equipedWeaponType, cp) << (1)
                # (Line 219) }
                # (Line 220) else return;
            if EUDElse()():
                EUDTraceLog(220)
                EUDReturn()
                # (Line 221) }
            EUDEndIf()
            # (Line 222) setloc("temp", user.posX[cp], user.posY[cp]);
        EUDEndIf()
        EUDTraceLog(222)
        f_setloc("temp", user.posX[cp], user.posY[cp])
        # (Line 223) var hp = dwread_epd(user.character[cp] + 0x8 / 4);
        EUDTraceLog(223)
        hp = EUDVariable()
        hp << (f_dwread_epd(user.character[cp] + 0x8 // 4))
        # (Line 224) RemoveUnit(v.unitNum[cp], cp);
        # (Line 225) user.character[cp] = sys.SetNextUnitEPD();
        EUDTraceLog(224)
        DoActions(RemoveUnit(v.unitNum[cp], cp))
        EUDTraceLog(225)
        _ARRW(user.character, cp) << (sys.SetNextUnitEPD())
        # (Line 226) CreateUnit(1, v.unitNum[cp], "temp", cp);
        # (Line 228) SetMemoryXEPD(user.character[cp] + 0x8F / 4, SetTo, user.level[cp] << 24, 0xFF000000);
        EUDTraceLog(226)
        DoActions(CreateUnit(1, v.unitNum[cp], "temp", cp))
        # (Line 229) SetMemoryEPD(user.character[cp] + 0x8 / 4, SetTo, hp);
        EUDTraceLog(228)
        DoActions(SetMemoryXEPD(user.character[cp] + 0x8F // 4, SetTo, _LSH(user.level[cp],24), 0xFF000000))
        # (Line 230) }
        EUDTraceLog(229)
        DoActions(SetMemoryEPD(user.character[cp] + 0x8 // 4, SetTo, hp))
        # (Line 231) else v.s.printAt(10, "\x05장착을 위한 레벨이 부족합니다.");
    if EUDElse()():
        EUDTraceLog(231)
        v.s.printAt(10, "\x05장착을 위한 레벨이 부족합니다.")
        # (Line 232) }
    EUDEndIf()
    # (Line 234) function EquipArmor(index) {

@EUDTracedFunc
def EquipArmor(index):
    # (Line 235) const cp = getcurpl();
    EUDTraceLog(235)
    cp = f_getcurpl()
    # (Line 236) const a1 = armor.Armor.cast(armor.armorList[index - 1]);
    EUDTraceLog(236)
    a1 = armor.Armor.cast(armor.armorList[index - 1])
    # (Line 237) if(user.level[cp] >= a1.lv) {
    _t1 = EUDIf()
    EUDTraceLog(237)
    if _t1(user.level[cp] >= a1.lv):
        # (Line 238) const a2 = armor.Armor.cast(equip[7 * cp + 1]);
        EUDTraceLog(238)
        a2 = armor.Armor.cast(equip[7 * cp + 1])
        # (Line 239) a2.index = a1.index;
        EUDTraceLog(239)
        _ATTW(a2, 'index') << (a1.index)
        # (Line 240) a2.defense = a1.defense;
        EUDTraceLog(240)
        _ATTW(a2, 'defense') << (a1.defense)
        # (Line 241) a2.name = a1.name;
        EUDTraceLog(241)
        _ATTW(a2, 'name') << (a1.name)
        # (Line 242) settbl2(411 + cp, 0, "\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d");
        EUDTraceLog(242)
        f_settbl2(411 + cp, 0, "\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d")
        # (Line 243) settbl2(411 + cp, 0, epd2s(a1.name2));
        EUDTraceLog(243)
        f_settbl2(411 + cp, 0, epd2s(a1.name2))
        # (Line 244) v.s.printAt(10, "\x1f‡ \x04", ptr2s(a2.name), " \x05장착");
        EUDTraceLog(244)
        v.s.printAt(10, "\x1f‡ \x04", ptr2s(a2.name), " \x05장착")
        # (Line 245) item.RemoveItem(3, a1.index, 1);
        EUDTraceLog(245)
        item.RemoveItem(3, a1.index, 1)
        # (Line 246) stats.SetDefense();
        EUDTraceLog(246)
        stats.SetDefense()
        # (Line 247) }
        # (Line 248) else v.s.printAt(10, "\x05장착을 위한 레벨이 부족합니다.");
    if EUDElse()():
        EUDTraceLog(248)
        v.s.printAt(10, "\x05장착을 위한 레벨이 부족합니다.")
        # (Line 249) }
    EUDEndIf()
    # (Line 251) function SelectSlot(slot) {

@EUDTracedFunc
def SelectSlot(slot):
    # (Line 252) const cp = getcurpl();
    EUDTraceLog(252)
    cp = f_getcurpl()
    # (Line 253) v.textRefresh[cp] = 1;
    EUDTraceLog(253)
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 254) sys.TextClear();
    EUDTraceLog(254)
    sys.TextClear()
    # (Line 255) if(IsUserCP()) color[0] = Db("\x05");
    _t1 = EUDIf()
    EUDTraceLog(255)
    if _t1(IsUserCP()):
        EUDTraceLog(255)
        _ARRW(color, 0) << (Db("\x05"))
        # (Line 256) page[cp] = slot + 1;
    EUDEndIf()
    EUDTraceLog(256)
    _ARRW(page, cp) << (slot + 1)
    # (Line 257) }
    # (Line 259) function ReleaseWeapon() {

@EUDTracedFunc
def ReleaseWeapon():
    # (Line 260) const cp = getcurpl();
    EUDTraceLog(260)
    cp = f_getcurpl()
    # (Line 261) const c = Weapon.cast(equip[7 * cp + 0]);
    EUDTraceLog(261)
    c = Weapon.cast(equip[7 * cp + 0])
    # (Line 262) if(c.index == 0) return;
    _t1 = EUDIf()
    EUDTraceLog(262)
    if _t1(c.index == 0):
        EUDTraceLog(262)
        EUDReturn()
        # (Line 263) const weaponNum = c.index;
    EUDEndIf()
    EUDTraceLog(263)
    weaponNum = c.index
    # (Line 264) item.AddItem(10000, 2, weaponNum, 1, false);
    EUDTraceLog(264)
    item.AddItem(10000, 2, weaponNum, 1, False)
    # (Line 265) }
    # (Line 267) function Back() {

@EUDTracedFunc
def Back():
    # (Line 268) const cp = getcurpl();
    EUDTraceLog(268)
    cp = f_getcurpl()
    # (Line 269) if(IsUserCP()) color[0] = Db("\x05");
    _t1 = EUDIf()
    EUDTraceLog(269)
    if _t1(IsUserCP()):
        EUDTraceLog(269)
        _ARRW(color, 0) << (Db("\x05"))
        # (Line 270) page[cp] = 1;
    EUDEndIf()
    EUDTraceLog(270)
    _ARRW(page, cp) << (1)
    # (Line 271) v.textRefresh[cp] = 1;
    EUDTraceLog(271)
    _ARRW(v.textRefresh, cp) << (1)
    # (Line 272) sys.TextClear();
    EUDTraceLog(272)
    sys.TextClear()
    # (Line 273) }
