## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System as sys;
import System as sys
# (Line 2) import NPC.NPC as npc;
from NPC import NPC as npc
# (Line 4) function CreateNPC() {
@EUDTracedFunc
def CreateNPC():
    # (Line 15) npc.Guard[0] = epdread_epd(EPD(0x628438));
    EUDTraceLog(15)
    _ARRW(npc.Guard, 0) << (f_epdread_epd(EPD(0x628438)))
    # (Line 17) SetMemoryXEPD(EPD(0x664507), SetTo, 78 << 24, 0xFF000000);
    # (Line 18) setloc("temp", 852, 344);
    EUDTraceLog(17)
    DoActions(SetMemoryXEPD(EPD(0x664507), SetTo, _LSH(78,24), 0xFF000000))
    EUDTraceLog(18)
    f_setloc("temp", 852, 344)
    # (Line 19) CreateUnitWithProperties(1, "Terran Civilian", "temp", P7, UnitProperty(invincible = true));
    # (Line 20) SetMemoryXEPD(npc.Guard[0] + 0x26 / 4, SetTo, 2 * 65536, 0xFF0000); // 0x26 경비병 - 2
    EUDTraceLog(19)
    DoActions(CreateUnitWithProperties(1, "Terran Civilian", "temp", P7, UnitProperty(invincible=True)))
    # (Line 22) npc.Guard[1] = epdread_epd(EPD(0x628438));
    EUDTraceLog(20)
    DoActions(SetMemoryXEPD(npc.Guard[0] + 0x26 // 4, SetTo, 2 * 65536, 0xFF0000))
    EUDTraceLog(22)
    _ARRW(npc.Guard, 1) << (f_epdread_epd(EPD(0x628438)))
    # (Line 23) setloc("temp", 852, 470);
    EUDTraceLog(23)
    f_setloc("temp", 852, 470)
    # (Line 24) CreateUnitWithProperties(1, "Terran Civilian", "temp", P7, UnitProperty(invincible = true));
    # (Line 25) SetMemoryXEPD(npc.Guard[1] + 0x26 / 4, SetTo, 2 * 65536, 0xFF0000); // 0x26 경비병 - 2
    EUDTraceLog(24)
    DoActions(CreateUnitWithProperties(1, "Terran Civilian", "temp", P7, UnitProperty(invincible=True)))
    # (Line 26) }
    EUDTraceLog(25)
    DoActions(SetMemoryXEPD(npc.Guard[1] + 0x26 // 4, SetTo, 2 * 65536, 0xFF0000))
