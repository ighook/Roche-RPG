## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System as sys;
import System as sys
# (Line 2) import User.Info as user;
from User import Info as user
# (Line 3) import Variable as v;
import Variable as v
# (Line 4) import Item.Manager as item;
from Item import Manager as item
# (Line 6) function BuildCheckXEPD(unitEPD ,Unit: TrgUnit);
# (Line 7) function BuildResetXEPD(unitEPD);
# (Line 8) function SkillUseCheck();
# (Line 9) function UseHPPtn();
# (Line 10) function UseMPPtn();
# (Line 12) function clickedUnit() {
@EUDTracedFunc
def f_clickedUnit():
    # (Line 13) foreach(cp: EUDLoopPlayer())  {
    for cp in EUDLoopPlayer():
        # (Line 14) var ptr;
        ptr = EUDVariable()
        # (Line 15) var epd;
        epd = EUDVariable()
        # (Line 16) var unitType;
        unitType = EUDVariable()
        # (Line 18) const prevPtrs, prevEPDs = PVariable(), PVariable();
        EUDTraceLog(18)
        prevPtrs, prevEPDs = List2Assignable([PVariable(), PVariable()])
        # (Line 19) const clickedUnitEPD = EPD(0x6284E8) + 12 * cp;
        EUDTraceLog(19)
        clickedUnitEPD = EPD(0x6284E8) + 12 * cp
        # (Line 20) EUDContinueIf(MemoryEPD(clickedUnitEPD, AtMost, 0x59CCA7));
        EUDTraceLog(20)
        EUDContinueIf(MemoryEPD(clickedUnitEPD, AtMost, 0x59CCA7))
        # (Line 21) const prevPtr = prevPtrs[cp];
        EUDTraceLog(21)
        prevPtr = prevPtrs[cp]
        # (Line 22) setcurpl(cp);
        EUDTraceLog(22)
        f_setcurpl(cp)
        # (Line 23) if(MemoryEPD(clickedUnitEPD, (10), prevPtr)) {
        _t1 = EUDIf()
        EUDTraceLog(23)
        if _t1(MemoryEPD(clickedUnitEPD, (10), prevPtr)):
            # (Line 25) const prevEPD = prevEPDs[cp];
            EUDTraceLog(25)
            prevEPD = prevEPDs[cp]
            # (Line 26) SetVariables(list(ptr, epd), list(prevPtr, prevEPD));
            EUDTraceLog(26)
            SetVariables(FlattenList([ptr, epd]), FlattenList([prevPtr, prevEPD]))
            # (Line 27) }
            # (Line 28) else {
        if EUDElse()():
            # (Line 30) SetVariables(list(ptr, epd), cunitepdread_epd(clickedUnitEPD));
            EUDTraceLog(30)
            SetVariables(FlattenList([ptr, epd]), f_cunitepdread_epd(clickedUnitEPD))
            # (Line 31) prevPtrs[cp] = ptr;
            EUDTraceLog(31)
            _ARRW(prevPtrs, cp) << (ptr)
            # (Line 32) prevEPDs[cp] = epd;
            EUDTraceLog(32)
            _ARRW(prevEPDs, cp) << (epd)
            # (Line 34) unitType = wread_epd(epd + 0x64 / 4, 0x64 % 4);
            EUDTraceLog(34)
            unitType << (f_wread_epd(epd + 0x64 // 4, 0x64 % 4))
            # (Line 36) var temp = maskread_epd(epd + 0x026 / 4, 0xFF0000) / 65536;
            EUDTraceLog(36)
            temp = EUDVariable()
            temp << (f_maskread_epd(epd + 0x026 // 4, 0xFF0000) // 65536)
            # (Line 37) v.s.print("\x07[clickedUnit.eps] \x1f유닛 타입 \x04: ", unitType, "  \x1f0x026 \x04: ", temp);
            EUDTraceLog(37)
            v.s.print("\x07[clickedUnit.eps] \x1f유닛 타입 \x04: ", unitType, "  \x1f0x026 \x04: ", temp)
            # (Line 38) if(IsUserCP()) {
            _t2 = EUDIf()
            EUDTraceLog(38)
            if _t2(IsUserCP()):
                # (Line 39) settbl2(16, 0, "\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D");
                EUDTraceLog(39)
                f_settbl2(16, 0, "\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D\x0D")
                # (Line 40) if(temp == 0) settbl2(16, 0, "\x05시민");
                _t3 = EUDIf()
                EUDTraceLog(40)
                if _t3(temp == 0):
                    EUDTraceLog(40)
                    f_settbl2(16, 0, "\x05시민")
                    # (Line 41) else if(temp == 1) settbl2(16, 0, "\x04리아");
                _t4 = EUDElseIf()
                EUDTraceLog(41)
                if _t4(temp == 1):
                    EUDTraceLog(41)
                    f_settbl2(16, 0, "\x04리아")
                    # (Line 42) else if(temp == 2) settbl2(16, 0, "\x04경비병");
                _t5 = EUDElseIf()
                EUDTraceLog(42)
                if _t5(temp == 2):
                    EUDTraceLog(42)
                    f_settbl2(16, 0, "\x04경비병")
                    # (Line 43) else if(temp == 3) settbl2(16, 0, "\x04전사");
                _t6 = EUDElseIf()
                EUDTraceLog(43)
                if _t6(temp == 3):
                    EUDTraceLog(43)
                    f_settbl2(16, 0, "\x04전사")
                    # (Line 44) else if(temp == 4) settbl2(16, 0, "\x04궁수");
                _t7 = EUDElseIf()
                EUDTraceLog(44)
                if _t7(temp == 4):
                    EUDTraceLog(44)
                    f_settbl2(16, 0, "\x04궁수")
                    # (Line 45) }
                EUDEndIf()
                # (Line 46) sys.ButtonRefresh();
            EUDEndIf()
            EUDTraceLog(46)
            sys.ButtonRefresh()
            # (Line 47) }
            # (Line 49) UseHPPtn(unitType);
        EUDEndIf()
        EUDTraceLog(49)
        UseHPPtn(unitType)
        # (Line 50) UseMPPtn(unitType);
        EUDTraceLog(50)
        UseMPPtn(unitType)
        # (Line 52) if(MemoryEPD(epd + 0x98/4, Exactly, 0xE400E4) && MemoryEPD(epd + 0x9C/4, Exactly, 0xE400E4) && MemoryXEPD(epd + 0xA0/4, Exactly, 0xE4, 0xFFFF)) {
        _t8 = EUDIf()
        EUDTraceLog(52)
        if _t8(EUDSCAnd()(MemoryEPD(epd + 0x98 // 4, Exactly, 0xE400E4))(MemoryEPD(epd + 0x9C // 4, Exactly, 0xE400E4))(MemoryXEPD(epd + 0xA0 // 4, Exactly, 0xE4, 0xFFFF))()):
            # (Line 53) continue;
            EUDTraceLog(53)
            EUDContinue()
            # (Line 54) };
        EUDEndIf()
        # (Line 56) }
        # (Line 57) }

    # (Line 76) function BuildCheckXEPD(unitEPD ,Unit: TrgUnit) {

@EUDTracedTypedFunc([None, TrgUnit])
def BuildCheckXEPD(unitEPD, Unit):
    # (Line 77) const mulUnit = Unit * 65536;
    EUDTraceLog(77)
    mulUnit = Unit * 65536
    # (Line 78) if(MemoryXEPD(unitEPD + 38, Exactly, Unit, 0xFFFF)){
    _t1 = EUDIf()
    EUDTraceLog(78)
    if _t1(MemoryXEPD(unitEPD + 38, Exactly, Unit, 0xFFFF)):
        # (Line 79) return True;
        EUDTraceLog(79)
        EUDReturn(True)
        # (Line 80) } else if(MemoryXEPD(unitEPD + 38, Exactly, mulUnit, 0xFFFF0000)){
    _t2 = EUDElseIf()
    EUDTraceLog(80)
    if _t2(MemoryXEPD(unitEPD + 38, Exactly, mulUnit, 0xFFFF0000)):
        # (Line 81) return True;
        EUDTraceLog(81)
        EUDReturn(True)
        # (Line 82) } else if(MemoryXEPD(unitEPD + 39, Exactly, Unit, 0xFFFF)){
    _t3 = EUDElseIf()
    EUDTraceLog(82)
    if _t3(MemoryXEPD(unitEPD + 39, Exactly, Unit, 0xFFFF)):
        # (Line 83) return True;
        EUDTraceLog(83)
        EUDReturn(True)
        # (Line 84) } else if(MemoryXEPD(unitEPD + 39, Exactly, mulUnit, 0xFFFF0000)){
    _t4 = EUDElseIf()
    EUDTraceLog(84)
    if _t4(MemoryXEPD(unitEPD + 39, Exactly, mulUnit, 0xFFFF0000)):
        # (Line 85) return True;
        EUDTraceLog(85)
        EUDReturn(True)
        # (Line 86) } else if(MemoryXEPD(unitEPD + 40, Exactly, Unit, 0xFFFF)){
    _t5 = EUDElseIf()
    EUDTraceLog(86)
    if _t5(MemoryXEPD(unitEPD + 40, Exactly, Unit, 0xFFFF)):
        # (Line 87) return True;
        EUDTraceLog(87)
        EUDReturn(True)
        # (Line 88) } else{
    if EUDElse()():
        # (Line 89) return False;
        EUDTraceLog(89)
        EUDReturn(False)
        # (Line 90) };
    EUDEndIf()
    # (Line 91) }
    # (Line 93) function BuildResetXEPD(unitEPD) {

@EUDTracedFunc
def BuildResetXEPD(unitEPD):
    # (Line 94) SetMemoryXEPD(unitEPD + 38, SetTo, 14942436, 0xFFFFFFFF);
    # (Line 95) SetMemoryXEPD(unitEPD + 39, SetTo, 14942436, 0xFFFFFFFF);
    EUDTraceLog(94)
    DoActions(SetMemoryXEPD(unitEPD + 38, SetTo, 14942436, 0xFFFFFFFF))
    # (Line 96) SetMemoryXEPD(unitEPD + 40, SetTo, 228, 0xFFFF);
    EUDTraceLog(95)
    DoActions(SetMemoryXEPD(unitEPD + 39, SetTo, 14942436, 0xFFFFFFFF))
    # (Line 97) SetMemoryXEPD(unitEPD + 41, SetTo, 131072, 0xFFFF0000);
    EUDTraceLog(96)
    DoActions(SetMemoryXEPD(unitEPD + 40, SetTo, 228, 0xFFFF))
    # (Line 98) }
    EUDTraceLog(97)
    DoActions(SetMemoryXEPD(unitEPD + 41, SetTo, 131072, 0xFFFF0000))
    # (Line 100) function UseHPPtn(unit) {

@EUDTracedFunc
def UseHPPtn(unit):
    # (Line 101) const cp = getcurpl();
    EUDTraceLog(101)
    cp = f_getcurpl()
    # (Line 102) if(v.KeyD[cp] == 1) {
    _t1 = EUDIf()
    EUDTraceLog(102)
    if _t1(v.KeyD[cp] == 1):
        # (Line 103) if(unit == v.unitNum[cp]) {
        _t2 = EUDIf()
        EUDTraceLog(103)
        if _t2(unit == v.unitNum[cp]):
            # (Line 104) if(user.useHPPtn[cp] == 0) {
            _t3 = EUDIf()
            EUDTraceLog(104)
            if _t3(user.useHPPtn[cp] == 0):
                # (Line 105) v.s.printAt(10, "\x05등록된 체력 물약이 없습니다");
                EUDTraceLog(105)
                v.s.printAt(10, "\x05등록된 체력 물약이 없습니다")
                # (Line 106) return;
                EUDTraceLog(106)
                EUDReturn()
                # (Line 107) }
                # (Line 108) else if(user.remainHPPtn[cp] == 0) {
            _t4 = EUDElseIf()
            EUDTraceLog(108)
            if _t4(user.remainHPPtn[cp] == 0):
                # (Line 109) v.s.printAt(10, "\x05체력 물약이 부족합니다");
                EUDTraceLog(109)
                v.s.printAt(10, "\x05체력 물약이 부족합니다")
                # (Line 110) return;
                EUDTraceLog(110)
                EUDReturn()
                # (Line 111) }
                # (Line 112) else if(MemoryEPD(user.character[cp] + 0x8 / 4, Exactly, user.maxHP[cp] * 256)) {
            _t5 = EUDElseIf()
            EUDTraceLog(112)
            if _t5(MemoryEPD(user.character[cp] + 0x8 // 4, Exactly, user.maxHP[cp] * 256)):
                # (Line 113) v.s.printAt(10, "\x05최대 체력입니다");
                EUDTraceLog(113)
                v.s.printAt(10, "\x05최대 체력입니다")
                # (Line 114) return;
                EUDTraceLog(114)
                EUDReturn()
                # (Line 115) }
                # (Line 116) user.remainHPPtn[cp] -= 1;
            EUDEndIf()
            EUDTraceLog(116)
            _ARRW(user.remainHPPtn, cp).__isub__(1)
            # (Line 117) sys.SetHP(user.recoveryHPPtn[cp], Add);
            EUDTraceLog(117)
            sys.SetHP(user.recoveryHPPtn[cp], Add)
            # (Line 118) v.s.printAt(10, "\x04체력을 \x08", user.recoveryHPPtn[cp], " \x04만큼 회복합니다  \x05", user.remainHPPtn[cp], " 개 남음");
            EUDTraceLog(118)
            v.s.printAt(10, "\x04체력을 \x08", user.recoveryHPPtn[cp], " \x04만큼 회복합니다  \x05", user.remainHPPtn[cp], " 개 남음")
            # (Line 119) item.RemoveItem(1, user.useHPPtn[cp], 1);
            EUDTraceLog(119)
            item.RemoveItem(1, user.useHPPtn[cp], 1)
            # (Line 120) }
            # (Line 121) }
        EUDEndIf()
        # (Line 122) }
    EUDEndIf()
    # (Line 124) function UseMPPtn(unit) {

@EUDTracedFunc
def UseMPPtn(unit):
    # (Line 125) const cp = getcurpl();
    EUDTraceLog(125)
    cp = f_getcurpl()
    # (Line 126) if(v.KeyF[cp] == 1) {
    _t1 = EUDIf()
    EUDTraceLog(126)
    if _t1(v.KeyF[cp] == 1):
        # (Line 127) if(unit == v.unitNum[cp]) {
        _t2 = EUDIf()
        EUDTraceLog(127)
        if _t2(unit == v.unitNum[cp]):
            # (Line 128) if(user.useMPPtn[cp] == 0) {
            _t3 = EUDIf()
            EUDTraceLog(128)
            if _t3(user.useMPPtn[cp] == 0):
                # (Line 129) v.s.printAt(10, "\x05등록된 마나 물약이 없습니다");
                EUDTraceLog(129)
                v.s.printAt(10, "\x05등록된 마나 물약이 없습니다")
                # (Line 130) return;
                EUDTraceLog(130)
                EUDReturn()
                # (Line 131) }
                # (Line 132) else if(user.remainMPPtn[cp] == 0) {
            _t4 = EUDElseIf()
            EUDTraceLog(132)
            if _t4(user.remainMPPtn[cp] == 0):
                # (Line 133) v.s.printAt(10, "\x05마나 물약이 부족합니다");
                EUDTraceLog(133)
                v.s.printAt(10, "\x05마나 물약이 부족합니다")
                # (Line 134) return;
                EUDTraceLog(134)
                EUDReturn()
                # (Line 135) }
                # (Line 136) user.remainMPPtn[cp] -= 1;
            EUDEndIf()
            EUDTraceLog(136)
            _ARRW(user.remainMPPtn, cp).__isub__(1)
            # (Line 137) v.s.printAt(10, "\x04마나를 \x1E", user.recoveryMPPtn[cp], " \x04만큼 회복합니다  \x05", user.remainMPPtn[cp], " 개 남음");
            EUDTraceLog(137)
            v.s.printAt(10, "\x04마나를 \x1E", user.recoveryMPPtn[cp], " \x04만큼 회복합니다  \x05", user.remainMPPtn[cp], " 개 남음")
            # (Line 138) item.RemoveItem(1, user.useMPPtn[cp], 1);
            EUDTraceLog(138)
            item.RemoveItem(1, user.useMPPtn[cp], 1)
            # (Line 139) }
            # (Line 140) }
        EUDEndIf()
        # (Line 141) }
    EUDEndIf()
