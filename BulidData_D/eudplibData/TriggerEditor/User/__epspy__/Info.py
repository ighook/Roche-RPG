## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const character = PVariable();
character = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 2) const inMap = PVariable(); // 위치
inMap = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 3) const inConv = PVariable(); // 대화 중
inConv = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const isAlive = PVariable(); // 생존
isAlive = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 5) const posX = PVariable();
posX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const posY = PVariable();
posY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 7) const currentSlot = PVariable();
currentSlot = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const deathSCV = PVariable();
deathSCV = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const deathZergling = PVariable();
deathZergling = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const deathCavein = PVariable();
deathCavein = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const onPotal = PVariable();
onPotal = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const physDmg = PVariable(); // 공격력
physDmg = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 15) const magicDmg = PVariable(); // 마법 공격력
magicDmg = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const weaponPhyDmg = PVariable(); // 무기 물리 공격력
weaponPhyDmg = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 17) const weaponMagicDmg = PVariable(); // 무기 마법 공격력
weaponMagicDmg = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 19) const armorDefense = PVariable(); // 갑옷 방어력
armorDefense = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const openedInven = PVariable();
openedInven = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 22) const openedEquip = PVariable();
openedEquip = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const openedSlot = PVariable();
openedSlot = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 25) const maxHP = PVariable();
maxHP = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 26) const maxMP = PVariable();
maxMP = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 27) const mp = PVariable();
mp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 28) const level = PVariable();
level = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 29) const prevExp = PVariable();
prevExp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 30) const exp = PVariable();
exp = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 31) const gold = PVariable();
gold = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 32) const hour = PVariable();
hour = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 34) const useHPPtn = PVariable();
useHPPtn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 35) const useMPPtn = PVariable();
useMPPtn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 36) const remainHPPtn = PVariable();
remainHPPtn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 37) const remainMPPtn = PVariable();
remainMPPtn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 38) const recoveryHPPtn = PVariable();
recoveryHPPtn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 39) const recoveryMPPtn = PVariable();
recoveryMPPtn = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 43) const equipedWeaponType = PVariable();
equipedWeaponType = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 44) const equipedWeapon = PVariable();
equipedWeapon = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 46) const playTimeHour = PVariable();
playTimeHour = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 47) const playTimeMin = PVariable();
playTimeMin = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 48) const playTimeSec = PVariable();
playTimeSec = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 50) const screenMode = PVariable();
screenMode = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 52) const slotLevel = EUDArray(5 * 8);
slotLevel = _CGFW(lambda: [EUDArray(5 * 8)], 1)[0]
